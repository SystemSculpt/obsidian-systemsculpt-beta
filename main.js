/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/services/SystemPromptService.ts
var _SystemPromptService, SystemPromptService;
var init_SystemPromptService = __esm({
  "src/services/SystemPromptService.ts"() {
    _SystemPromptService = class {
      constructor(app) {
        this.app = app;
        if (!_SystemPromptService.initPromise && !_SystemPromptService.isInitializing) {
          _SystemPromptService.initializeCache();
        }
      }
      static setSystemSculptService(service) {
        _SystemPromptService.systemSculptService = service;
      }
      static isCacheValid() {
        if (!_SystemPromptService.cache)
          return false;
        const now = Date.now();
        return now - _SystemPromptService.cache.timestamp < _SystemPromptService.CACHE_DURATION;
      }
      static updateCache(prompts) {
        const byId = {};
        prompts.forEach((prompt) => {
          byId[prompt.id] = prompt;
        });
        _SystemPromptService.cache = {
          prompts,
          timestamp: Date.now(),
          byId
        };
      }
      static initializeCache() {
        if (_SystemPromptService.initPromise) {
          return _SystemPromptService.initPromise;
        }
        if (!_SystemPromptService.systemSculptService) {
          return Promise.reject(new Error("SystemSculptService not initialized"));
        }
        _SystemPromptService.isInitializing = true;
        _SystemPromptService.initPromise = fetch(`${_SystemPromptService.systemSculptService.baseUrl}/api/v1/system-prompts`).then(async (response) => {
          if (!response.ok) {
            throw new Error(`Failed to fetch system prompts: ${response.statusText}`);
          }
          const data = await response.json();
          _SystemPromptService.updateCache(data.prompts);
        }).catch((error) => {
          console.error("Error initializing system prompts cache:", error);
          _SystemPromptService.initPromise = null;
        }).finally(() => {
          _SystemPromptService.isInitializing = false;
        });
        return _SystemPromptService.initPromise;
      }
      async ensureCacheInitialized() {
        if (_SystemPromptService.isCacheValid())
          return;
        if (_SystemPromptService.initPromise) {
          await _SystemPromptService.initPromise;
          return;
        }
        await _SystemPromptService.initializeCache();
      }
      async getSystemPrompts() {
        try {
          await this.ensureCacheInitialized();
          if (_SystemPromptService.isCacheValid() && _SystemPromptService.cache) {
            return _SystemPromptService.cache.prompts;
          }
          const response = await fetch(`${_SystemPromptService.systemSculptService.baseUrl}/api/v1/system-prompts`);
          if (!response.ok) {
            throw new Error(`Failed to fetch system prompts: ${response.statusText}`);
          }
          const data = await response.json();
          _SystemPromptService.updateCache(data.prompts);
          return data.prompts;
        } catch (error) {
          console.error("Error fetching system prompts:", error);
          if (_SystemPromptService.cache) {
            return _SystemPromptService.cache.prompts;
          }
          throw error;
        }
      }
      async getSystemPromptById(id) {
        var _a, _b, _c;
        try {
          await this.ensureCacheInitialized();
          if (_SystemPromptService.isCacheValid() && ((_a = _SystemPromptService.cache) == null ? void 0 : _a.byId[id])) {
            return _SystemPromptService.cache.byId[id];
          }
          await this.getSystemPrompts();
          return ((_b = _SystemPromptService.cache) == null ? void 0 : _b.byId[id]) || null;
        } catch (error) {
          console.error(`Error fetching system prompt ${id}:`, error);
          if ((_c = _SystemPromptService.cache) == null ? void 0 : _c.byId[id]) {
            return _SystemPromptService.cache.byId[id];
          }
          throw error;
        }
      }
      async getSystemPromptTemplate() {
        try {
          const response = await fetch(`${_SystemPromptService.systemSculptService.baseUrl}/api/v1/system-prompts/template`);
          if (!response.ok) {
            throw new Error(`Failed to fetch system prompt template: ${response.statusText}`);
          }
          const data = await response.json();
          return data.template;
        } catch (error) {
          console.error("Error fetching system prompt template:", error);
          throw error;
        }
      }
      async refreshCache() {
        _SystemPromptService.cache = null;
        _SystemPromptService.initPromise = null;
        await _SystemPromptService.initializeCache();
      }
      static clearCache() {
        _SystemPromptService.cache = null;
        _SystemPromptService.initPromise = null;
      }
    };
    SystemPromptService = _SystemPromptService;
    SystemPromptService.cache = null;
    SystemPromptService.CACHE_DURATION = 60 * 60 * 1e3;
    SystemPromptService.initPromise = null;
    SystemPromptService.isInitializing = false;
  }
});

// src/utils/errors.ts
function getErrorMessage(code, model) {
  const message = ERROR_MESSAGES[code];
  if (typeof message === "function") {
    return message(model);
  }
  return message;
}
var ERROR_CODES, ERROR_MESSAGES, SystemSculptError;
var init_errors = __esm({
  "src/utils/errors.ts"() {
    ERROR_CODES = {
      INVALID_LICENSE: "INVALID_LICENSE",
      LICENSE_EXPIRED: "LICENSE_EXPIRED",
      LICENSE_DISABLED: "LICENSE_DISABLED",
      PRO_REQUIRED: "PRO_REQUIRED",
      MODEL_UNAVAILABLE: "MODEL_UNAVAILABLE",
      MODEL_REQUEST_ERROR: "MODEL_REQUEST_ERROR",
      STREAM_ERROR: "STREAM_ERROR",
      INVALID_RESPONSE: "INVALID_RESPONSE",
      NO_IMAGE: "NO_IMAGE",
      FILE_NOT_FOUND: "FILE_NOT_FOUND",
      FILE_TOO_LARGE: "FILE_TOO_LARGE",
      UNSUPPORTED_FORMAT: "UNSUPPORTED_FORMAT",
      PROCESSING_ERROR: "PROCESSING_ERROR",
      UNKNOWN_ERROR: "UNKNOWN_ERROR",
      QUOTA_EXCEEDED: "QUOTA_EXCEEDED"
    };
    ERROR_MESSAGES = {
      [ERROR_CODES.INVALID_LICENSE]: "Invalid license key. Please check and try again.",
      [ERROR_CODES.LICENSE_EXPIRED]: "Your license has expired.",
      [ERROR_CODES.LICENSE_DISABLED]: "This license has been disabled.",
      [ERROR_CODES.PRO_REQUIRED]: "This feature requires a Pro subscription. Please upgrade.",
      [ERROR_CODES.MODEL_UNAVAILABLE]: (model) => `Model ${model || ""} is currently unavailable.`,
      [ERROR_CODES.MODEL_REQUEST_ERROR]: (model) => `Model ${model || ""} cannot process this request.`,
      [ERROR_CODES.STREAM_ERROR]: "Streaming failed. Please try again.",
      [ERROR_CODES.INVALID_RESPONSE]: "Invalid response received from server. Please try again.",
      [ERROR_CODES.UNKNOWN_ERROR]: "An unexpected error occurred. Please try again or contact support.",
      [ERROR_CODES.QUOTA_EXCEEDED]: "You have exceeded your quota. Please upgrade your plan.",
      [ERROR_CODES.NO_IMAGE]: "No image in clipboard",
      [ERROR_CODES.FILE_NOT_FOUND]: "File not found",
      [ERROR_CODES.FILE_TOO_LARGE]: "File too large (max 10MB)",
      [ERROR_CODES.UNSUPPORTED_FORMAT]: "Unsupported file format",
      [ERROR_CODES.PROCESSING_ERROR]: "Failed to process file"
    };
    SystemSculptError = class extends Error {
      constructor(message, code = ERROR_CODES.UNKNOWN_ERROR, statusCode = 500, metadata) {
        super(message);
        this.code = code;
        this.statusCode = statusCode;
        this.metadata = metadata;
        this.name = "SystemSculptError";
      }
    };
  }
});

// src/utils/ImageProcessor.ts
var _ImageProcessor, ImageProcessor;
var init_ImageProcessor = __esm({
  "src/utils/ImageProcessor.ts"() {
    init_errors();
    _ImageProcessor = class {
      static async processImage(file, app) {
        if (!file) {
          throw new SystemSculptError("File not found", "FILE_NOT_FOUND", 404);
        }
        if (file.stat.size > _ImageProcessor.MAX_FILE_SIZE) {
          throw new SystemSculptError("Image too large (max 10MB)", "FILE_TOO_LARGE", 413);
        }
        const extension = file.extension.toLowerCase();
        if (!_ImageProcessor.SUPPORTED_FORMATS.has(extension)) {
          throw new SystemSculptError("Unsupported image format", "UNSUPPORTED_FORMAT", 415);
        }
        try {
          const arrayBuffer = await app.vault.readBinary(file);
          const base64 = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
              const dataUrl = reader.result;
              resolve(dataUrl);
            };
            reader.onerror = () => reject(reader.error);
            const type = `image/${extension === "jpg" ? "jpeg" : extension}`;
            const blob = new Blob([arrayBuffer], { type });
            reader.readAsDataURL(blob);
          });
          return base64;
        } catch (error) {
          console.error("Image processing failed:", error);
          throw new SystemSculptError("Failed to process image", "PROCESSING_ERROR", 500);
        }
      }
      static async processClipboardImage(clipboardData) {
        const file = clipboardData.files[0];
        if (!file || !file.type.startsWith("image/")) {
          throw new SystemSculptError("No image in clipboard", "NO_IMAGE", 400);
        }
        if (file.size > this.MAX_FILE_SIZE) {
          throw new SystemSculptError("Image too large (max 10MB)", "FILE_TOO_LARGE", 413);
        }
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = () => reject(reader.error);
          reader.readAsDataURL(file);
        });
      }
    };
    ImageProcessor = _ImageProcessor;
    ImageProcessor.MAX_FILE_SIZE = 10 * 1024 * 1024;
    ImageProcessor.SUPPORTED_FORMATS = new Set([
      "jpg",
      "jpeg",
      "png",
      "gif",
      "webp"
    ]);
  }
});

// src/constants/api.ts
var API_BASE_URL, SYSTEMSCULPT_API_ENDPOINTS, SYSTEMSCULPT_API_HEADERS;
var init_api = __esm({
  "src/constants/api.ts"() {
    API_BASE_URL = window.location.hostname === "localhost" ? "http://localhost:3001/api/v1" : "https://api.systemsculpt.com/api/v1";
    SYSTEMSCULPT_API_ENDPOINTS = {
      LICENSE: {
        VALIDATE: (key) => `/api/v1/license/validate/${key}`
      },
      MODELS: {
        LIST: "/api/v1/models",
        GET: (modelId) => `/api/v1/models/${modelId}`
      },
      CHAT: {
        COMPLETIONS: "/api/v1/chat/completions"
      },
      SYSTEM_PROMPTS: {
        GET: (id) => `/api/v1/system-prompts/${id}`,
        LIST: "/api/v1/system-prompts"
      },
      DOCUMENTS: {
        PROCESS: "/api/v1/documents/process",
        GET: (id) => `/api/v1/documents/${id}`,
        DOWNLOAD: (id) => `/api/v1/documents/${id}/download`
      }
    };
    SYSTEMSCULPT_API_HEADERS = {
      DEFAULT: {
        "Content-Type": "application/json"
      },
      WITH_LICENSE: (licenseKey) => ({
        ...SYSTEMSCULPT_API_HEADERS.DEFAULT,
        Authorization: `Bearer ${licenseKey}`
      })
    };
  }
});

// src/services/SystemSculptService.ts
function generateUUID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
var import_obsidian, _SystemSculptService, SystemSculptService;
var init_SystemSculptService = __esm({
  "src/services/SystemSculptService.ts"() {
    import_obsidian = __toModule(require("obsidian"));
    init_SystemPromptService();
    init_errors();
    init_ImageProcessor();
    init_api();
    _SystemSculptService = class {
      constructor(settings, app) {
        this.isInsideThinkTags = false;
        this.hasLoggedDevMode = false;
        this.settings = settings;
        this.licenseKey = settings.licenseKey;
        this.app = app;
      }
      get baseUrl() {
        if (!this.hasLoggedDevMode) {
          this.hasLoggedDevMode = true;
        }
        if (this.settings.developmentMode) {
          return this.settings.serverUrl;
        }
        return "https://api.systemsculpt.com";
      }
      get extractionsDirectory() {
        var _a;
        return (_a = this.settings.extractionsDirectory) != null ? _a : "";
      }
      static getInstance(settings, app) {
        if (!_SystemSculptService.instance) {
          _SystemSculptService.instance = new _SystemSculptService(settings, app);
        } else {
          _SystemSculptService.instance.settings = settings;
          _SystemSculptService.instance.licenseKey = settings.licenseKey;
        }
        return _SystemSculptService.instance;
      }
      updateSettings(settings) {
        this.settings = settings;
        this.licenseKey = settings.licenseKey;
      }
      async makeRequest(endpoint, options = {}) {
        if (options.requiresPro && !endpoint.includes("/license/validate")) {
          const isValid = await this.validateLicense(true);
          if (!isValid) {
            throw new SystemSculptError(getErrorMessage(ERROR_CODES.PRO_REQUIRED), ERROR_CODES.PRO_REQUIRED, 403);
          }
        }
        const headers = this.licenseKey ? SYSTEMSCULPT_API_HEADERS.WITH_LICENSE(this.licenseKey) : SYSTEMSCULPT_API_HEADERS.DEFAULT;
        const url = `${this.baseUrl}${endpoint}`;
        const response = await (0, import_obsidian.requestUrl)({
          url,
          method: options.method || "GET",
          headers: {
            ...headers,
            ...options.headers || {}
          },
          body: options.body,
          throw: false
        });
        let apiResponse;
        try {
          apiResponse = response.json;
        } catch (e) {
          throw new SystemSculptError(getErrorMessage(ERROR_CODES.INVALID_RESPONSE), ERROR_CODES.INVALID_RESPONSE, response.status);
        }
        if (response.status !== 200 || apiResponse.status === "error") {
          this.handleApiError(endpoint, response, apiResponse);
        }
        return apiResponse.data !== void 0 ? apiResponse.data : apiResponse;
      }
      handleApiError(endpoint, response, apiResponse) {
        if (apiResponse.error) {
          const errorCode = apiResponse.error.code || ERROR_CODES.UNKNOWN_ERROR;
          const statusCode = apiResponse.error.statusCode || response.status;
          const errorMessage = getErrorMessage(errorCode, apiResponse.error.model);
          const metadata = {};
          if (errorCode === ERROR_CODES.MODEL_UNAVAILABLE || errorCode === ERROR_CODES.MODEL_REQUEST_ERROR) {
            metadata.shouldResubmit = true;
            metadata.model = apiResponse.error.model;
          }
          throw new SystemSculptError(errorMessage, errorCode, statusCode, metadata);
        }
        throw new SystemSculptError(getErrorMessage(ERROR_CODES.UNKNOWN_ERROR), ERROR_CODES.UNKNOWN_ERROR, response.status);
      }
      async handleStreamError(response, isCustomProvider = false) {
        var _a, _b, _c, _d;
        console.error("Stream error response:", {
          status: response.status,
          statusText: response.statusText,
          contentType: response.headers.get("content-type"),
          isCustomProvider
        });
        let errorCode = ERROR_CODES.STREAM_ERROR;
        let metadata = {};
        try {
          const errorData = await response.json();
          console.error("Stream error data:", errorData);
          if (isCustomProvider) {
            metadata.rawError = errorData;
            metadata.provider = "custom";
            if (response.status === 401) {
              errorCode = ERROR_CODES.INVALID_LICENSE;
              throw new SystemSculptError(((_a = errorData.error) == null ? void 0 : _a.message) || "Invalid API key for custom provider", errorCode, response.status, metadata);
            } else if (response.status === 429) {
              errorCode = ERROR_CODES.QUOTA_EXCEEDED;
              throw new SystemSculptError(((_b = errorData.error) == null ? void 0 : _b.message) || "Rate limit exceeded for custom provider", errorCode, response.status, metadata);
            } else if (response.status === 404) {
              errorCode = ERROR_CODES.MODEL_UNAVAILABLE;
              throw new SystemSculptError(((_c = errorData.error) == null ? void 0 : _c.message) || "Model not found or endpoint incorrect", errorCode, response.status, metadata);
            }
            throw new SystemSculptError(((_d = errorData.error) == null ? void 0 : _d.message) || response.statusText, errorCode, response.status, metadata);
          }
          if (errorData.error) {
            errorCode = errorData.error.code || ERROR_CODES.STREAM_ERROR;
            if (errorCode === ERROR_CODES.MODEL_UNAVAILABLE || errorCode === ERROR_CODES.MODEL_REQUEST_ERROR) {
              metadata = {
                model: errorData.error.model,
                shouldResubmit: true,
                rawError: errorData
              };
            }
          }
        } catch (e) {
          console.error("Error parsing error response:", e);
          if (e instanceof SystemSculptError) {
            throw e;
          }
          errorCode = ERROR_CODES.STREAM_ERROR;
        }
        throw new SystemSculptError(getErrorMessage(errorCode, metadata.model), errorCode, response.status, metadata);
      }
      async validateLicense(forceCheck = false) {
        if (!this.licenseKey)
          return false;
        try {
          await this.makeRequest(SYSTEMSCULPT_API_ENDPOINTS.LICENSE.VALIDATE(this.licenseKey), {
            method: "GET",
            headers: SYSTEMSCULPT_API_HEADERS.WITH_LICENSE(this.licenseKey)
          });
          return true;
        } catch (e) {
          return false;
        }
      }
      async getModels() {
        try {
          const response = await this.makeRequest("/api/v1/models", {
            method: "GET"
          });
          if (!response || !Array.isArray(response.models)) {
            throw new SystemSculptError(getErrorMessage(ERROR_CODES.INVALID_RESPONSE), ERROR_CODES.INVALID_RESPONSE, 500);
          }
          const systemsculptModels = response.models.map((model) => ({
            ...model,
            provider: "systemsculpt"
          }));
          return systemsculptModels;
        } catch (error) {
          throw error;
        }
      }
      async getTokenBalance() {
        const isValid = await this.validateLicense(true);
        if (!isValid)
          return 0;
        const licenseInfo = await this.makeRequest(SYSTEMSCULPT_API_ENDPOINTS.LICENSE.VALIDATE(this.licenseKey), {
          method: "GET",
          headers: SYSTEMSCULPT_API_HEADERS.WITH_LICENSE(this.licenseKey)
        });
        return licenseInfo.credits_balance || 0;
      }
      async getContextFileContents(filePath) {
        try {
          const linkText = filePath.replace(/^\[\[(.*?)\]\]$/, "$1");
          const cleanPath = linkText.replace(/\$begin:math:display\$\[(.*?)\$end:math:display\$]/g, "$1");
          const resolvedFile = this.app.metadataCache.getFirstLinkpathDest(cleanPath, "");
          if (resolvedFile instanceof import_obsidian.TFile) {
            if (resolvedFile.extension.match(/^(jpg|jpeg|png|gif|webp)$/i)) {
              const base64 = await ImageProcessor.processImage(resolvedFile, this.app);
              return { type: "image", base64 };
            }
            const content = await this.app.vault.read(resolvedFile);
            return content;
          }
          const fileName = cleanPath.split("/").pop();
          if (fileName) {
            const allFiles = this.app.vault.getFiles();
            const matchingFile = allFiles.find((f) => f.name === fileName);
            if (matchingFile) {
              if (matchingFile.extension.match(/^(jpg|jpeg|png|gif|webp)$/i)) {
                const base64 = await ImageProcessor.processImage(matchingFile, this.app);
                return { type: "image", base64 };
              }
              const content = await this.app.vault.read(matchingFile);
              return content;
            }
          }
          return null;
        } catch (error) {
          return null;
        }
      }
      async buildContextMessageFromFile(filePath) {
        const content = await this.getContextFileContents(filePath);
        const displayName = filePath.replace(/\$begin:math:display\$\[(.*?)\$end:math:display\$]/g, "$1");
        if (content) {
          if (typeof content === "string") {
            return {
              role: "user",
              content: `Context from ${displayName}:

${content}`,
              message_id: generateUUID()
            };
          } else if (content.type === "image") {
            return {
              role: "user",
              content: [
                {
                  type: "text",
                  text: `Context from ${displayName}:

`
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:image/png;base64,${content.base64.replace(/^data:.*;base64,/, "")}`
                  }
                }
              ],
              message_id: generateUUID()
            };
          }
        }
        return null;
      }
      async prepareMessagesWithContext(messages, contextFiles, systemPromptType, systemPromptPath) {
        const preparedMessages = [];
        let systemPromptContent;
        if (systemPromptType === "custom" && systemPromptPath) {
          const resolvedFile = this.app.metadataCache.getFirstLinkpathDest(systemPromptPath, "");
          if (resolvedFile instanceof import_obsidian.TFile) {
            systemPromptContent = await this.app.vault.read(resolvedFile);
          } else {
            const fileWithExt = this.app.vault.getAbstractFileByPath(`${systemPromptPath}.md`);
            if (fileWithExt instanceof import_obsidian.TFile) {
              systemPromptContent = await this.app.vault.read(fileWithExt);
            } else {
              const fileInSystemPromptsDir = this.app.vault.getAbstractFileByPath(`SystemSculpt/System Prompts/${systemPromptPath}.md`);
              if (fileInSystemPromptsDir instanceof import_obsidian.TFile) {
                systemPromptContent = await this.app.vault.read(fileInSystemPromptsDir);
              }
            }
          }
        } else if (systemPromptType) {
          try {
            const systemPromptService = new SystemPromptService(this.app);
            const preset = await systemPromptService.getSystemPromptById(systemPromptType);
            if (preset) {
              systemPromptContent = preset.systemPrompt;
            }
          } catch (error) {
          }
        }
        if (systemPromptContent) {
          preparedMessages.push({
            role: "system",
            content: systemPromptContent,
            message_id: crypto.randomUUID(),
            systemPromptType,
            systemPromptPath
          });
        }
        const documentIds = [];
        for (const filePath of contextFiles) {
          if (filePath.startsWith("doc:")) {
            const documentId = filePath.substring(4);
            documentIds.push(documentId);
          } else {
            const contextMessage = await this.buildContextMessageFromFile(filePath);
            if (contextMessage) {
              preparedMessages.push(contextMessage);
            }
          }
        }
        if (documentIds.length > 0) {
          const firstMessage = messages[0];
          if (firstMessage) {
            firstMessage.documentContext = { documentIds };
          }
        }
        for (const msg of messages) {
          preparedMessages.push({
            role: msg.role,
            content: msg.content,
            message_id: msg.message_id || generateUUID(),
            documentContext: msg.documentContext,
            systemPromptType: msg.systemPromptType,
            systemPromptPath: msg.systemPromptPath
          });
        }
        return preparedMessages;
      }
      normalizeDataPrefix(line) {
        if (!(line == null ? void 0 : line.trim()))
          return "";
        const trimmed = line.trim();
        if (trimmed === "data:" || trimmed === "data: " || trimmed === "[DONE]" || trimmed.startsWith(": OPENROUTER")) {
          return "";
        }
        return trimmed.replace(/^(?:data:\s*)+/, "");
      }
      isValidStreamEvent(data, isCustomProvider = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i;
        if (!data)
          return false;
        try {
          const parsed = JSON.parse(data);
          return !!(parsed && (((_c = (_b = (_a = parsed.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.delta) == null ? void 0 : _c.content) || ((_f = (_e = (_d = parsed.choices) == null ? void 0 : _d[0]) == null ? void 0 : _e.delta) == null ? void 0 : _f.reasoning) || ((_i = (_h = (_g = parsed.choices) == null ? void 0 : _g[0]) == null ? void 0 : _h.delta) == null ? void 0 : _i.function_call) || parsed.error));
        } catch (e) {
          return false;
        }
      }
      processStreamLine(line, isCustomProvider = false) {
        if (!line.trim().startsWith("data:")) {
          return null;
        }
        const normalized = this.normalizeDataPrefix(line);
        return this.isValidStreamEvent(normalized, isCustomProvider) ? normalized : null;
      }
      async handleStreamEvent(event, model, isCustomProvider = false) {
        var _a, _b, _c, _d, _e, _f;
        if (!event)
          return null;
        try {
          let parsed;
          try {
            parsed = JSON.parse(event);
          } catch (parseError) {
            return null;
          }
          if (!parsed)
            return null;
          if (parsed.error) {
            const errorCode = parsed.error.code || ERROR_CODES.STREAM_ERROR;
            let errorMessage = parsed.error.message || getErrorMessage(errorCode, model);
            const metadata = {
              model,
              shouldResubmit: false,
              rawError: parsed.error,
              originalEvent: event
            };
            if (errorCode === ERROR_CODES.MODEL_UNAVAILABLE || errorCode === ERROR_CODES.MODEL_REQUEST_ERROR) {
              metadata.shouldResubmit = true;
            }
            throw new SystemSculptError(errorMessage, errorCode, parsed.error.statusCode || 500, metadata);
          }
          const content = ((_c = (_b = (_a = parsed.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.delta) == null ? void 0 : _c.content) || null;
          const reasoning = ((_f = (_e = (_d = parsed.choices) == null ? void 0 : _d[0]) == null ? void 0 : _e.delta) == null ? void 0 : _f.reasoning) || null;
          if (this.isInsideThinkTags) {
            let combinedText = "";
            if (reasoning)
              combinedText += reasoning;
            if (content)
              combinedText += content;
            const thinkEndMatch = combinedText.match(/(.*?)\s*<\/think>\s*(.*)/);
            if (thinkEndMatch) {
              this.isInsideThinkTags = false;
              return {
                reasoning: thinkEndMatch[1] || "",
                content: thinkEndMatch[2] || ""
              };
            }
            return {
              content: null,
              reasoning: combinedText || null
            };
          } else {
            if (content) {
              const thinkStartMatch = content.match(/<think>\s*(.*)/);
              if (thinkStartMatch) {
                this.isInsideThinkTags = true;
                return {
                  content: null,
                  reasoning: thinkStartMatch[1] || ""
                };
              }
            }
          }
          return { content, reasoning };
        } catch (e) {
          if (e instanceof SystemSculptError) {
            throw e;
          }
          return null;
        }
      }
      async processStreamChunk(chunk, buffer, model, isCustomProvider = false) {
        const decoded = _SystemSculptService.decoder.decode(chunk, { stream: true });
        const fullChunk = buffer + decoded;
        const lines = fullChunk.split("\n");
        const contents = [];
        const reasonings = [];
        for (let i = 0; i < lines.length - 1; i++) {
          const event = this.processStreamLine(lines[i], isCustomProvider);
          if (event) {
            const result = await this.handleStreamEvent(event, model, isCustomProvider);
            if (result) {
              if (result.content)
                contents.push(result.content);
              if (result.reasoning)
                reasonings.push(result.reasoning);
            }
          }
        }
        const newBuffer = lines[lines.length - 1].trim() ? lines[lines.length - 1] : "";
        return { newBuffer, contents, reasonings };
      }
      stripProviderPrefixes(modelId) {
        return modelId.replace(/^openrouter\//, "");
      }
      async getModelInfo(modelId) {
        if (this.settings.activeProvider.type === "custom") {
          const activeProvider = this.settings.customProviders.find((p) => p.id === this.settings.activeProvider.id && p.isEnabled);
          if (!activeProvider) {
            throw new SystemSculptError(`Provider ${this.settings.activeProvider.name} not found or disabled`, ERROR_CODES.MODEL_UNAVAILABLE, 404);
          }
          return {
            isCustom: true,
            provider: activeProvider,
            actualModelId: modelId
          };
        }
        return {
          isCustom: false,
          actualModelId: this.stripProviderPrefixes(modelId)
        };
      }
      async handleCustomProviderCompletion(provider, messages, temperature, modelId, signal) {
        const endpoint = provider.endpoint.trim().replace(/\/$/, "");
        const headers = {
          "Content-Type": "application/json",
          Authorization: `Bearer ${provider.apiKey}`
        };
        if (endpoint.includes("openrouter.ai")) {
          headers["HTTP-Referer"] = "https://systemsculpt.com";
          headers["X-Title"] = "SystemSculpt AI";
        }
        const baseRequestBody = {
          model: modelId,
          messages: messages.map((msg) => ({
            role: msg.role,
            content: msg.content
          })),
          stream: true
        };
        const requestBody = {
          ...baseRequestBody,
          ...!endpoint.includes("api.openai.com") && { temperature },
          ...endpoint.includes("openrouter.ai") && {
            include_reasoning: true
          },
          ...endpoint.includes("api.openai.com") && modelId === "o3-mini" && {
            reasoning_effort: "high"
          }
        };
        if (endpoint.includes("api.openai.com") && modelId === "o3-mini") {
          console.log("Making OpenAI API call with o3-mini model:", {
            endpoint,
            modelId,
            requestBody
          });
        }
        const response = await fetch(`${endpoint}/chat/completions`, {
          method: "POST",
          headers,
          body: JSON.stringify(requestBody),
          signal
        });
        if (!response.ok) {
          await this.handleStreamError(response, true);
        }
        return response;
      }
      async *streamMessage({
        messages,
        model,
        temperature = 0.7,
        onError,
        contextFiles,
        systemPromptType,
        systemPromptPath,
        signal,
        forceSystemSculptApi = false
      }) {
        try {
          this.isInsideThinkTags = false;
          const preparedMessages = await this.prepareMessagesWithContext(messages, contextFiles || new Set(), systemPromptType, systemPromptPath);
          const { isCustom, provider, actualModelId } = forceSystemSculptApi ? { isCustom: false, provider: void 0, actualModelId: model } : await this.getModelInfo(model);
          let response;
          if (isCustom && provider) {
            response = await this.handleCustomProviderCompletion(provider, preparedMessages, temperature, actualModelId, signal);
          } else {
            const requestBody = {
              model: actualModelId,
              messages: preparedMessages,
              temperature,
              stream: true,
              include_reasoning: true
            };
            response = await fetch(`${this.baseUrl}${SYSTEMSCULPT_API_ENDPOINTS.CHAT.COMPLETIONS}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "text/event-stream",
                "Cache-Control": "no-cache",
                "X-Request-ID": crypto.randomUUID(),
                "x-license-key": this.licenseKey
              },
              body: JSON.stringify(requestBody),
              signal
            });
          }
          if (!response.ok) {
            await this.handleStreamError(response, !!provider);
          }
          if (!response.body) {
            throw new SystemSculptError(getErrorMessage(ERROR_CODES.STREAM_ERROR), ERROR_CODES.STREAM_ERROR, response.status);
          }
          const reader = response.body.getReader();
          let buffer = "";
          try {
            while (true) {
              const { done, value } = await reader.read();
              if (done) {
                const finalChunk = _SystemSculptService.decoder.decode();
                if (finalChunk) {
                  const event = this.processStreamLine(finalChunk);
                  if (event) {
                    const result = await this.handleStreamEvent(event, model, !!provider);
                    if (result) {
                      if (result.content || result.reasoning) {
                        yield {
                          content: result.content || void 0,
                          reasoning: result.reasoning || void 0
                        };
                      }
                    }
                  }
                }
                break;
              }
              const { newBuffer, contents, reasonings } = await this.processStreamChunk(value, buffer, model, !!provider);
              buffer = newBuffer;
              for (let i = 0; i < Math.max(contents.length, reasonings.length); i++) {
                yield {
                  content: contents[i],
                  reasoning: reasonings[i]
                };
              }
            }
          } finally {
            reader.releaseLock();
          }
        } catch (error) {
          if (error instanceof DOMException && error.name === "AbortError") {
            return;
          }
          if (onError) {
            let errorMessage = error instanceof Error ? error.message : getErrorMessage(ERROR_CODES.UNKNOWN_ERROR);
            if (error instanceof SystemSculptError && error.code === ERROR_CODES.STREAM_ERROR && error.statusCode === 400) {
              errorMessage += "\nPlease try again in a few moments. If the issue persists, try selecting a different model.";
            }
            onError(errorMessage);
          }
          throw error;
        }
      }
      async uploadDocument(file) {
        try {
          const data = await this.app.vault.readBinary(file);
          const formData = new FormData();
          const blob = new Blob([data], { type: "application/octet-stream" });
          formData.append("file", blob, file.name);
          const response = await fetch(`${this.baseUrl}/api/v1/documents/process`, {
            method: "POST",
            headers: {
              "x-license-key": this.licenseKey
            },
            body: formData
          });
          if (!response.ok) {
            throw new Error(`Upload failed: ${response.status}`);
          }
          return await response.json();
        } catch (error) {
          throw error;
        }
      }
      async uploadAudio(file) {
        try {
          const data = await this.app.vault.readBinary(file);
          const formData = new FormData();
          const blob = new Blob([data], { type: "application/octet-stream" });
          formData.append("file", blob, file.name);
          const response = await fetch(`${this.baseUrl}/api/v1/audio/transcriptions`, {
            method: "POST",
            body: formData
          });
          if (!response.ok) {
            throw new Error(`Audio upload failed: ${response.status}`);
          }
          const result = await response.json();
          return result;
        } catch (error) {
          throw error;
        }
      }
      async preloadModels() {
        return Promise.resolve();
      }
    };
    SystemSculptService = _SystemSculptService;
    SystemSculptService.decoder = new TextDecoder();
  }
});

// src/core/ui/components/LoadingIndicator.ts
var init_LoadingIndicator = __esm({
  "src/core/ui/components/LoadingIndicator.ts"() {
  }
});

// src/core/ui/components/Button.ts
var init_Button = __esm({
  "src/core/ui/components/Button.ts"() {
  }
});

// src/services/TitleGenerationService.ts
var import_obsidian2, TitleGenerationService;
var init_TitleGenerationService = __esm({
  "src/services/TitleGenerationService.ts"() {
    init_SystemSculptService();
    import_obsidian2 = __toModule(require("obsidian"));
    TitleGenerationService = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.titleGenerationModel = null;
        this.sculptService = SystemSculptService.getInstance(plugin.settings, plugin.app);
      }
      static getInstance(plugin) {
        if (!TitleGenerationService.instance) {
          TitleGenerationService.instance = new TitleGenerationService(plugin);
        }
        return TitleGenerationService.instance;
      }
      async getModel() {
        if (this.titleGenerationModel)
          return this.titleGenerationModel;
        try {
          const response = await fetch(`${this.sculptService.baseUrl}/api/v1/title-generation-prompts`);
          if (!response.ok) {
            throw new Error("Failed to fetch title generation configuration");
          }
          const data = await response.json();
          if (!data.data.model) {
            throw new Error("No title generation model configured on server");
          }
          this.titleGenerationModel = data.data.model;
          return this.titleGenerationModel;
        } catch (error) {
          console.error("Error fetching title generation model:", error);
          throw error;
        }
      }
      async generateTitle(messages, onProgress) {
        try {
          const modelId = await this.getModel();
          if (!modelId) {
            throw new Error("Failed to get title generation model from server");
          }
          let contentXml = "";
          if (messages instanceof import_obsidian2.TFile) {
            const content = await this.plugin.app.vault.read(messages);
            contentXml = `<content_to_generate_title_from>
<note_title>${messages.basename}</note_title>
<note_content>
${content}
</note_content>
</content_to_generate_title_from>`;
          } else {
            const messagesToUse = messages.slice(0, 25);
            contentXml = `<content_to_generate_title_from>
${messagesToUse.map((msg) => {
              const content = typeof msg.content === "string" ? msg.content : JSON.stringify(msg.content);
              return `[${msg.role}]: ${content}`;
            }).join("\n")}
</content_to_generate_title_from>`;
          }
          const promptMessages = [
            {
              role: "system",
              content: this.plugin.settings.titleGenerationPrompt,
              message_id: crypto.randomUUID()
            },
            {
              role: "user",
              content: contentXml,
              message_id: crypto.randomUUID()
            }
          ];
          let generatedTitle = "";
          for await (const chunk of this.sculptService.streamMessage({
            messages: promptMessages,
            model: modelId,
            temperature: 0.7,
            forceSystemSculptApi: true
          })) {
            if (chunk.content) {
              generatedTitle += chunk.content;
              if (onProgress) {
                onProgress(generatedTitle.trim());
              }
            }
          }
          return generatedTitle.trim();
        } catch (error) {
          console.error("Error generating title:", error);
          throw error;
        }
      }
    };
  }
});

// src/core/ui/modals/TextAreaModal.ts
var import_obsidian3, TextAreaModal;
var init_TextAreaModal = __esm({
  "src/core/ui/modals/TextAreaModal.ts"() {
    import_obsidian3 = __toModule(require("obsidian"));
    init_TitleGenerationService();
    TextAreaModal = class extends import_obsidian3.Modal {
      constructor(app, title, initialValue, options = {}) {
        super(app);
        this.title = title;
        this.initialValue = initialValue;
        this.options = options;
        this.result = null;
        this.titleGenerationService = null;
        this.generateButton = null;
        this.modalEl.addClass("systemsculpt-modal", "systemsculpt-textarea-modal");
        if (options.plugin && options.messages) {
          this.titleGenerationService = TitleGenerationService.getInstance(options.plugin);
        }
      }
      onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass("systemsculpt-modal-content");
        this.titleEl.setText(this.title);
        this.titleEl.addClass("systemsculpt-modal-title");
        const textAreaContainer = contentEl.createDiv("systemsculpt-textarea-container");
        this.textArea = textAreaContainer.createEl("textarea", {
          cls: "systemsculpt-textarea",
          attr: {
            rows: this.options.rows || 1,
            placeholder: this.options.placeholder || ""
          }
        });
        this.textArea.value = this.initialValue;
        const resizeObserver = new ResizeObserver(() => {
          this.textArea.style.height = "auto";
          this.textArea.style.height = this.textArea.scrollHeight + "px";
        });
        resizeObserver.observe(this.textArea);
        const buttonContainer = contentEl.createDiv("systemsculpt-button-container");
        const secondaryButton = buttonContainer.createEl("button", {
          text: this.options.secondaryButton || "Cancel",
          cls: "systemsculpt-button"
        });
        const handleCancel = () => {
          this.result = null;
          this.close();
        };
        secondaryButton.onclick = handleCancel;
        if (this.titleGenerationService && this.options.messages) {
          this.generateButton = buttonContainer.createEl("button", {
            text: "Generate Title",
            cls: "systemsculpt-button"
          });
          this.generateButton.onclick = async () => {
            var _a;
            if (this.generateButton) {
              this.generateButton.setAttr("disabled", "true");
              this.generateButton.setText("Generating...");
            }
            try {
              await ((_a = this.titleGenerationService) == null ? void 0 : _a.generateTitle(this.options.messages, (title) => {
                if (this.textArea) {
                  this.textArea.value = title;
                }
              }));
            } catch (error) {
              console.error("Error generating title:", error);
            } finally {
              if (this.generateButton) {
                this.generateButton.removeAttribute("disabled");
                this.generateButton.setText("Generate Title");
              }
            }
          };
        }
        const primaryButton = buttonContainer.createEl("button", {
          text: this.options.primaryButton || "Save",
          cls: "systemsculpt-button mod-cta"
        });
        const handleSave = () => {
          this.result = this.textArea.value;
          this.close();
        };
        primaryButton.onclick = handleSave;
        this.modalEl.addEventListener("keydown", (e) => {
          if (e.key === "Enter" && !e.isComposing && !e.shiftKey && this.options.rows === 1) {
            e.preventDefault();
            handleSave();
          } else if (e.key === "Escape") {
            e.preventDefault();
            handleCancel();
          }
        });
        this.textArea.focus();
        this.textArea.setSelectionRange(this.textArea.value.length, this.textArea.value.length);
      }
      onClose() {
        const { contentEl } = this;
        contentEl.empty();
        if (this.resolvePromise !== void 0 && this.resolvePromise !== null) {
          this.resolvePromise(this.result);
        }
      }
      async openAndGetValue() {
        return new Promise((resolve) => {
          this.resolvePromise = resolve;
          this.open();
        });
      }
    };
  }
});

// src/core/ui/modals/PopupModal.ts
async function showPopup(app, message, options = {}) {
  const popup = new PopupComponent(app, message, options);
  return popup.open();
}
var import_obsidian4, PopupComponent;
var init_PopupModal = __esm({
  "src/core/ui/modals/PopupModal.ts"() {
    import_obsidian4 = __toModule(require("obsidian"));
    PopupComponent = class {
      constructor(app, message, options = {}) {
        this.result = null;
        this.app = app;
        this.message = message;
        this.options = options;
      }
      createPopup() {
        this.containerEl = document.createElement("div");
        this.containerEl.addClass("systemsculpt-popup-container");
        document.body.appendChild(this.containerEl);
        const popupEl = this.containerEl.createDiv({ cls: "systemsculpt-popup" });
        const content = popupEl.createDiv({ cls: "systemsculpt-popup-content" });
        if (this.options.title) {
          const titleEl = content.createDiv({ cls: "systemsculpt-popup-title" });
          if (this.options.icon) {
            const iconEl = titleEl.createSpan({ cls: "systemsculpt-popup-icon" });
            (0, import_obsidian4.setIcon)(iconEl, this.options.icon);
          }
          titleEl.createSpan({ text: this.options.title });
        }
        if (this.message) {
          content.createDiv({
            cls: "systemsculpt-popup-message",
            text: this.message
          });
        }
        if (this.options.description) {
          content.createDiv({
            cls: "systemsculpt-popup-description",
            text: this.options.description
          });
        }
        if (this.options.inputs) {
          const inputsContainer = content.createDiv({
            cls: "systemsculpt-popup-inputs"
          });
          this.options.inputs.forEach((input) => {
            if (input.type === "textarea") {
              inputsContainer.createEl("textarea", {
                cls: `systemsculpt-popup-textarea ${input.className || ""}`,
                placeholder: input.placeholder,
                value: input.value || "",
                attr: {
                  required: input.required ? true : null
                }
              });
            } else {
              inputsContainer.createEl("input", {
                type: input.type,
                cls: `systemsculpt-popup-input ${input.className || ""}`,
                placeholder: input.placeholder,
                value: input.value || "",
                attr: {
                  required: input.required ? true : null
                }
              });
            }
          });
        }
        const buttonContainer = popupEl.createDiv({
          cls: "systemsculpt-popup-buttons"
        });
        if (this.options.secondaryButton) {
          const secondaryButton = buttonContainer.createEl("button", {
            cls: "systemsculpt-popup-button systemsculpt-popup-button-secondary",
            text: this.options.secondaryButton
          });
          secondaryButton.addEventListener("click", () => {
            this.result = { confirmed: false };
            this.close();
          });
        }
        const primaryButton = buttonContainer.createEl("button", {
          cls: `systemsculpt-popup-button ${this.options.primaryButton === "Become A Patron" || this.options.primaryButton === "Become a Patron" ? "systemsculpt-popup-button-patron" : "systemsculpt-popup-button-primary"}`,
          text: this.options.primaryButton || "OK"
        });
        primaryButton.addEventListener("click", () => {
          if (this.options.inputs) {
            const inputs = Array.from(popupEl.querySelectorAll("input, textarea"));
            const hasEmptyRequired = inputs.some((input) => input.required && !input.value.trim());
            if (hasEmptyRequired) {
              return;
            }
            this.result = {
              confirmed: true,
              inputs: inputs.map((input) => input.value)
            };
          } else {
            this.result = { confirmed: true };
          }
          this.close();
        });
        this.containerEl.addEventListener("keydown", (e) => {
          if (e.key === "Escape") {
            this.result = { confirmed: false };
            this.close();
          }
          if (e.key === "Enter" && !e.isComposing && !e.shiftKey) {
            primaryButton.click();
          }
        });
        this.containerEl.addEventListener("mousedown", (e) => {
          if (e.target === this.containerEl) {
            this.result = { confirmed: false };
            this.close();
          }
        });
      }
      close() {
        this.containerEl.addClass("systemsculpt-popup-closing");
        setTimeout(() => {
          this.containerEl.remove();
          if (this.resolvePromise) {
            this.resolvePromise(this.result);
          }
        }, 200);
      }
      open() {
        return new Promise((resolve) => {
          this.resolvePromise = resolve;
          this.createPopup();
        });
      }
    };
  }
});

// src/core/ui/components/Notice.ts
function showEnhancedNotice(message, type, error) {
  if (error) {
    console.error("Notice error details:", {
      error,
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : void 0,
      metadata: error instanceof SystemSculptError ? error.metadata : void 0
    });
  }
  let duration;
  switch (type) {
    case "error":
      duration = 1e4;
      break;
    case "warning":
      duration = 5e3;
      break;
    default:
      duration = 3e3;
  }
  const notice = new import_obsidian5.Notice(message, duration);
  return notice;
}
var import_obsidian5;
var init_Notice = __esm({
  "src/core/ui/components/Notice.ts"() {
    import_obsidian5 = __toModule(require("obsidian"));
    init_errors();
  }
});

// src/core/ui/notifications.ts
function showNotice(message, options = {}) {
  const { type = "info", duration = 4e3 } = options;
  let prefix = "";
  switch (type) {
    case "success":
      prefix = "\u2728 ";
      break;
    case "error":
      prefix = "\u274C ";
      break;
    case "warning":
      prefix = "\u26A0\uFE0F ";
      break;
    case "info":
      prefix = "\u2139\uFE0F ";
      break;
  }
  new import_obsidian6.Notice(prefix + message, duration);
}
async function showAlert(app, message, options = {}) {
  const {
    title = options.type === "error" ? "Error" : options.type === "warning" ? "Warning" : "Alert",
    primaryButton = "OK",
    secondaryButton,
    icon = options.type === "error" ? "alert-circle" : options.type === "warning" ? "alert-triangle" : "info"
  } = options;
  const result = await showPopup(app, message, {
    title,
    primaryButton,
    secondaryButton,
    icon
  });
  return { confirmed: (result == null ? void 0 : result.confirmed) || false };
}
var import_obsidian6;
var init_notifications = __esm({
  "src/core/ui/notifications.ts"() {
    import_obsidian6 = __toModule(require("obsidian"));
    init_PopupModal();
  }
});

// src/core/ui/index.ts
var init_ui = __esm({
  "src/core/ui/index.ts"() {
    init_LoadingIndicator();
    init_Button();
    init_TextAreaModal();
    init_PopupModal();
    init_Notice();
    init_notifications();
  }
});

// src/components/FileSuggester.ts
function getFileSuggestions(app, directory) {
  const files = app.vault.getAllLoadedFiles().filter((file) => {
    var _a;
    if (!(file instanceof import_obsidian10.TFile))
      return false;
    const fileDir = (_a = file.parent) == null ? void 0 : _a.path;
    return fileDir === directory && file.extension === "md";
  });
  return new Set(files.map((file) => file.path));
}
function attachFileSuggester(inputEl, onSelect, app, directory) {
  return new FileSuggester(inputEl, onSelect, app, directory);
}
var import_obsidian10, FileSuggester;
var init_FileSuggester = __esm({
  "src/components/FileSuggester.ts"() {
    import_obsidian10 = __toModule(require("obsidian"));
    FileSuggester = class extends import_obsidian10.AbstractInputSuggest {
      constructor(inputEl, onSelectCb, app, directory) {
        super(app, inputEl);
        this.inputEl = inputEl;
        this.onSelectCb = onSelectCb;
        this.directory = directory;
        this.content = getFileSuggestions(app, directory);
      }
      getSuggestions(inputStr) {
        const lowerCaseInputStr = inputStr.toLowerCase();
        return [...this.content].filter((content) => content.toLowerCase().includes(lowerCaseInputStr));
      }
      renderSuggestion(content, el) {
        let display = content.replace(/\.md$/, "");
        el.setText(display);
      }
      selectSuggestion(content, evt) {
        this.onSelectCb(content);
        this.inputEl.value = content.replace(/\.md$/, "");
        this.inputEl.blur();
        this.close();
      }
    };
  }
});

// src/modals/TitleGenerationPromptModal.ts
var TitleGenerationPromptModal_exports = {};
__export(TitleGenerationPromptModal_exports, {
  TitleGenerationPromptModal: () => TitleGenerationPromptModal,
  showTitleGenerationPromptModal: () => showTitleGenerationPromptModal
});
async function showTitleGenerationPromptModal(app, plugin, currentPrompt, options) {
  const modal = new TitleGenerationPromptModal(app, plugin, currentPrompt, options == null ? void 0 : options.systemPromptsDirectory, options == null ? void 0 : options.currentCustomPath);
  return await modal.openAndGetValue();
}
var import_obsidian12, TitleGenerationPromptModal;
var init_TitleGenerationPromptModal = __esm({
  "src/modals/TitleGenerationPromptModal.ts"() {
    import_obsidian12 = __toModule(require("obsidian"));
    init_ui();
    init_FileSuggester();
    init_SystemSculptService();
    TitleGenerationPromptModal = class extends import_obsidian12.Modal {
      constructor(app, plugin, currentPrompt, systemPromptsDirectory = "SystemSculpt/System Prompts", currentCustomPath) {
        super(app);
        this.plugin = plugin;
        this.currentPrompt = currentPrompt;
        this.systemPromptsDirectory = systemPromptsDirectory;
        this.currentCustomPath = currentCustomPath;
        this.result = null;
        this.activePreset = "precise";
        this.prompts = [];
        this.modalEl.addClass("systemsculpt-modal", "systemsculpt-textarea-modal");
        this.sculptService = SystemSculptService.getInstance(plugin.settings, app);
      }
      showLoading(show) {
        if (!this.loadingIndicator || !this.contentContainer)
          return;
        this.loadingIndicator.style.display = show ? "flex" : "none";
        this.contentContainer.style.display = show ? "none" : "block";
      }
      async loadPrompts() {
        try {
          this.showLoading(true);
          const response = await fetch(`${this.sculptService.baseUrl}/api/v1/title-generation-prompts`);
          if (!response.ok) {
            throw new Error("Failed to load prompts");
          }
          const data = await response.json();
          this.prompts = data.data.prompts;
          this.createPresetButtons();
          this.showLoading(false);
        } catch (error) {
          console.error("Failed to load title generation prompts:", error);
          this.showLoading(false);
          await showPopup(this.app, "", {
            title: "Error",
            description: "Failed to load prompts. Please try again later.",
            primaryButton: "OK"
          });
        }
      }
      createPresetButtons() {
        if (!this.presetButtonContainer)
          return;
        this.presetButtonContainer.empty();
        if (this.currentCustomPath) {
          this.activePreset = "custom";
        } else {
          this.prompts.forEach((preset) => {
            if (preset.systemPrompt === this.currentPrompt) {
              this.activePreset = preset.id;
            }
          });
        }
        this.prompts.forEach((preset) => {
          const button = this.presetButtonContainer.createEl("button", {
            text: preset.label,
            cls: "systemsculpt-preset-button"
          });
          if (preset.description) {
            button.setAttribute("aria-label", preset.description);
            button.addClass("has-tooltip");
          }
          if (preset.id === this.activePreset) {
            button.addClass("active");
            if (this.textArea) {
              this.textArea.value = preset.systemPrompt;
              this.textArea.readOnly = !preset.isUserConfigurable;
            }
          }
          button.onclick = () => {
            this.presetButtonContainer.querySelectorAll(".systemsculpt-preset-button").forEach((btn) => btn.removeClass("active"));
            button.addClass("active");
            this.activePreset = preset.id;
            if (preset.id === "custom") {
              this.customSection.style.display = "block";
              this.customInput.focus();
              if (this.textArea) {
                this.textArea.readOnly = false;
              }
            } else {
              this.customSection.style.display = "none";
              if (this.textArea) {
                this.textArea.value = preset.systemPrompt;
                this.textArea.readOnly = !preset.isUserConfigurable;
              }
            }
          };
        });
        if (this.activePreset === "custom") {
          this.customSection.style.display = "block";
          if (this.currentCustomPath) {
            this.customInput.value = this.currentCustomPath;
          }
        }
      }
      async onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass("systemsculpt-modal-content");
        this.titleEl.setText("Edit Title Generation Prompt");
        this.titleEl.addClass("systemsculpt-modal-title");
        const descriptionEl = this.titleEl.createDiv();
        descriptionEl.addClass("systemsculpt-modal-description");
        descriptionEl.setText("Configure how titles should be generated from your content");
        descriptionEl.style.color = "var(--text-muted)";
        descriptionEl.style.fontSize = "0.9em";
        descriptionEl.style.marginTop = "0.2em";
        this.loadingIndicator = contentEl.createDiv("systemsculpt-loading");
        this.loadingIndicator.style.display = "none";
        this.loadingIndicator.style.justifyContent = "center";
        this.loadingIndicator.style.alignItems = "center";
        this.loadingIndicator.style.padding = "20px";
        const loadingText = this.loadingIndicator.createSpan();
        loadingText.setText("Loading prompts...");
        this.contentContainer = contentEl.createDiv("systemsculpt-content-container");
        const textAreaContainer = this.contentContainer.createDiv("systemsculpt-textarea-container");
        this.presetButtonContainer = textAreaContainer.createDiv("systemsculpt-preset-button-container");
        this.customSection = textAreaContainer.createDiv("systemsculpt-custom-section");
        this.customSection.style.display = "none";
        const customInputContainer = this.customSection.createDiv("systemsculpt-custom-input-container");
        const inputWrapper = customInputContainer.createDiv("systemsculpt-input-wrapper");
        inputWrapper.style.display = "flex";
        inputWrapper.style.gap = "8px";
        inputWrapper.style.alignItems = "center";
        this.customInput = inputWrapper.createEl("input", {
          type: "text",
          placeholder: "Search for a system prompt file...",
          cls: "systemsculpt-custom-input"
        });
        const createButton2 = inputWrapper.createEl("button", {
          cls: "systemsculpt-create-button"
        });
        createButton2.style.padding = "4px 8px";
        createButton2.style.borderRadius = "4px";
        createButton2.style.cursor = "pointer";
        (0, import_obsidian12.setIcon)(createButton2, "plus");
        createButton2.addEventListener("click", async () => {
          var _a, _b;
          let templateContent = "";
          try {
            const response = await fetch(`${this.sculptService.baseUrl}/api/v1/system-prompts/template`);
            if (!response.ok) {
              throw new Error("Failed to fetch template");
            }
            const data = await response.json();
            templateContent = data.template;
          } catch (error) {
            console.error("Error fetching system prompt template:", error);
            await showPopup(this.app, "", {
              title: "Error",
              description: "Failed to fetch system prompt template. Please try again later.",
              primaryButton: "OK"
            });
            return;
          }
          const result = await showPopup(this.app, "", {
            title: "Create New System Prompt",
            description: "Enter a title and content for your new system prompt. The title will be used to create a markdown file that you can customize later.",
            primaryButton: "Create",
            secondaryButton: "Cancel",
            inputs: [
              {
                type: "text",
                placeholder: "My Custom Title Generator",
                required: true,
                className: "systemsculpt-prompt-creation-title-input"
              },
              {
                type: "textarea",
                value: templateContent,
                required: true,
                className: "systemsculpt-prompt-creation-content"
              }
            ]
          });
          if (!(result == null ? void 0 : result.confirmed) || !((_a = result.inputs) == null ? void 0 : _a[0]) || !((_b = result.inputs) == null ? void 0 : _b[1])) {
            return;
          }
          const [title, content] = result.inputs;
          const fileName = title.replace(/[^a-zA-Z0-9-_ ]/g, "").replace(/ /g, "-");
          const filePath = `${this.systemPromptsDirectory}/${fileName}`;
          try {
            await this.app.vault.createFolder(this.systemPromptsDirectory).catch(() => {
            });
            const fileContent = `# ${title}

${content}`;
            const file = await this.app.vault.create(filePath + ".md", fileContent);
            if (!file) {
              throw new Error("Failed to create file");
            }
            if (this.textArea) {
              this.textArea.value = fileContent;
              this.textArea.readOnly = false;
            }
            this.customInput.value = filePath;
            await showPopup(this.app, "", {
              title: "Success",
              description: "System prompt file created successfully!",
              primaryButton: "OK"
            });
          } catch (error) {
            console.error("Error creating system prompt file:", error);
            await showPopup(this.app, "", {
              title: "Error",
              description: error instanceof Error ? error.message : "Failed to create system prompt file",
              primaryButton: "OK"
            });
          }
        });
        attachFileSuggester(this.customInput, async (selectedPath) => {
          try {
            const file = this.app.vault.getAbstractFileByPath(selectedPath);
            if (file instanceof import_obsidian12.TFile) {
              const content = await this.app.vault.read(file);
              this.textArea.value = content;
              this.textArea.readOnly = false;
              this.customInput.value = selectedPath.replace(/\.md$/, "");
            }
          } catch (error) {
            console.error("Error reading system prompt file:", error);
          }
        }, this.app, this.systemPromptsDirectory);
        this.textArea = textAreaContainer.createEl("textarea", {
          cls: "systemsculpt-textarea",
          attr: {
            placeholder: "Enter title generation prompt"
          }
        });
        this.textArea.value = this.currentPrompt;
        const resizeObserver = new ResizeObserver(() => {
          this.textArea.style.height = "auto";
          this.textArea.style.height = this.textArea.scrollHeight + "px";
        });
        resizeObserver.observe(this.textArea);
        const buttonContainer = this.contentContainer.createDiv("systemsculpt-button-container");
        const secondaryButton = buttonContainer.createEl("button", {
          text: "Cancel",
          cls: "systemsculpt-button"
        });
        const handleCancel = () => {
          this.result = null;
          this.close();
        };
        secondaryButton.onclick = handleCancel;
        const primaryButton = buttonContainer.createEl("button", {
          text: "Save",
          cls: "systemsculpt-button mod-cta"
        });
        const handleSave = () => {
          const activePreset = this.prompts.find((p) => p.id === this.activePreset);
          this.result = {
            content: this.textArea.value,
            type: (activePreset == null ? void 0 : activePreset.id) || "custom",
            path: this.activePreset === "custom" ? this.customInput.value : void 0
          };
          this.close();
        };
        primaryButton.onclick = handleSave;
        this.modalEl.addEventListener("keydown", (e) => {
          if (e.key === "Enter" && !e.isComposing && !e.shiftKey && e.target !== this.textArea) {
            e.preventDefault();
            handleSave();
          } else if (e.key === "Escape") {
            e.preventDefault();
            handleCancel();
          }
        });
        this.textArea.focus();
        this.textArea.setSelectionRange(this.textArea.value.length, this.textArea.value.length);
        await this.loadPrompts();
      }
      onClose() {
        const { contentEl } = this;
        contentEl.empty();
        if (this.resolvePromise !== void 0 && this.resolvePromise !== null) {
          this.resolvePromise(this.result);
        }
      }
      async openAndGetValue() {
        return new Promise((resolve) => {
          this.resolvePromise = resolve;
          this.open();
        });
      }
    };
  }
});

// src/modals/PostProcessingPromptModal.ts
var PostProcessingPromptModal_exports = {};
__export(PostProcessingPromptModal_exports, {
  PostProcessingPromptModal: () => PostProcessingPromptModal,
  showPostProcessingPromptModal: () => showPostProcessingPromptModal
});
async function showPostProcessingPromptModal(app, plugin, currentPrompt, options) {
  const modal = new PostProcessingPromptModal(app, plugin, currentPrompt, options == null ? void 0 : options.systemPromptsDirectory, options == null ? void 0 : options.currentCustomPath);
  return await modal.openAndGetValue();
}
var import_obsidian13, PostProcessingPromptModal;
var init_PostProcessingPromptModal = __esm({
  "src/modals/PostProcessingPromptModal.ts"() {
    import_obsidian13 = __toModule(require("obsidian"));
    init_ui();
    init_FileSuggester();
    init_SystemSculptService();
    PostProcessingPromptModal = class extends import_obsidian13.Modal {
      constructor(app, plugin, currentPrompt, systemPromptsDirectory = "SystemSculpt/System Prompts", currentCustomPath) {
        super(app);
        this.plugin = plugin;
        this.currentPrompt = currentPrompt;
        this.systemPromptsDirectory = systemPromptsDirectory;
        this.currentCustomPath = currentCustomPath;
        this.result = null;
        this.activePreset = "general";
        this.prompts = [];
        this.modalEl.addClass("systemsculpt-modal", "systemsculpt-textarea-modal");
        this.sculptService = SystemSculptService.getInstance(plugin.settings, app);
      }
      showLoading(show) {
        if (!this.loadingIndicator || !this.contentContainer)
          return;
        this.loadingIndicator.style.display = show ? "flex" : "none";
        this.contentContainer.style.display = show ? "none" : "block";
      }
      async loadPrompts() {
        try {
          this.showLoading(true);
          const response = await fetch(`${this.sculptService.baseUrl}/api/v1/post-transcription-prompts`);
          if (!response.ok) {
            throw new Error("Failed to load prompts");
          }
          const data = await response.json();
          this.prompts = data.data.prompts;
          this.createPresetButtons();
          this.showLoading(false);
        } catch (error) {
          console.error("Failed to load post-transcription prompts:", error);
          this.showLoading(false);
          await showPopup(this.app, "", {
            title: "Error",
            description: "Failed to load prompts. Please try again later.",
            primaryButton: "OK"
          });
        }
      }
      createPresetButtons() {
        if (!this.presetButtonContainer)
          return;
        this.presetButtonContainer.empty();
        if (this.currentCustomPath) {
          this.activePreset = "custom";
        } else {
          this.prompts.forEach((preset) => {
            if (preset.systemPrompt === this.currentPrompt) {
              this.activePreset = preset.id;
            }
          });
        }
        this.prompts.forEach((preset) => {
          const button = this.presetButtonContainer.createEl("button", {
            text: preset.label,
            cls: "systemsculpt-preset-button"
          });
          if (preset.description) {
            button.setAttribute("aria-label", preset.description);
            button.addClass("has-tooltip");
          }
          if (preset.id === this.activePreset) {
            button.addClass("active");
            if (this.textArea) {
              this.textArea.value = preset.systemPrompt;
              this.textArea.readOnly = !preset.isUserConfigurable;
            }
          }
          button.onclick = () => {
            this.presetButtonContainer.querySelectorAll(".systemsculpt-preset-button").forEach((btn) => btn.removeClass("active"));
            button.addClass("active");
            this.activePreset = preset.id;
            if (preset.id === "custom") {
              this.customSection.style.display = "block";
              this.customInput.focus();
              if (this.textArea) {
                this.textArea.readOnly = false;
              }
            } else {
              this.customSection.style.display = "none";
              if (this.textArea) {
                this.textArea.value = preset.systemPrompt;
                this.textArea.readOnly = !preset.isUserConfigurable;
              }
            }
          };
        });
        if (this.activePreset === "custom") {
          this.customSection.style.display = "block";
          if (this.currentCustomPath) {
            this.customInput.value = this.currentCustomPath;
          }
        }
      }
      async onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass("systemsculpt-modal-content");
        this.titleEl.setText("Edit Post-Processing Prompt");
        this.titleEl.addClass("systemsculpt-modal-title");
        const descriptionEl = this.titleEl.createDiv();
        descriptionEl.addClass("systemsculpt-modal-description");
        descriptionEl.setText("Configure how your transcriptions should be post-processed");
        descriptionEl.style.color = "var(--text-muted)";
        descriptionEl.style.fontSize = "0.9em";
        descriptionEl.style.marginTop = "0.2em";
        this.loadingIndicator = contentEl.createDiv("systemsculpt-loading");
        this.loadingIndicator.style.display = "none";
        this.loadingIndicator.style.justifyContent = "center";
        this.loadingIndicator.style.alignItems = "center";
        this.loadingIndicator.style.padding = "20px";
        const loadingText = this.loadingIndicator.createSpan();
        loadingText.setText("Loading prompts...");
        this.contentContainer = contentEl.createDiv("systemsculpt-content-container");
        const textAreaContainer = this.contentContainer.createDiv("systemsculpt-textarea-container");
        this.presetButtonContainer = textAreaContainer.createDiv("systemsculpt-preset-button-container");
        this.customSection = textAreaContainer.createDiv("systemsculpt-custom-section");
        this.customSection.style.display = "none";
        const customInputContainer = this.customSection.createDiv("systemsculpt-custom-input-container");
        const inputWrapper = customInputContainer.createDiv("systemsculpt-input-wrapper");
        inputWrapper.style.display = "flex";
        inputWrapper.style.gap = "8px";
        inputWrapper.style.alignItems = "center";
        this.customInput = inputWrapper.createEl("input", {
          type: "text",
          placeholder: "Search for a system prompt file...",
          cls: "systemsculpt-custom-input"
        });
        const createButton2 = inputWrapper.createEl("button", {
          cls: "systemsculpt-create-button"
        });
        createButton2.style.padding = "4px 8px";
        createButton2.style.borderRadius = "4px";
        createButton2.style.cursor = "pointer";
        (0, import_obsidian13.setIcon)(createButton2, "plus");
        createButton2.addEventListener("click", async () => {
          var _a, _b;
          let templateContent = "";
          try {
            const response = await fetch(`${this.sculptService.baseUrl}/api/v1/system-prompts/template`);
            if (!response.ok) {
              throw new Error("Failed to fetch template");
            }
            const data = await response.json();
            templateContent = data.template;
          } catch (error) {
            console.error("Error fetching system prompt template:", error);
            await showPopup(this.app, "", {
              title: "Error",
              description: "Failed to fetch system prompt template. Please try again later.",
              primaryButton: "OK"
            });
            return;
          }
          const result = await showPopup(this.app, "", {
            title: "Create New System Prompt",
            description: "Enter a title and content for your new system prompt. The title will be used to create a markdown file that you can customize later.",
            primaryButton: "Create",
            secondaryButton: "Cancel",
            inputs: [
              {
                type: "text",
                placeholder: "My Custom Assistant",
                required: true,
                className: "systemsculpt-prompt-creation-title-input"
              },
              {
                type: "textarea",
                value: templateContent,
                required: true,
                className: "systemsculpt-prompt-creation-content"
              }
            ]
          });
          if (!(result == null ? void 0 : result.confirmed) || !((_a = result.inputs) == null ? void 0 : _a[0]) || !((_b = result.inputs) == null ? void 0 : _b[1])) {
            return;
          }
          const [title, content] = result.inputs;
          const fileName = title.replace(/[^a-zA-Z0-9-_ ]/g, "").replace(/ /g, "-");
          const filePath = `${this.systemPromptsDirectory}/${fileName}`;
          try {
            await this.app.vault.createFolder(this.systemPromptsDirectory).catch(() => {
            });
            const fileContent = `# ${title}

${content}`;
            const file = await this.app.vault.create(filePath + ".md", fileContent);
            if (!file) {
              throw new Error("Failed to create file");
            }
            if (this.textArea) {
              this.textArea.value = fileContent;
              this.textArea.readOnly = false;
            }
            this.customInput.value = filePath;
            await showPopup(this.app, "", {
              title: "Success",
              description: "System prompt file created successfully!",
              primaryButton: "OK"
            });
          } catch (error) {
            console.error("Error creating system prompt file:", error);
            await showPopup(this.app, "", {
              title: "Error",
              description: error instanceof Error ? error.message : "Failed to create system prompt file",
              primaryButton: "OK"
            });
          }
        });
        attachFileSuggester(this.customInput, async (selectedPath) => {
          try {
            const file = this.app.vault.getAbstractFileByPath(selectedPath);
            if (file instanceof import_obsidian13.TFile) {
              const content = await this.app.vault.read(file);
              this.textArea.value = content;
              this.textArea.readOnly = false;
              this.customInput.value = selectedPath.replace(/\.md$/, "");
            }
          } catch (error) {
            console.error("Error reading system prompt file:", error);
          }
        }, this.app, this.systemPromptsDirectory);
        this.textArea = textAreaContainer.createEl("textarea", {
          cls: "systemsculpt-textarea",
          attr: {
            placeholder: "Enter post-processing prompt"
          }
        });
        this.textArea.value = this.currentPrompt;
        const resizeObserver = new ResizeObserver(() => {
          this.textArea.style.height = "auto";
          this.textArea.style.height = this.textArea.scrollHeight + "px";
        });
        resizeObserver.observe(this.textArea);
        const buttonContainer = this.contentContainer.createDiv("systemsculpt-button-container");
        const secondaryButton = buttonContainer.createEl("button", {
          text: "Cancel",
          cls: "systemsculpt-button"
        });
        const handleCancel = () => {
          this.result = null;
          this.close();
        };
        secondaryButton.onclick = handleCancel;
        const primaryButton = buttonContainer.createEl("button", {
          text: "Save",
          cls: "systemsculpt-button mod-cta"
        });
        const handleSave = () => {
          const activePreset = this.prompts.find((p) => p.id === this.activePreset);
          this.result = {
            content: this.textArea.value,
            type: (activePreset == null ? void 0 : activePreset.id) || "custom",
            path: this.activePreset === "custom" ? this.customInput.value : void 0
          };
          this.close();
        };
        primaryButton.onclick = handleSave;
        this.modalEl.addEventListener("keydown", (e) => {
          if (e.key === "Enter" && !e.isComposing && !e.shiftKey && e.target !== this.textArea) {
            e.preventDefault();
            handleSave();
          } else if (e.key === "Escape") {
            e.preventDefault();
            handleCancel();
          }
        });
        this.textArea.focus();
        this.textArea.setSelectionRange(this.textArea.value.length, this.textArea.value.length);
        await this.loadPrompts();
      }
      onClose() {
        const { contentEl } = this;
        contentEl.empty();
        if (this.resolvePromise !== void 0 && this.resolvePromise !== null) {
          this.resolvePromise(this.result);
        }
      }
      async openAndGetValue() {
        return new Promise((resolve) => {
          this.resolvePromise = resolve;
          this.open();
        });
      }
    };
  }
});

// src/modals/TitleGenerationModal.ts
var TitleGenerationModal_exports = {};
__export(TitleGenerationModal_exports, {
  TitleGenerationModal: () => TitleGenerationModal,
  showTitleGenerationModal: () => showTitleGenerationModal
});
async function showTitleGenerationModal(app, plugin, initialValue, content) {
  const modal = new TitleGenerationModal(app, plugin, initialValue, content);
  return await modal.openAndGetValue();
}
var import_obsidian27, TitleGenerationModal;
var init_TitleGenerationModal = __esm({
  "src/modals/TitleGenerationModal.ts"() {
    import_obsidian27 = __toModule(require("obsidian"));
    init_ui();
    init_TitleGenerationService();
    TitleGenerationModal = class extends import_obsidian27.Modal {
      constructor(app, plugin, initialValue, content) {
        super(app);
        this.plugin = plugin;
        this.initialValue = initialValue;
        this.content = content;
        this.result = null;
        this.isGenerating = false;
        this.modalEl.addClass("systemsculpt-modal");
        this.titleGenerationService = TitleGenerationService.getInstance(plugin);
      }
      async onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass("systemsculpt-modal-content");
        this.titleEl.setText("Change Chat Title");
        this.titleEl.addClass("systemsculpt-modal-title");
        const descriptionEl = this.titleEl.createDiv();
        descriptionEl.addClass("systemsculpt-modal-description");
        descriptionEl.setText("Enter a title manually or generate one based on your chat");
        this.contentContainer = contentEl.createDiv("systemsculpt-content-container");
        const titleContainer = this.contentContainer.createDiv();
        titleContainer.style.cssText = `
      margin: 16px 0;
      position: relative;
    `;
        this.titleInput = titleContainer.createEl("input", {
          cls: "systemsculpt-title-input",
          value: this.initialValue
        });
        this.titleInput.style.cssText = `
      width: 100%;
      padding: 12px 16px;
      border-radius: 8px;
      background: var(--background-secondary);
      border: 1px solid var(--background-modifier-border);
      font-size: 1.1em;
      font-weight: 500;
      color: var(--text-normal);
      transition: all 0.2s ease;
    `;
        this.titleInput.addEventListener("mouseover", () => {
          if (!this.isGenerating) {
            this.titleInput.style.borderColor = "var(--background-modifier-border-hover)";
          }
        });
        this.titleInput.addEventListener("mouseout", () => {
          if (!this.isGenerating) {
            this.titleInput.style.borderColor = "var(--background-modifier-border)";
          }
        });
        this.titleInput.addEventListener("focus", () => {
          if (!this.isGenerating) {
            this.titleInput.style.borderColor = "var(--interactive-accent)";
            this.titleInput.style.boxShadow = "0 0 0 2px var(--background-modifier-border-hover)";
          }
        });
        this.titleInput.addEventListener("blur", () => {
          if (!this.isGenerating) {
            this.titleInput.style.borderColor = "var(--background-modifier-border)";
            this.titleInput.style.boxShadow = "none";
          }
        });
        const buttonContainer = this.contentContainer.createDiv("systemsculpt-button-container");
        buttonContainer.style.marginTop = "20px";
        this.generateButton = buttonContainer.createEl("button", {
          cls: "systemsculpt-button mod-cta"
        });
        this.updateGenerateButton();
        this.generateButton.onclick = async () => {
          if (this.isGenerating) {
            return;
          }
          await this.generateTitle();
        };
        const secondaryButtonContainer = buttonContainer.createDiv();
        secondaryButtonContainer.style.display = "flex";
        secondaryButtonContainer.style.gap = "8px";
        const cancelButton = secondaryButtonContainer.createEl("button", {
          text: "Cancel",
          cls: "systemsculpt-button"
        });
        cancelButton.onclick = () => {
          this.result = null;
          this.close();
        };
        const saveButton = secondaryButtonContainer.createEl("button", {
          text: "Save",
          cls: "systemsculpt-button mod-cta"
        });
        saveButton.onclick = () => {
          this.result = this.titleInput.value;
          this.close();
        };
        this.modalEl.addEventListener("keydown", (e) => {
          if (e.key === "Enter" && !e.isComposing && !e.shiftKey) {
            e.preventDefault();
            if (e.metaKey || e.ctrlKey) {
              if (!this.isGenerating) {
                this.generateTitle();
              }
            } else {
              this.result = this.titleInput.value;
              this.close();
            }
          } else if (e.key === "Escape") {
            e.preventDefault();
            this.result = null;
            this.close();
          }
        });
        this.titleInput.focus();
        this.titleInput.select();
      }
      updateGenerateButton() {
        this.generateButton.empty();
        const buttonContent = this.generateButton.createDiv();
        buttonContent.style.display = "flex";
        buttonContent.style.alignItems = "center";
        buttonContent.style.gap = "8px";
        if (this.isGenerating) {
          const loaderIcon = buttonContent.createDiv();
          (0, import_obsidian27.setIcon)(loaderIcon, "loader-2");
          loaderIcon.style.animation = "spin 1s linear infinite";
          buttonContent.createSpan({ text: "Generating..." });
          this.generateButton.setAttribute("disabled", "true");
          this.titleInput.setAttribute("disabled", "true");
          this.titleInput.style.opacity = "0.7";
        } else {
          (0, import_obsidian27.setIcon)(buttonContent, "wand-2");
          buttonContent.createSpan({ text: "Generate Title" });
          this.generateButton.removeAttribute("disabled");
          this.titleInput.removeAttribute("disabled");
          this.titleInput.style.opacity = "1";
        }
      }
      createProgressBar() {
        const progressContainer = this.contentContainer.createDiv("systemsculpt-progress-container");
        progressContainer.style.display = "none";
        progressContainer.style.marginTop = "12px";
        progressContainer.style.marginBottom = "12px";
        progressContainer.style.position = "relative";
        const progressBar = progressContainer.createDiv("systemsculpt-progress-bar");
        progressBar.style.height = "4px";
        progressBar.style.backgroundColor = "var(--interactive-accent)";
        progressBar.style.width = "0%";
        progressBar.style.transition = "width 0.5s ease";
        progressBar.style.borderRadius = "2px";
        const progressBg = progressContainer.createDiv("systemsculpt-progress-bg");
        progressBg.style.position = "absolute";
        progressBg.style.top = "0";
        progressBg.style.left = "0";
        progressBg.style.right = "0";
        progressBg.style.height = "4px";
        progressBg.style.backgroundColor = "var(--background-modifier-border)";
        progressBg.style.borderRadius = "2px";
        progressBg.style.zIndex = "-1";
        const progressText = progressContainer.createDiv("systemsculpt-progress-text");
        progressText.style.marginTop = "8px";
        progressText.style.fontSize = "0.9em";
        progressText.style.color = "var(--text-muted)";
        progressText.style.textAlign = "center";
        let isAnimating = true;
        return {
          progressContainer,
          progressBar,
          progressText,
          stop: () => {
            isAnimating = false;
          },
          isAnimating: () => isAnimating
        };
      }
      async startProgressAnimation(progress) {
        const stages = [
          { progress: 25, text: "Analyzing contents..." },
          { progress: 50, text: "Identifying categories..." },
          { progress: 75, text: "Sorting by importance..." },
          { progress: 90, text: "Choosing best of 5 titles..." }
        ];
        for (const stage of stages) {
          if (!progress.isAnimating())
            break;
          progress.progressBar.style.width = `${stage.progress}%`;
          progress.progressText.setText(stage.text);
          await new Promise((resolve) => setTimeout(resolve, 1e3));
        }
      }
      async generateTitle() {
        this.isGenerating = true;
        this.updateGenerateButton();
        const progress = this.createProgressBar();
        progress.progressContainer.style.display = "block";
        this.startProgressAnimation(progress);
        try {
          await this.titleGenerationService.generateTitle(this.content, (title) => {
            this.titleInput.value = title;
            progress.stop();
            progress.progressBar.style.width = "100%";
            progress.progressText.setText("Finalizing title...");
          });
        } catch (error) {
          console.error("Error generating title:", error);
          showEnhancedNotice("Failed to generate title", "error", error);
        } finally {
          this.isGenerating = false;
          this.updateGenerateButton();
          this.titleInput.focus();
          this.titleInput.select();
          progress.progressContainer.remove();
        }
      }
      onClose() {
        const { contentEl } = this;
        contentEl.empty();
        if (this.resolvePromise) {
          this.resolvePromise(this.result);
        }
      }
      async openAndGetValue() {
        return new Promise((resolve) => {
          this.resolvePromise = resolve;
          this.open();
        });
      }
    };
  }
});

// src/main.ts
__export(exports, {
  default: () => SystemSculptPlugin
});
var import_obsidian34 = __toModule(require("obsidian"));
init_SystemSculptService();

// src/modals/SettingsTab.ts
var import_obsidian14 = __toModule(require("obsidian"));
init_ui();

// src/types/llm.ts
var DEFAULT_FILTER_SETTINGS = {
  showVisionModels: false,
  showReasoningModels: false,
  showCreativeModels: false
};

// src/types.ts
var PATREON_URL = "https://www.patreon.com/systemsculpt/membership";
var DEFAULT_SETTINGS = {
  licenseKey: "",
  licenseValid: false,
  selectedModelId: "",
  chatsDirectory: "SystemSculpt/Chats",
  lastValidated: 0,
  systemPrompt: "You are a helpful AI assistant. You help users with their questions and tasks in a clear and concise way.",
  recordingsDirectory: "SystemSculpt/Recordings",
  developmentMode: false,
  preferredMicrophoneId: "",
  autoTranscribeRecordings: true,
  autoPasteTranscription: true,
  postProcessingPrompt: "You are a transcription post-processor. Your task is to fix any transcription errors, correct grammar and punctuation, and ensure the text is properly formatted. Keep the original meaning intact while making the text more readable.",
  postProcessingEnabled: false,
  showModelTooltips: false,
  showVisionModelsOnly: false,
  showTopPicksOnly: false,
  selectedProvider: "all",
  serverUrl: "http://localhost:3001",
  attachmentsDirectory: "SystemSculpt/Attachments",
  extractionsDirectory: "SystemSculpt/Extractions",
  systemPromptsDirectory: "SystemSculpt/System Prompts",
  tasksDirectory: "SystemSculpt/Tasks",
  moveCompletedTasksDown: true,
  systemPromptType: "general-use",
  systemPromptPath: "",
  titleGenerationPrompt: "You are a specialized title generation assistant focused on creating precise, meaningful titles.",
  titleGenerationPromptType: "precise",
  titleGenerationPromptPath: "",
  customProviders: [],
  modelFilterSettings: DEFAULT_FILTER_SETTINGS,
  favoriteModels: [],
  favoriteChats: [],
  activeProvider: {
    id: "systemsculpt",
    name: "SystemSculpt",
    type: "native"
  }
};

// src/modals/SettingsTab.ts
init_SystemSculptService();

// src/modals/ModelSelectionModal.ts
var import_obsidian8 = __toModule(require("obsidian"));

// src/services/SearchService.ts
var SearchService = class {
  constructor() {
    this.DEFAULT_INITIAL_RESULTS_LIMIT = 25;
    this.DEFAULT_MAX_FILTERED_RESULTS = 50;
  }
  search(items, query, getSearchableFields, options) {
    var _a, _b;
    const initialLimit = (_a = options == null ? void 0 : options.initialResultsLimit) != null ? _a : this.DEFAULT_INITIAL_RESULTS_LIMIT;
    const maxFiltered = (_b = options == null ? void 0 : options.maxFilteredResults) != null ? _b : this.DEFAULT_MAX_FILTERED_RESULTS;
    if (!query.trim()) {
      return items.slice(0, initialLimit).map((item) => ({
        item,
        matches: [],
        score: 0
      }));
    }
    const searchTerms = query.toLowerCase().split(/\s+/).filter(Boolean);
    const results = items.map((item) => {
      const fields = getSearchableFields(item);
      const matches = [];
      let totalScore = 0;
      const searchText = fields.map((f) => {
        var _a2;
        return ((_a2 = f.text) == null ? void 0 : _a2.toLowerCase()) || "";
      }).join(" ");
      const allTermsExist = searchTerms.every((term) => searchText.includes(term));
      if (!allTermsExist) {
        return { item, matches: [], score: 0 };
      }
      searchTerms.forEach((term) => {
        var _a2;
        let pos = 0;
        const termMatches = new Set();
        while ((pos = searchText.indexOf(term, pos)) !== -1) {
          let currentPos = 0;
          for (const field of fields) {
            const fieldText = ((_a2 = field.text) == null ? void 0 : _a2.toLowerCase()) || "";
            const fieldEnd = currentPos + fieldText.length;
            if (pos >= currentPos && pos < fieldEnd) {
              const relativePos = pos - currentPos;
              const quality = this.getMatchQuality(fieldText, term, relativePos);
              matches.push({
                field: field.field,
                text: field.text || "",
                indices: Array.from({ length: term.length }, (_, i) => relativePos + i),
                matchQuality: quality
              });
              totalScore += field.weight * quality;
              break;
            }
            currentPos = fieldEnd + 1;
          }
          pos += 1;
        }
      });
      if (searchTerms.length > 1 && matches.length > 0) {
        const positions = matches.flatMap((m) => m.indices[0]);
        const maxDistance = Math.max(...positions) - Math.min(...positions);
        if (maxDistance < 50) {
          totalScore *= 1.5;
        }
      }
      return {
        item,
        matches,
        score: totalScore
      };
    });
    return results.filter((result) => result.score > 0).sort((a, b) => b.score - a.score).slice(0, maxFiltered);
  }
  getMatchQuality(text, term, position) {
    const beforeChar = position > 0 ? text[position - 1] : " ";
    const afterChar = position + term.length < text.length ? text[position + term.length] : " ";
    if ((/\s/.test(beforeChar) || /\W/.test(beforeChar)) && (/\s/.test(afterChar) || /\W/.test(afterChar))) {
      return 1;
    }
    return 0.8;
  }
  highlightText(text, matches = [], searchQuery) {
    if (!matches || matches.length === 0 || !searchQuery) {
      const fragment2 = document.createDocumentFragment();
      fragment2.textContent = text;
      return fragment2;
    }
    const fragment = document.createDocumentFragment();
    const searchTerms = searchQuery.toLowerCase().trim().split(/\s+/).filter(Boolean);
    const regex = new RegExp(`(${searchTerms.map((term) => this.escapeRegExp(term)).join("|")})`, "gi");
    let lastIndex = 0;
    let match;
    while ((match = regex.exec(text)) !== null) {
      if (match.index > lastIndex) {
        fragment.appendChild(document.createTextNode(text.slice(lastIndex, match.index)));
      }
      const span = document.createElement("span");
      span.className = "systemsculpt-search-highlight";
      span.textContent = match[0];
      fragment.appendChild(span);
      lastIndex = match.index + match[0].length;
    }
    if (lastIndex < text.length) {
      fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
    }
    return fragment;
  }
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
};

// src/modals/ModelSelectionHelper.ts
var ModelSelectionHelper = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.logger = console;
    this.filterSettings = { ...this.plugin.settings.modelFilterSettings };
  }
  getFilterSettings() {
    return this.filterSettings;
  }
  async setFilterSetting(key, value) {
    this.filterSettings[key] = value;
    this.plugin.settings.modelFilterSettings = { ...this.filterSettings };
    await this.plugin.saveSettings();
  }
  async resetFilterSettings() {
    this.filterSettings = { ...DEFAULT_FILTER_SETTINGS };
    this.plugin.settings.modelFilterSettings = { ...this.filterSettings };
    await this.plugin.saveSettings();
  }
  formatPrice(price) {
    try {
      if (price === null || price === void 0 || price === "0") {
        return "Free";
      }
      const numericPrice = typeof price === "string" ? parseFloat(price) : price;
      if (isNaN(numericPrice) || numericPrice === 0) {
        return "Free";
      }
      const pricePerMillion = numericPrice * 1e6;
      return `$${pricePerMillion.toFixed(2)}`;
    } catch (error) {
      this.logger.error("ModelSelectionHelper: Error formatting price", {
        price,
        error
      });
      return "Price error";
    }
  }
  highlightText(text, matches = [], searchQuery) {
    if (!matches || matches.length === 0 || !searchQuery) {
      const fragment2 = document.createDocumentFragment();
      fragment2.textContent = text;
      return fragment2;
    }
    const fragment = document.createDocumentFragment();
    const normalizedQuery = searchQuery.toLowerCase().trim();
    const regex = new RegExp(`(${normalizedQuery})`, "gi");
    let lastIndex = 0;
    let match;
    while ((match = regex.exec(text)) !== null) {
      if (match.index > lastIndex) {
        const textNode = document.createTextNode(text.slice(lastIndex, match.index));
        fragment.appendChild(textNode);
      }
      const span = document.createElement("span");
      span.className = "systemsculpt-model-highlight";
      span.textContent = match[0];
      fragment.appendChild(span);
      lastIndex = match.index + match[0].length;
    }
    if (lastIndex < text.length) {
      const textNode = document.createTextNode(text.slice(lastIndex));
      fragment.appendChild(textNode);
    }
    return fragment;
  }
  sortModels(models) {
    const tiers = {
      favorites: [],
      essential: [],
      advanced: [],
      professional: [],
      custom: []
    };
    models.forEach((model) => {
      if (model.isFavorite) {
        tiers.favorites.push(model);
        return;
      }
      if (model.provider === "custom") {
        tiers.custom.push(model);
      } else {
      }
    });
    Object.values(tiers).forEach((tierModels) => {
      tierModels.sort((a, b) => a.name.localeCompare(b.name));
    });
    const sortedModels = [];
    if (tiers.favorites.length > 0) {
      sortedModels.push(...tiers.favorites);
    }
    sortedModels.push(...tiers.essential);
    sortedModels.push(...tiers.advanced);
    sortedModels.push(...tiers.professional);
    sortedModels.push(...tiers.custom);
    return sortedModels;
  }
  filterModels(models) {
    try {
      return models.filter((model) => {
        var _a, _b, _c;
        try {
          const hasVisionCapability = ((_a = model.capabilities) == null ? void 0 : _a.includes("vision")) || false;
          const hasReasoningCapability = ((_b = model.capabilities) == null ? void 0 : _b.includes("reasoning")) || false;
          const hasCreativeCapability = ((_c = model.capabilities) == null ? void 0 : _c.includes("creative")) || false;
          if (!Object.values(this.filterSettings).some((value) => value)) {
            return true;
          }
          return (!this.filterSettings.showVisionModels || hasVisionCapability) && (!this.filterSettings.showReasoningModels || hasReasoningCapability) && (!this.filterSettings.showCreativeModels || hasCreativeCapability);
        } catch (error) {
          this.logger.error("ModelSelectionHelper: Error filtering individual model", {
            model,
            error
          });
          return false;
        }
      });
    } catch (error) {
      this.logger.error("ModelSelectionHelper: Error in filterModels", error);
      return models;
    }
  }
};

// src/modals/CustomProviderModal.ts
var import_obsidian7 = __toModule(require("obsidian"));
var CustomProviderManagerModal = class extends import_obsidian7.Modal {
  constructor(app, plugin, onBack) {
    super(app);
    this.plugin = plugin;
    this.logger = console;
    this.onBack = onBack;
  }
  renderProviderCard(provider, container) {
    const card = container.createDiv("systemsculpt-custom-provider-card");
    const header = card.createDiv("systemsculpt-custom-provider-card-header");
    header.createEl("h3", {
      text: provider.name,
      cls: "systemsculpt-custom-provider-card-name"
    });
    const actions = header.createDiv("systemsculpt-custom-provider-card-actions");
    const deleteBtn = actions.createEl("button", {
      cls: "systemsculpt-custom-provider-card-action delete"
    });
    (0, import_obsidian7.setIcon)(deleteBtn, "trash-2");
    deleteBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      this.plugin.settings.customProviders = this.plugin.settings.customProviders.filter((p) => p.id !== provider.id);
      await this.plugin.saveSettings();
      await this.plugin.modelService.getModels();
      this.renderProviderList();
    });
    const details = card.createDiv("systemsculpt-custom-provider-card-details");
    const typeDetail = details.createDiv("systemsculpt-custom-provider-card-detail");
    (0, import_obsidian7.setIcon)(typeDetail.createSpan(), "box");
    typeDetail.createSpan({
      text: "OpenAI Compatible"
    });
    const endpointDetail = details.createDiv("systemsculpt-custom-provider-card-detail");
    (0, import_obsidian7.setIcon)(endpointDetail.createSpan(), "link");
    endpointDetail.createSpan({ text: provider.endpoint });
    const statusDetail = details.createDiv("systemsculpt-custom-provider-card-detail");
    const toggleContainer = statusDetail.createDiv({
      cls: "systemsculpt-custom-provider-toggle-container"
    });
    toggleContainer.createSpan({
      text: provider.isEnabled ? "Enabled" : "Disabled",
      cls: "systemsculpt-custom-provider-toggle-label"
    });
    const toggle = toggleContainer.createDiv({
      cls: `checkbox-container ${provider.isEnabled ? "is-enabled" : ""}`
    });
    toggle.createDiv({ cls: "checkbox-toggle" });
    toggle.addEventListener("click", async (e) => {
      e.stopPropagation();
      if (provider.isEnabled) {
        provider.isEnabled = false;
        await this.plugin.saveSettings();
        await this.plugin.modelService.getModels();
        this.renderProviderList();
        return;
      }
      toggle.addClass("testing");
      const result = await this.plugin.customProviderService.testConnection(provider);
      toggle.removeClass("testing");
      if (result.success) {
        provider.isEnabled = true;
        await this.plugin.saveSettings();
        await this.plugin.modelService.getModels();
        this.renderProviderList();
      } else {
        new import_obsidian7.Notice(`Failed to enable ${provider.name}: ${result.error || "Connection failed"}`, 5e3);
      }
    });
  }
  renderProviderList() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-custom-provider-manager-modal");
    const header = contentEl.createDiv("systemsculpt-custom-provider-manager-header");
    const backButton = header.createEl("button", {
      cls: "systemsculpt-custom-provider-manager-back"
    });
    (0, import_obsidian7.setIcon)(backButton.createSpan(), "arrow-left");
    backButton.createSpan({ text: "Back to Models" });
    backButton.addEventListener("click", () => {
      this.close();
      this.onBack();
    });
    header.createEl("h2", { text: "Custom Providers" });
    const content = contentEl.createDiv("systemsculpt-custom-provider-manager-content");
    const listContainer = content.createDiv("systemsculpt-custom-provider-manager-list");
    const providers = this.plugin.settings.customProviders;
    if (providers.length === 0) {
      const emptyState = listContainer.createDiv("systemsculpt-custom-provider-manager-empty");
      const emptyIcon = emptyState.createDiv("systemsculpt-custom-provider-manager-empty-icon");
      (0, import_obsidian7.setIcon)(emptyIcon, "server-off");
      emptyState.createDiv({
        cls: "systemsculpt-custom-provider-manager-empty-text",
        text: "No custom providers added yet"
      });
    } else {
      providers.forEach((provider) => {
        this.renderProviderCard(provider, listContainer);
      });
    }
    const actions = content.createDiv("systemsculpt-custom-provider-manager-actions");
    const addButton = actions.createEl("button", {
      cls: "systemsculpt-custom-provider-manager-button systemsculpt-custom-provider-manager-button-primary",
      text: "Add Provider"
    });
    (0, import_obsidian7.setIcon)(addButton.createSpan(), "plus");
    addButton.addEventListener("click", () => {
      this.close();
      const customProviderModal = new CustomProviderModal(this.app, this.plugin, () => {
        const managerModal = new CustomProviderManagerModal(this.app, this.plugin, this.onBack);
        managerModal.open();
      });
      customProviderModal.open();
    });
  }
  onOpen() {
    this.renderProviderList();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CustomProviderModal = class extends import_obsidian7.Modal {
  constructor(app, plugin, onBack) {
    super(app);
    this.plugin = plugin;
    this.logger = console;
    this.onBack = onBack;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-custom-provider-modal");
    const header = contentEl.createDiv("systemsculpt-custom-provider-header");
    const backButton = header.createEl("button", {
      cls: "systemsculpt-custom-provider-back"
    });
    (0, import_obsidian7.setIcon)(backButton.createSpan(), "arrow-left");
    backButton.createSpan({ text: "Back to Providers" });
    backButton.addEventListener("click", () => {
      this.close();
      this.onBack();
    });
    header.createEl("h2", { text: "Add Custom Provider" });
    const form = contentEl.createDiv("systemsculpt-custom-provider-form");
    const nameGroup = form.createDiv("systemsculpt-custom-provider-form-group");
    nameGroup.createEl("label", { text: "Provider Name" });
    const nameInput = nameGroup.createEl("input", {
      type: "text",
      placeholder: "e.g., LM Studio, OpenAI",
      attr: {
        maxlength: "25"
      }
    });
    nameInput.addEventListener("input", () => {
      const value = nameInput.value;
      const formattedValue = value.split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
      if (formattedValue !== value) {
        nameInput.value = formattedValue;
      }
    });
    const urlGroup = form.createDiv("systemsculpt-custom-provider-form-group");
    urlGroup.createEl("label", { text: "API Endpoint URL" });
    const presetContainer = urlGroup.createDiv("systemsculpt-custom-provider-presets");
    presetContainer.createEl("label", { text: "Quick Setup:" });
    const presetButtons = presetContainer.createDiv("systemsculpt-custom-provider-preset-buttons");
    const openAIButton = presetButtons.createEl("button", {
      cls: "systemsculpt-custom-provider-button-secondary",
      text: "OpenAI"
    });
    openAIButton.addEventListener("click", () => {
      nameInput.value = "OpenAI";
      urlInput.value = "https://api.openai.com/v1";
      apiKeyInput.value = "";
      resetValidation();
    });
    const openRouterButton = presetButtons.createEl("button", {
      cls: "systemsculpt-custom-provider-button-secondary",
      text: "OpenRouter"
    });
    openRouterButton.addEventListener("click", () => {
      nameInput.value = "OpenRouter";
      urlInput.value = "https://openrouter.ai/api/v1";
      apiKeyInput.value = "";
      resetValidation();
    });
    const groqButton = presetButtons.createEl("button", {
      cls: "systemsculpt-custom-provider-button-secondary",
      text: "Groq"
    });
    groqButton.addEventListener("click", () => {
      nameInput.value = "Groq";
      urlInput.value = "https://api.groq.com/openai/v1";
      apiKeyInput.value = "";
      resetValidation();
    });
    const lmStudioButton = presetButtons.createEl("button", {
      cls: "systemsculpt-custom-provider-button-secondary",
      text: "LM Studio"
    });
    lmStudioButton.addEventListener("click", () => {
      nameInput.value = "LM Studio";
      urlInput.value = "http://localhost:1234/v1";
      apiKeyInput.value = "";
      resetValidation();
    });
    const ollamaButton = presetButtons.createEl("button", {
      cls: "systemsculpt-custom-provider-button-secondary",
      text: "Ollama"
    });
    ollamaButton.addEventListener("click", () => {
      nameInput.value = "Ollama";
      urlInput.value = "http://localhost:11434/v1";
      apiKeyInput.value = "";
      resetValidation();
    });
    const urlInput = urlGroup.createEl("input", {
      type: "text",
      placeholder: "https://your-api-endpoint.com"
    });
    const urlError = urlGroup.createDiv({
      cls: "systemsculpt-custom-provider-error systemsculpt-custom-provider-error-hidden",
      text: " "
    });
    const validateEndpointUrl = (url) => {
      try {
        const parsedUrl = new URL(url);
        const isLocal = parsedUrl.hostname === "localhost" || parsedUrl.hostname === "127.0.0.1";
        if (isLocal && parsedUrl.protocol !== "http:") {
          return { isValid: false, error: "Local endpoints must use HTTP" };
        }
        if (!isLocal && parsedUrl.protocol !== "https:") {
          return { isValid: false, error: "Remote endpoints must use HTTPS" };
        }
        if (isLocal && !parsedUrl.port) {
          return {
            isValid: false,
            error: "Local endpoints require a port number"
          };
        }
        return { isValid: true };
      } catch (e) {
        return { isValid: false, error: "Invalid URL format" };
      }
    };
    const apiKeyGroup = form.createDiv("systemsculpt-custom-provider-form-group");
    apiKeyGroup.createEl("label", { text: "API Key (Optional)" });
    const apiKeyInput = apiKeyGroup.createEl("input", {
      type: "password",
      placeholder: "Enter your API key"
    });
    const resetValidation = () => {
      isConnectionTested = false;
      testResult = null;
      updateButtonState("test");
      urlError.addClass("systemsculpt-custom-provider-error-hidden");
      urlError.removeClass("systemsculpt-custom-provider-success");
    };
    nameInput.addEventListener("input", resetValidation);
    urlInput.addEventListener("input", resetValidation);
    apiKeyInput.addEventListener("input", resetValidation);
    nameInput.addEventListener("input", () => {
      const value = nameInput.value;
      const formattedValue = value.split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
      if (formattedValue !== value) {
        nameInput.value = formattedValue;
      }
    });
    const formActions = form.createDiv("systemsculpt-custom-provider-form-actions");
    const cancelButton = formActions.createEl("button", {
      cls: "systemsculpt-custom-provider-button systemsculpt-custom-provider-button-secondary",
      text: "Cancel"
    });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.onBack();
    });
    const actionButton = formActions.createEl("button", {
      cls: "systemsculpt-custom-provider-button systemsculpt-custom-provider-button-primary",
      text: "Test Connection"
    });
    let isConnectionTested = false;
    let testResult = null;
    const createProviderFromForm = () => ({
      id: crypto.randomUUID(),
      name: nameInput.value.trim(),
      endpoint: urlInput.value.trim(),
      apiKey: apiKeyInput.value.trim(),
      isEnabled: true,
      lastTested: Date.now()
    });
    const updateButtonState = (state) => {
      switch (state) {
        case "test":
          actionButton.setText("Test Connection");
          actionButton.removeAttribute("disabled");
          break;
        case "testing":
          actionButton.setText("Testing...");
          actionButton.setAttribute("disabled", "true");
          break;
        case "retry":
          actionButton.setText("Try Again");
          actionButton.removeAttribute("disabled");
          break;
        case "save":
          actionButton.setText("Save Provider");
          actionButton.removeAttribute("disabled");
          break;
      }
    };
    const validateForm = () => {
      if (!nameInput.value.trim()) {
        return { isValid: false, error: "Provider name is required" };
      }
      const urlValidation = validateEndpointUrl(urlInput.value);
      if (!urlValidation.isValid) {
        return urlValidation;
      }
      const isLocal = urlInput.value.includes("localhost") || urlInput.value.includes("127.0.0.1");
      if (!isLocal && !apiKeyInput.value.trim()) {
        return {
          isValid: false,
          error: "API key is required for remote endpoints"
        };
      }
      return { isValid: true };
    };
    actionButton.addEventListener("click", async () => {
      var _a;
      const validation = validateForm();
      if (!validation.isValid) {
        urlError.textContent = validation.error || "Invalid form data";
        urlError.removeClass("systemsculpt-custom-provider-error-hidden");
        return;
      }
      if (!isConnectionTested) {
        updateButtonState("testing");
        const provider = createProviderFromForm();
        const result = await this.plugin.customProviderService.testConnection(provider);
        if (result.success) {
          isConnectionTested = true;
          updateButtonState("save");
          testResult = result;
          urlError.textContent = `Connection successful! Found ${((_a = result.models) == null ? void 0 : _a.length) || 0} models.`;
          urlError.removeClass("systemsculpt-custom-provider-error-hidden");
          urlError.addClass("systemsculpt-custom-provider-success");
        } else {
          updateButtonState("retry");
          urlError.textContent = result.error || "Connection failed";
          urlError.removeClass("systemsculpt-custom-provider-error-hidden");
          urlError.removeClass("systemsculpt-custom-provider-success");
        }
      } else {
        const provider = createProviderFromForm();
        this.plugin.settings.customProviders = [
          ...this.plugin.settings.customProviders,
          provider
        ];
        await this.plugin.saveSettings();
        await this.plugin.modelService.getModels();
        this.close();
        this.onBack();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/modals/ModelSelectionModal.ts
var ModelSelectionModal = class extends import_obsidian8.Modal {
  constructor(app, currentModelId, onSelect, plugin) {
    super(app);
    this.allModels = [];
    this.selectedCardIndex = -1;
    this.modelCards = [];
    this.isClosing = false;
    this.getSearchableFields = (model) => {
      return [
        { field: "name", text: model.name, weight: 200 },
        ...model.name.split(/[\s\-:\.]+/).map((part) => ({
          field: "name",
          text: part,
          weight: 150
        })),
        ...model.provider === "custom" ? [{ field: "provider", text: model.id.split("-")[0], weight: 180 }] : [],
        { field: "description", text: model.description || "", weight: 50 }
      ];
    };
    this.selectedModelId = currentModelId;
    this.onSelect = onSelect;
    this.plugin = plugin;
    this.logger = console;
    this.helper = new ModelSelectionHelper(plugin);
    this.searchService = new SearchService();
  }
  async onOpen() {
    try {
      const { contentEl } = this;
      contentEl.empty();
      contentEl.addClass("systemsculpt-model-selection-modal");
      this.createSearchUI();
      this.createModelGrid();
      this.setupSearch();
      const loadingContainer = this.modelGrid.createDiv({
        cls: "systemsculpt-loading-container"
      });
      const loadingSpinner = loadingContainer.createDiv({
        cls: "systemsculpt-loading-spinner"
      });
      (0, import_obsidian8.setIcon)(loadingSpinner, "loader-2");
      loadingContainer.createDiv({
        cls: "systemsculpt-loading-text",
        text: "Loading models..."
      });
      this.allModels = await this.plugin.getInitialModels();
      this.renderModels(this.getVisibleModels());
    } catch (error) {
      this.logger.error("ModelSelectionModal: Error in onOpen", error);
      this.contentEl.createDiv({
        cls: "systemsculpt-error-message",
        text: "Error loading model selection modal"
      });
    }
  }
  getVisibleModels() {
    if (!this.searchInput || !this.searchInput.value.trim()) {
      return this.allModels.map((m) => ({ item: m, matches: [], score: 0 }));
    }
    const query = this.searchInput.value.trim();
    const results = this.searchService.search(this.allModels, query, (model) => this.getSearchableFields(model), {
      initialResultsLimit: 25,
      maxFilteredResults: 50
    });
    const filteredResults = results.filter((result) => result.matches.length > 0 && result.score > 0);
    return filteredResults.sort((a, b) => b.score - a.score);
  }
  createSearchUI() {
    const searchContainer = this.contentEl.createDiv({
      cls: "systemsculpt-search-container"
    });
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search models...",
      cls: "systemsculpt-search-input"
    });
    const providersButton = searchContainer.createEl("button", {
      cls: "systemsculpt-providers-button"
    });
    (0, import_obsidian8.setIcon)(providersButton.createSpan(), "settings");
    providersButton.createSpan({ text: "Providers" });
    providersButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.close();
      const managerModal = new CustomProviderManagerModal(this.app, this.plugin, () => {
        const modelSelectionModal = new ModelSelectionModal(this.app, this.selectedModelId, this.onSelect, this.plugin);
        modelSelectionModal.open();
      });
      managerModal.open();
    });
  }
  createModelGrid() {
    this.modelGrid = this.contentEl.createDiv({
      cls: "systemsculpt-model-grid"
    });
  }
  setupSearch() {
    var _a, _b, _c;
    this.searchInput.addEventListener("input", () => {
      const results = this.getVisibleModels();
      this.renderModels(results);
    });
    this.contentEl.addEventListener("keydown", (e) => {
      if (e.key === "Tab") {
        e.preventDefault();
        if (e.shiftKey) {
          this.selectedCardIndex = this.selectedCardIndex <= 0 ? this.modelCards.length - 1 : this.selectedCardIndex - 1;
        } else {
          this.selectedCardIndex = this.selectedCardIndex >= this.modelCards.length - 1 ? 0 : this.selectedCardIndex + 1;
        }
        this.modelCards.forEach((card, i) => {
          const isSelected = i === this.selectedCardIndex;
          card.classList.toggle("systemsculpt-keyboard-selected", isSelected);
          if (isSelected) {
            card.scrollIntoView({ behavior: "smooth", block: "nearest" });
          }
        });
        this.searchInput.focus();
      } else if (e.key === "Enter") {
        const highlightedCard = this.modelCards[this.selectedCardIndex];
        if (highlightedCard) {
          e.preventDefault();
          const modelId = highlightedCard.dataset.modelId;
          if (modelId) {
            this.onSelect(modelId);
            this.close();
          }
        }
      }
    });
    (_a = this.modelGrid) == null ? void 0 : _a.addEventListener("wheel", () => {
    }, { passive: true });
    (_b = this.modelGrid) == null ? void 0 : _b.addEventListener("touchstart", () => {
    }, { passive: true });
    (_c = this.modelGrid) == null ? void 0 : _c.addEventListener("touchmove", () => {
    }, { passive: true });
  }
  renderModels(searchResults) {
    var _a, _b;
    if (!this.modelGrid)
      return;
    this.modelGrid.empty();
    this.modelCards = [];
    const srMap = new Map(searchResults.map((sr) => [sr.item.id, sr.matches || []]));
    const hasValidLicense = (_a = this.plugin.settings.licenseKey) == null ? void 0 : _a.trim();
    const favorites = [];
    const nonFavorites = [];
    const visibleModels = searchResults.map((sr) => sr.item);
    visibleModels.forEach((model) => {
      if (!hasValidLicense && model.provider === "systemsculpt") {
        return;
      }
      if (model.isFavorite) {
        favorites.push(model);
      } else {
        nonFavorites.push(model);
      }
    });
    if (favorites.length > 0) {
      const header = this.modelGrid.createDiv({
        cls: "systemsculpt-provider-header"
      });
      header.createSpan({ text: "Favorites" });
      favorites.sort((a, b) => {
        if (a.provider === "systemsculpt" && b.provider !== "systemsculpt")
          return -1;
        if (a.provider !== "systemsculpt" && b.provider === "systemsculpt")
          return 1;
        if (a.provider !== b.provider) {
          return a.provider.localeCompare(b.provider);
        }
        return a.name.localeCompare(b.name);
      });
      favorites.forEach((model) => {
        const matches = srMap.get(model.id) || [];
        const card = this.renderModelCard(model, matches);
        if (card) {
          this.modelGrid.appendChild(card);
          this.modelCards.push(card);
        }
      });
    }
    const modelsByProvider = new Map();
    nonFavorites.forEach((model) => {
      var _a2;
      const provider = model.provider;
      if (!modelsByProvider.has(provider)) {
        modelsByProvider.set(provider, []);
      }
      (_a2 = modelsByProvider.get(provider)) == null ? void 0 : _a2.push(model);
    });
    const systemsculptHeader = this.modelGrid.createDiv({
      cls: "systemsculpt-provider-header"
    });
    systemsculptHeader.createSpan({ text: "SystemSculpt Models" });
    if (!hasValidLicense && searchResults.some((sr) => sr.item.provider === "systemsculpt")) {
      this.createProInfoMessage(this.modelGrid);
    }
    if (hasValidLicense && modelsByProvider.has("systemsculpt")) {
      const systemsculptModels = modelsByProvider.get("systemsculpt") || [];
      const sortedSystemsculptModels = systemsculptModels.sort((a, b) => a.name.localeCompare(b.name));
      sortedSystemsculptModels.forEach((model) => {
        const matches = srMap.get(model.id) || [];
        const card = this.renderModelCard(model, matches);
        if (card) {
          this.modelGrid.appendChild(card);
          this.modelCards.push(card);
        }
      });
    }
    modelsByProvider.delete("systemsculpt");
    const sortedProviders = Array.from(modelsByProvider.keys()).sort((a, b) => a.localeCompare(b));
    sortedProviders.forEach((provider) => {
      const models = modelsByProvider.get(provider) || [];
      if (models.length === 0)
        return;
      const sortedModels = models.sort((a, b) => a.name.localeCompare(b.name));
      const header = this.modelGrid.createDiv({
        cls: "systemsculpt-provider-header"
      });
      const providerName = `${provider.charAt(0).toUpperCase() + provider.slice(1)} Models`;
      header.createSpan({ text: providerName });
      sortedModels.forEach((model) => {
        const matches = srMap.get(model.id) || [];
        const card = this.renderModelCard(model, matches);
        if (card) {
          this.modelGrid.appendChild(card);
          this.modelCards.push(card);
        }
      });
    });
    if (this.modelCards.length === 0) {
      if ((_b = this.searchInput) == null ? void 0 : _b.value) {
        const noResultsCard = this.renderNoResultsCard();
        this.modelGrid.appendChild(noResultsCard);
      } else {
        this.createCustomProviderInfoMessage(this.modelGrid);
      }
    }
  }
  renderNoResultsCard() {
    const card = createDiv({ cls: "systemsculpt-model-card" });
    const iconsContainer = card.createDiv({ cls: "systemsculpt-model-icons" });
    const searchIcon = iconsContainer.createDiv({
      cls: "systemsculpt-model-icon systemsculpt-pricing-low"
    });
    (0, import_obsidian8.setIcon)(searchIcon, "search");
    const nameContainer = card.createDiv({
      cls: "systemsculpt-model-name-container"
    });
    nameContainer.createDiv({
      cls: "systemsculpt-model-name",
      text: "No models found"
    });
    const description = card.createDiv({
      cls: "systemsculpt-model-description",
      text: "No models match your current search criteria. Click here to reset all filters."
    });
    card.createDiv({ cls: "systemsculpt-model-details" });
    card.addEventListener("click", () => {
      if (this.searchInput) {
        this.searchInput.value = "";
      }
      this.renderModels(this.allModels.map((m) => ({ item: m, matches: [], score: 0 })));
    });
    return card;
  }
  renderModelCard(model, matches = []) {
    var _a, _b, _c, _d, _e, _f, _g;
    const card = document.createElement("div");
    card.className = "systemsculpt-model-card";
    if (model.provider !== "systemsculpt") {
      card.classList.add("systemsculpt-custom-model-card");
    }
    card.setAttribute("tabindex", "0");
    card.dataset.modelId = model.id;
    const favoriteButton = card.createDiv({
      cls: `systemsculpt-favorite-button ${model.isFavorite ? "is-favorite" : ""}`,
      attr: {
        "aria-label": model.isFavorite ? "Remove from favorites" : "Add to favorites",
        role: "button"
      }
    });
    (0, import_obsidian8.setIcon)(favoriteButton, "star");
    favoriteButton.addEventListener("click", async (e) => {
      e.stopPropagation();
      const isFavorite = !model.isFavorite;
      model.isFavorite = isFavorite;
      favoriteButton.classList.toggle("is-favorite", isFavorite);
      favoriteButton.setAttribute("aria-label", isFavorite ? "Remove from favorites" : "Add to favorites");
      if (!Array.isArray(this.plugin.settings.favoriteModels)) {
        this.plugin.settings.favoriteModels = [];
      }
      if (isFavorite) {
        const newFav = { provider: model.provider, modelId: model.id };
        if (!this.plugin.settings.favoriteModels.some((f) => f.modelId === model.id && f.provider === model.provider)) {
          this.plugin.settings.favoriteModels.push(newFav);
        }
      } else {
        this.plugin.settings.favoriteModels = this.plugin.settings.favoriteModels.filter((f) => !(f.modelId === model.id && f.provider === model.provider));
      }
      await this.plugin.saveSettings();
      this.renderModels(this.getVisibleModels());
    });
    if (model.provider !== "systemsculpt") {
      const nameContainer = card.createDiv({
        cls: "systemsculpt-custom-model-name-container"
      });
      const modelName = nameContainer.createDiv({
        cls: "systemsculpt-custom-model-name"
      });
      const providerPrefix = `[${model.provider.toUpperCase()}] `;
      const nameText = providerPrefix + model.name;
      modelName.append(this.helper.highlightText(nameText, matches, (_a = this.searchInput) == null ? void 0 : _a.value));
    } else {
      const iconsContainer = card.createDiv({
        cls: "systemsculpt-model-icons"
      });
      const completionPrice = parseFloat(model.pricing.completion) * 1e6;
      const pricingIndicator = iconsContainer.createDiv({
        cls: "systemsculpt-model-icon",
        attr: {
          "aria-label": `Approx ~$${completionPrice.toFixed(2)} per million tokens`
        }
      });
      (0, import_obsidian8.setIcon)(pricingIndicator, "wallet");
      if ((_b = model.capabilities) == null ? void 0 : _b.includes("fast")) {
        const speedIndicator = iconsContainer.createDiv({
          cls: "systemsculpt-model-icon systemsculpt-speed-indicator",
          attr: { "aria-label": "Blazing fast responses" }
        });
        (0, import_obsidian8.setIcon)(speedIndicator, "zap");
      }
      if ((_c = model.capabilities) == null ? void 0 : _c.includes("reasoning")) {
        const reasonIndicator = iconsContainer.createDiv({
          cls: "systemsculpt-model-icon systemsculpt-reasoning-indicator",
          attr: { "aria-label": "Complex reasoning" }
        });
        (0, import_obsidian8.setIcon)(reasonIndicator, "brain");
      }
      if ((_d = model.capabilities) == null ? void 0 : _d.includes("creative")) {
        const creativeIndicator = iconsContainer.createDiv({
          cls: "systemsculpt-model-icon systemsculpt-creative-indicator",
          attr: { "aria-label": "Creative writing" }
        });
        (0, import_obsidian8.setIcon)(creativeIndicator, "brush");
      }
      if (((_e = model.architecture) == null ? void 0 : _e.modality) === "text+image->text") {
        const visionIndicator = iconsContainer.createDiv({
          cls: "systemsculpt-model-icon systemsculpt-vision-indicator",
          attr: { "aria-label": "Vision/image input" }
        });
        (0, import_obsidian8.setIcon)(visionIndicator, "eye");
      }
      const nameContainer = card.createDiv({
        cls: "systemsculpt-model-name-container"
      });
      const modelName = nameContainer.createDiv({
        cls: "systemsculpt-model-name"
      });
      const providerPrefix = "[SYSTEMSCULPT] ";
      const nameText = providerPrefix + model.name;
      modelName.append(this.helper.highlightText(nameText, matches, (_f = this.searchInput) == null ? void 0 : _f.value));
      const description = card.createDiv({
        cls: "systemsculpt-model-description"
      });
      description.append(this.helper.highlightText(model.description, matches, (_g = this.searchInput) == null ? void 0 : _g.value));
      description.setAttribute("aria-label", model.description);
      description.addClass("has-tooltip");
      const details = card.createDiv({ cls: "systemsculpt-model-details" });
      const contextLength = details.createDiv({
        cls: "systemsculpt-model-detail"
      });
      contextLength.createSpan({
        text: "Context: ",
        cls: "systemsculpt-detail-label"
      });
      contextLength.createSpan({
        text: `${model.context_length.toLocaleString()} tokens`,
        cls: "systemsculpt-detail-value"
      });
    }
    card.addEventListener("click", async () => {
      const customProvider = this.plugin.settings.customProviders.find((p) => p.name.toLowerCase() === model.provider.toLowerCase());
      if (customProvider) {
        this.plugin.settings.activeProvider = {
          id: customProvider.id,
          name: customProvider.name,
          type: "custom"
        };
      } else {
        this.plugin.settings.activeProvider = {
          id: "systemsculpt",
          name: "SystemSculpt",
          type: "native"
        };
      }
      await this.plugin.saveSettings();
      this.onSelect(model.id);
      this.close();
    });
    card.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        this.onSelect(model.id);
        this.close();
      }
    });
    card.addEventListener("focus", () => {
      this.modelCards.forEach((c) => c.classList.remove("systemsculpt-keyboard-selected"));
      card.classList.add("systemsculpt-keyboard-selected");
      this.searchInput.focus();
    });
    return card;
  }
  onClose() {
    this.isClosing = true;
    this.contentEl.empty();
  }
  setModels(models) {
    if (!Array.isArray(models)) {
      this.logger.error("Invalid models data", { models });
      return;
    }
    this.allModels = models;
    if (this.modelGrid) {
      this.renderModels(this.getVisibleModels());
    }
  }
  createProInfoMessage(container) {
    const infoEl = container.createDiv({
      cls: "systemsculpt-model-info"
    });
    const iconContainer = infoEl.createDiv({
      cls: "systemsculpt-model-icon-container"
    });
    (0, import_obsidian8.setIcon)(iconContainer, "sparkles");
    const messageContainer = infoEl.createDiv({
      cls: "systemsculpt-model-message-container"
    });
    messageContainer.createDiv({
      cls: "systemsculpt-model-info-title",
      text: "Unlock Pro Models"
    });
    messageContainer.createDiv({
      cls: "systemsculpt-model-info-description",
      text: "Get instant access to o3 Mini, DeepSeek R1, and other state-of-the-art models. Always up to date so you don't have to guess which model to use."
    });
    const buttonContainer = messageContainer.createDiv({
      cls: "systemsculpt-model-info-buttons"
    });
    const addProviderBtn = buttonContainer.createEl("button", {
      cls: "systemsculpt-info-button"
    });
    const addProviderIcon = addProviderBtn.createSpan();
    (0, import_obsidian8.setIcon)(addProviderIcon, "plus");
    addProviderBtn.createSpan({ text: "Add A Provider" });
    addProviderBtn.addEventListener("click", (e) => {
      e.preventDefault();
      this.close();
      const managerModal = new CustomProviderManagerModal(this.app, this.plugin, () => {
        const modal = new ModelSelectionModal(this.app, this.selectedModelId, this.onSelect, this.plugin);
        modal.open();
      });
      managerModal.open();
    });
    const patronBtn = buttonContainer.createEl("button", {
      cls: "systemsculpt-info-button mod-cta"
    });
    const patronIcon = patronBtn.createSpan();
    (0, import_obsidian8.setIcon)(patronIcon, "heart");
    patronBtn.createSpan({ text: "Become A Patron" });
    patronBtn.addEventListener("click", () => {
      window.open(PATREON_URL, "_blank");
    });
    return infoEl;
  }
  createCustomProviderInfoMessage(container) {
    const infoEl = container.createDiv({
      cls: "systemsculpt-model-info"
    });
    const iconContainer = infoEl.createDiv({
      cls: "systemsculpt-model-icon-container"
    });
    (0, import_obsidian8.setIcon)(iconContainer, "server");
    const messageContainer = infoEl.createDiv({
      cls: "systemsculpt-model-message-container"
    });
    messageContainer.createDiv({
      cls: "systemsculpt-model-info-title",
      text: "Add Your Own Models"
    });
    messageContainer.createDiv({
      cls: "systemsculpt-model-info-description",
      text: "Get started by adding your own custom provider like Ollama, LM Studio, or OpenAI. You can use your own models or connect to other AI services."
    });
    const buttonContainer = messageContainer.createDiv({
      cls: "systemsculpt-model-info-buttons"
    });
    const addProviderBtn = buttonContainer.createEl("button", {
      cls: "systemsculpt-info-button mod-cta"
    });
    const addProviderIcon = addProviderBtn.createSpan();
    (0, import_obsidian8.setIcon)(addProviderIcon, "plus");
    addProviderBtn.createSpan({ text: "Add A Provider" });
    addProviderBtn.addEventListener("click", (e) => {
      e.preventDefault();
      this.close();
      const managerModal = new CustomProviderManagerModal(this.app, this.plugin, () => {
        const modal = new ModelSelectionModal(this.app, this.selectedModelId, this.onSelect, this.plugin);
        modal.open();
      });
      managerModal.open();
    });
    return infoEl;
  }
};

// src/components/FolderSuggester.ts
var import_obsidian9 = __toModule(require("obsidian"));
var FolderSuggester = class extends import_obsidian9.AbstractInputSuggest {
  constructor(inputEl, onSelectCb, app) {
    super(app, inputEl);
    this.inputEl = inputEl;
    this.onSelectCb = onSelectCb;
    this.content = getFolderSuggestions(app);
  }
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLowerCase();
    return [...this.content].filter((content) => content.toLowerCase().includes(lowerCaseInputStr));
  }
  renderSuggestion(content, el) {
    el.setText(content);
  }
  selectSuggestion(content, evt) {
    this.onSelectCb(content);
    this.inputEl.value = content;
    this.inputEl.blur();
    this.close();
  }
};
function getFolderSuggestions(app) {
  const folders = app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian9.TFolder);
  return new Set(folders.map((folder) => folder.path));
}
function attachFolderSuggester(inputEl, onSelect, app) {
  return new FolderSuggester(inputEl, onSelect, app);
}

// src/modals/SystemPromptModal.ts
var import_obsidian11 = __toModule(require("obsidian"));
init_FileSuggester();
init_ui();
init_SystemPromptService();
function sanitizeFileName(name) {
  return name.replace(/[^a-zA-Z0-9-_ ]/g, "").replace(/ /g, "-");
}
function getSystemPromptPath(directory, fileName) {
  return `${directory}/${fileName}.md`;
}
var SystemPromptModal = class extends import_obsidian11.Modal {
  constructor(app, currentPrompt, options) {
    super(app);
    this.currentPrompt = currentPrompt;
    this.result = null;
    this.systemPrompts = [];
    this.activePreset = null;
    var _a;
    this.modalEl.addClass("systemsculpt-modal", "systemsculpt-textarea-modal");
    this.options = {
      ...options,
      systemPromptsDirectory: (_a = options.systemPromptsDirectory) != null ? _a : "SystemSculpt/System Prompts"
    };
    this.systemPromptService = new SystemPromptService(app);
  }
  showLoading(show) {
    if (!this.loadingIndicator || !this.contentContainer)
      return;
    this.loadingIndicator.style.display = show ? "flex" : "none";
    this.contentContainer.style.display = show ? "none" : "block";
  }
  async loadSystemPrompts() {
    try {
      this.showLoading(true);
      this.systemPrompts = await this.systemPromptService.getSystemPrompts();
      this.createPresetButtons();
      this.showLoading(false);
    } catch (error) {
      console.error("Failed to load system prompts:", error);
      this.showLoading(false);
      await showPopup(this.app, "", {
        title: "Error",
        description: "Failed to load system prompts. Please try again later.",
        primaryButton: "OK"
      });
    }
  }
  createPresetButtons() {
    if (!this.presetButtonContainer)
      return;
    this.presetButtonContainer.empty();
    this.systemPrompts.forEach((preset) => {
      if (preset.systemPrompt === this.currentPrompt) {
        this.activePreset = preset.label;
      }
    });
    if (!this.activePreset && this.currentPrompt) {
      const generalUsePreset = this.systemPrompts.find((p) => p.id === "general-use");
      if (generalUsePreset && generalUsePreset.systemPrompt.trim() === this.currentPrompt.trim()) {
        this.activePreset = generalUsePreset.label;
      } else {
        this.activePreset = "General-use";
        if (this.textArea && generalUsePreset) {
          this.textArea.value = generalUsePreset.systemPrompt;
        }
      }
    }
    const presetButtons = [
      ...this.systemPrompts,
      ...!this.systemPrompts.some((p) => p.id === "custom") ? [
        {
          id: "custom",
          label: "Custom",
          isUserConfigurable: true,
          systemPrompt: ""
        }
      ] : []
    ].map((preset) => {
      const button = this.presetButtonContainer.createEl("button", {
        text: preset.label,
        cls: "systemsculpt-preset-button"
      });
      if (preset.label === this.activePreset) {
        button.addClass("active");
        if (preset.label === "Custom") {
          this.customSection.style.display = "block";
        }
      }
      button.onclick = () => {
        this.presetButtonContainer.querySelectorAll(".systemsculpt-preset-button").forEach((btn) => btn.removeClass("active"));
        button.addClass("active");
        this.activePreset = preset.label;
        if (preset.label === "Custom") {
          this.customSection.style.display = "block";
          this.customInput.focus();
          if (this.textArea) {
            this.textArea.readOnly = false;
          }
        } else {
          this.customSection.style.display = "none";
          if (this.textArea) {
            this.textArea.value = preset.systemPrompt;
            this.textArea.readOnly = !preset.isUserConfigurable;
          }
        }
      };
      return button;
    });
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-modal-content");
    this.loadingIndicator = contentEl.createDiv("systemsculpt-loading");
    this.loadingIndicator.style.display = "none";
    this.loadingIndicator.style.justifyContent = "center";
    this.loadingIndicator.style.alignItems = "center";
    this.loadingIndicator.style.padding = "20px";
    const loadingText = this.loadingIndicator.createSpan();
    loadingText.setText("Loading system prompts...");
    this.contentContainer = contentEl.createDiv("systemsculpt-content-container");
    const title = this.options.mode === "default" ? "Edit Default System Prompt" : "Chat View Settings";
    const description = this.options.mode === "default" ? "Changes will apply as the default for all new chat views" : "Configure settings for this specific chat view";
    this.titleEl.setText(title);
    this.titleEl.addClass("systemsculpt-modal-title");
    const descriptionEl = this.titleEl.createDiv();
    descriptionEl.addClass("systemsculpt-modal-description");
    descriptionEl.setText(description);
    descriptionEl.style.color = "var(--text-muted)";
    descriptionEl.style.fontSize = "0.9em";
    descriptionEl.style.marginTop = "0.2em";
    const textAreaContainer = this.contentContainer.createDiv("systemsculpt-textarea-container");
    this.presetButtonContainer = textAreaContainer.createDiv("systemsculpt-preset-button-container");
    this.customSection = textAreaContainer.createDiv("systemsculpt-custom-section");
    this.customSection.style.display = "none";
    const customInputContainer = this.customSection.createDiv("systemsculpt-custom-input-container");
    const inputWrapper = customInputContainer.createDiv("systemsculpt-input-wrapper");
    inputWrapper.style.display = "flex";
    inputWrapper.style.gap = "8px";
    inputWrapper.style.alignItems = "center";
    this.customInput = inputWrapper.createEl("input", {
      type: "text",
      placeholder: "Search for a system prompt file...",
      cls: "systemsculpt-custom-input"
    });
    const createButton2 = inputWrapper.createEl("button", {
      cls: "systemsculpt-create-button"
    });
    createButton2.style.padding = "4px 8px";
    createButton2.style.borderRadius = "4px";
    createButton2.style.cursor = "pointer";
    (0, import_obsidian11.setIcon)(createButton2, "plus");
    createButton2.addEventListener("click", async () => {
      var _a2, _b2, _c;
      let templateContent = "";
      try {
        templateContent = await this.systemPromptService.getSystemPromptTemplate();
      } catch (error) {
        console.error("Error fetching system prompt template:", error);
        await showPopup(this.app, "", {
          title: "Error",
          description: "Failed to fetch system prompt template. Please try again later.",
          primaryButton: "OK"
        });
        return;
      }
      const result = await showPopup(this.app, "", {
        title: "Create New System Prompt",
        description: "Enter a title and content for your new system prompt. The title will be used to create a markdown file that you can customize later.",
        primaryButton: "Create",
        secondaryButton: "Cancel",
        inputs: [
          {
            type: "text",
            placeholder: "My Custom Assistant",
            required: true,
            className: "systemsculpt-prompt-creation-title-input"
          },
          {
            type: "textarea",
            value: templateContent,
            required: true,
            className: "systemsculpt-prompt-creation-content"
          }
        ]
      });
      if (!(result == null ? void 0 : result.confirmed) || !((_a2 = result.inputs) == null ? void 0 : _a2[0]) || !((_b2 = result.inputs) == null ? void 0 : _b2[1])) {
        return;
      }
      const [title2, content] = result.inputs;
      const promptsDirectory = (_c = this.options.systemPromptsDirectory) != null ? _c : "SystemSculpt/System Prompts";
      const fileName = sanitizeFileName(title2);
      const filePath = getSystemPromptPath(promptsDirectory, fileName);
      try {
        await this.app.vault.createFolder(promptsDirectory).catch(() => {
        });
        const fileContent = `# ${title2}

${content}`;
        const file = await this.app.vault.create(filePath, fileContent);
        if (!file) {
          throw new Error("Failed to create file");
        }
        if (this.textArea) {
          this.textArea.value = fileContent;
          this.textArea.readOnly = false;
        }
        this.customInput.value = filePath;
        await showPopup(this.app, "", {
          title: "Success",
          description: "System prompt file created successfully!",
          primaryButton: "OK"
        });
      } catch (error) {
        console.error("Error creating system prompt file:", error);
        const errorMessage = error instanceof Error ? error.message : "Failed to create system prompt file. Please try again.";
        await showPopup(this.app, "", {
          title: "Error",
          description: errorMessage,
          primaryButton: "OK"
        });
      }
    });
    if (this.customInput) {
      attachFileSuggester(this.customInput, async (selectedPath) => {
        try {
          const file = this.app.vault.getAbstractFileByPath(selectedPath);
          if (file && file instanceof import_obsidian11.TFile) {
            const content = await this.app.vault.read(file);
            this.textArea.value = content;
            this.textArea.readOnly = false;
            this.customInput.value = selectedPath.replace(/\.md$/, "");
          }
        } catch (error) {
          console.error("Error reading system prompt file:", error);
        }
      }, this.app, (_a = this.options.systemPromptsDirectory) != null ? _a : "SystemSculpt/System Prompts");
    }
    this.textArea = textAreaContainer.createEl("textarea", {
      cls: "systemsculpt-textarea",
      attr: {
        placeholder: "Enter system prompt",
        readOnly: this.activePreset !== "Custom"
      }
    });
    this.textArea.value = this.currentPrompt;
    if (this.options.mode === "chat-specific") {
      const tokenLimitContainer = textAreaContainer.createDiv({
        cls: "systemsculpt-token-limit-container"
      });
      tokenLimitContainer.style.display = "flex";
      tokenLimitContainer.style.justifyContent = "flex-end";
      tokenLimitContainer.style.alignItems = "center";
      tokenLimitContainer.style.marginTop = "1rem";
      tokenLimitContainer.style.gap = "8px";
      const tokenLimitWrapper = tokenLimitContainer.createDiv({
        cls: "systemsculpt-token-limit-wrapper"
      });
      tokenLimitWrapper.style.display = "flex";
      tokenLimitWrapper.style.flexDirection = "column";
      tokenLimitWrapper.style.alignItems = "flex-end";
      tokenLimitWrapper.style.width = "50%";
      const tokenLimitLabel = tokenLimitWrapper.createDiv({
        cls: "systemsculpt-token-limit-label",
        text: "Context Token Limit"
      });
      tokenLimitLabel.style.fontWeight = "500";
      tokenLimitLabel.style.marginBottom = "4px";
      tokenLimitLabel.style.fontSize = "14px";
      const inputWrapper2 = tokenLimitWrapper.createDiv({
        cls: "systemsculpt-token-limit-input-wrapper"
      });
      inputWrapper2.style.display = "flex";
      inputWrapper2.style.alignItems = "center";
      inputWrapper2.style.gap = "4px";
      inputWrapper2.style.width = "100%";
      this.tokenLimitInput = inputWrapper2.createEl("input", {
        type: "range",
        cls: "systemsculpt-token-limit-input",
        attr: {
          min: "0",
          max: "100",
          step: "1",
          value: ((_b = this.options.tokenLimitPercentage) == null ? void 0 : _b.toString()) || "0"
        }
      });
      this.tokenLimitInput.style.width = "100%";
      const valueDisplay = inputWrapper2.createDiv({
        cls: "systemsculpt-token-limit-display",
        text: this.options.tokenLimitPercentage ? this.options.modelContextLength ? `${Math.floor(this.options.tokenLimitPercentage / 100 * this.options.modelContextLength / 1e3)}K` : `${this.options.tokenLimitPercentage}%` : "\u221E"
      });
      valueDisplay.style.minWidth = "45px";
      valueDisplay.style.textAlign = "right";
      valueDisplay.style.fontVariantNumeric = "tabular-nums";
      valueDisplay.style.fontSize = "14px";
      valueDisplay.style.fontWeight = "500";
      valueDisplay.style.color = "var(--text-accent)";
      const description2 = tokenLimitWrapper.createDiv({
        cls: "systemsculpt-token-limit-description",
        text: this.options.modelContextLength ? `Model max: ${Math.floor(this.options.modelContextLength / 1e3)}K tokens` : "Set to 0% for no limit"
      });
      description2.style.fontSize = "12px";
      description2.style.color = "var(--text-muted)";
      description2.style.marginTop = "4px";
      this.tokenLimitInput.addEventListener("input", (e) => {
        const percentage = parseInt(e.target.value, 10);
        if (percentage === 0) {
          valueDisplay.setText("\u221E");
        } else if (this.options.modelContextLength) {
          const tokens = Math.floor(percentage / 100 * this.options.modelContextLength / 1e3);
          valueDisplay.setText(`${tokens}K`);
        } else {
          valueDisplay.setText(`${percentage}%`);
        }
      });
    }
    if (this.activePreset === "Custom" && this.options.customPromptFilePath) {
      this.customInput.value = this.options.customPromptFilePath.replace(/^\[\[(.*?)\]\]$/, "$1");
    }
    const resizeObserver = new ResizeObserver(() => {
      this.textArea.style.height = "auto";
      this.textArea.style.height = this.textArea.scrollHeight + "px";
    });
    resizeObserver.observe(this.textArea);
    const buttonContainer = this.contentContainer.createDiv("systemsculpt-button-container");
    const secondaryButton = buttonContainer.createEl("button", {
      text: "Cancel",
      cls: "systemsculpt-button"
    });
    const handleCancel = () => {
      this.result = null;
      this.close();
    };
    secondaryButton.onclick = handleCancel;
    const primaryButton = buttonContainer.createEl("button", {
      text: "Save",
      cls: "systemsculpt-button mod-cta"
    });
    const handleSave = () => {
      var _a2, _b2;
      const activeButton = this.modalEl.querySelector(".systemsculpt-preset-button.active");
      const activePresetLabel = (_a2 = activeButton == null ? void 0 : activeButton.textContent) != null ? _a2 : "";
      let result;
      if (activePresetLabel === "Custom" && this.customInput.value) {
        const path = this.customInput.value.replace(/\.md$/, "");
        result = {
          content: this.textArea.value,
          type: "custom",
          path
        };
      } else {
        const preset = this.systemPrompts.find((p) => p.label === activePresetLabel);
        if (preset) {
          result = {
            content: preset.systemPrompt,
            type: preset.id
          };
        } else {
          result = {
            content: this.textArea.value,
            type: "custom"
          };
        }
      }
      if (this.options.mode === "chat-specific" && ((_b2 = this.tokenLimitInput) == null ? void 0 : _b2.value)) {
        const percentage = parseInt(this.tokenLimitInput.value, 10);
        if (percentage > 0) {
          result.tokenLimitPercentage = percentage;
          if (this.options.modelContextLength) {
            result.tokenLimit = Math.floor(percentage / 100 * this.options.modelContextLength);
          }
        }
      }
      this.result = result;
      this.close();
    };
    primaryButton.onclick = handleSave;
    this.modalEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.isComposing && !e.shiftKey && e.target !== this.textArea) {
        e.preventDefault();
        handleSave();
      } else if (e.key === "Escape") {
        e.preventDefault();
        handleCancel();
      }
    });
    this.textArea.focus();
    this.textArea.setSelectionRange(this.textArea.value.length, this.textArea.value.length);
    await this.loadSystemPrompts();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolvePromise !== void 0 && this.resolvePromise !== null) {
      this.resolvePromise(this.result);
    }
  }
  async openAndGetValue() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
};
async function showSystemPromptModal(app, currentPrompt, options) {
  const defaultOptions = {
    systemPromptsDirectory: "SystemSculpt/System Prompts",
    mode: "default",
    modelContextLength: void 0
  };
  const modal = new SystemPromptModal(app, currentPrompt, {
    ...defaultOptions,
    ...options
  });
  const result = await modal.openAndGetValue();
  if (result !== null && (options == null ? void 0 : options.onSave)) {
    await options.onSave(result.content);
  }
  return result;
}

// src/modals/SettingsTab.ts
var SystemSculptSettingTab = class extends import_obsidian14.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.debounceTimer = null;
    this.plugin = plugin;
    this.systemSculptService = SystemSculptService.getInstance(plugin.settings, this.app);
  }
  validateDirectory(path) {
    if (!path)
      return true;
    return !path.includes("..") && !path.startsWith("/") && !path.startsWith("\\");
  }
  async handleDirectoryChange(value, settingKey) {
    if (!this.validateDirectory(value)) {
      showPopup(this.app, "Invalid directory path. Please use relative paths without '..' or leading slashes.");
      return;
    }
    if (this.debounceTimer)
      clearTimeout(this.debounceTimer);
    this.debounceTimer = setTimeout(async () => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
    }, 500);
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    const mainContainer = containerEl.createDiv("systemsculpt-settings-container");
    mainContainer.createEl("h2", { text: "SystemSculpt AI Settings" });
    const tabContainer = mainContainer.createDiv("systemsculpt-settings-tabs");
    const contentContainer = mainContainer.createDiv("systemsculpt-settings-content");
    const tabs = [
      { id: "license", label: "License" },
      { id: "directories", label: "Directories" },
      { id: "recorder", label: "Recorder" },
      { id: "chat", label: "Chat" },
      { id: "tasks", label: "Tasks" },
      { id: "advanced", label: "Advanced" }
    ];
    tabs.forEach((tab) => {
      const tabButton = tabContainer.createEl("button", {
        cls: "systemsculpt-tab-button",
        text: tab.label
      });
      tabButton.dataset.tab = tab.id;
      if (tab.id === "license")
        tabButton.addClass("active");
    });
    const isProActive = this.plugin.settings.licenseValid === true;
    const licenseContent = contentContainer.createDiv("systemsculpt-tab-content active");
    const directoriesContent = contentContainer.createDiv("systemsculpt-tab-content");
    const recorderContent = contentContainer.createDiv("systemsculpt-tab-content");
    const chatContent = contentContainer.createDiv("systemsculpt-tab-content");
    const tasksContent = contentContainer.createDiv("systemsculpt-tab-content");
    const advancedContent = contentContainer.createDiv("systemsculpt-tab-content");
    this.displayLicenseTab(licenseContent, isProActive);
    this.displayDirectoriesTab(directoriesContent, isProActive);
    this.displayRecorderTab(recorderContent);
    this.displayChatTab(chatContent);
    this.displayTasksTab(tasksContent);
    this.displayAdvancedTab(advancedContent);
    tabContainer.querySelectorAll(".systemsculpt-tab-button").forEach((button) => {
      button.addEventListener("click", (e) => {
        var _a;
        const target = e.target;
        const tabId = target.dataset.tab;
        tabContainer.querySelectorAll(".systemsculpt-tab-button").forEach((b) => b.classList.remove("active"));
        contentContainer.querySelectorAll(".systemsculpt-tab-content").forEach((c) => c.classList.remove("active"));
        target.classList.add("active");
        (_a = contentContainer.querySelector(`[data-tab="${tabId}"]`)) == null ? void 0 : _a.classList.add("active");
      });
    });
    if (!document.getElementById("systemsculpt-settings-styles")) {
      const style = document.createElement("style");
      style.id = "systemsculpt-settings-styles";
      style.textContent = `
      .systemsculpt-settings-tabs {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        margin-bottom: 16px;
        border-bottom: 1px solid var(--background-modifier-border);
        padding-bottom: 8px;
        max-width: 100%;
      }
      
      .systemsculpt-tab-button {
        background: none;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        color: var(--text-normal);
        transition: all 0.2s ease;
        font-size: 0.9em;
        flex: 1 1 auto;
        min-width: 120px;
        text-align: center;
      }
      
      .systemsculpt-tab-button:hover {
        background-color: var(--background-modifier-hover);
      }
      
      .systemsculpt-tab-button.active {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
      }
      
      .systemsculpt-tab-content {
        display: none;
        max-width: 100%;
        overflow-x: hidden;
      }
      
      .systemsculpt-tab-content.active {
        display: block;
        padding: 0 8px;
      }
      
      /* License Tab Styling */
      .systemsculpt-license-input {
        width: 100%;
        max-width: 400px;
      }
      
      .pro-badge {
        background: var(--interactive-accent);
        color: var(--text-on-accent);
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.8em;
        font-weight: 600;
        margin-left: 8px;
        vertical-align: middle;
      }
      
      .token-balance-value {
        font-weight: 600;
        color: var(--text-accent);
        margin-left: 8px;
      }
      
      .pro-features-grid .setting-item {
        padding: 8px;
        border-radius: 4px;
        background: var(--background-secondary-alt);
        margin: 4px 0;
      }
      
      .pro-benefits-list {
        margin: 16px 0;
        padding-left: 20px;
        color: var(--text-muted);
      }
      
      .pro-benefits-list li {
        margin: 8px 0;
        list-style-type: '\u2192';
        padding-left: 20px;
        text-indent: -12px;
        word-break: break-word;
      }
    `;
      mainContainer.appendChild(style);
    }
  }
  displayLicenseTab(containerEl, isProActive) {
    containerEl.dataset.tab = "license";
    const licenseSettingContainer = containerEl.createDiv("systemsculpt-license-settings");
    licenseSettingContainer.createEl("h3", {
      text: "SystemSculpt License"
    });
    const licenseSetting = new import_obsidian14.Setting(licenseSettingContainer).setName("License Key").setDesc("Unlock Pro features with your license key").addText((text) => {
      text.setPlaceholder("Paste license key").setValue(this.plugin.settings.licenseKey).onChange(async (value) => {
        this.plugin.settings.licenseKey = value;
        await this.plugin.saveSettings();
      }).inputEl.addClass("systemsculpt-license-input");
      text.inputEl.type = "password";
      text.inputEl.style.fontFamily = "monospace";
      text.inputEl.addEventListener("focus", () => {
        text.inputEl.type = "text";
        text.inputEl.style.fontFamily = "inherit";
      });
      text.inputEl.addEventListener("blur", () => {
        text.inputEl.type = "password";
        text.inputEl.style.fontFamily = "monospace";
      });
      return text;
    }).addToggle((toggle) => {
      toggle.setValue(isProActive).setTooltip(isProActive ? "Disable Pro features" : "Enable Pro features").onChange(async (value) => {
        if (value) {
          const isValid = await this.plugin.getLicenseManager().validateLicenseKey(true, true);
          if (!isValid) {
            toggle.setValue(false);
            showPopup(this.app, "Invalid license key - Pro features disabled");
          }
        } else {
          this.plugin.settings.licenseValid = false;
          await this.plugin.saveSettings();
        }
        this.display();
      });
      if (isProActive) {
        toggle.toggleEl.addClass("mod-cta");
      }
    });
    if (isProActive) {
      const statusSetting = new import_obsidian14.Setting(licenseSettingContainer).setName("Pro Status").setDesc("Active subscription \u2022 Premium features enabled");
      statusSetting.nameEl.createSpan({
        cls: "pro-badge",
        text: "ACTIVE"
      });
      const balanceEl = createSpan({
        cls: "token-balance-value",
        text: "Loading..."
      });
      statusSetting.addExtraButton((button) => {
        button.setIcon("sparkles").setTooltip("Available credits").setDisabled(true);
        statusSetting.controlEl.appendChild(balanceEl);
      });
      this.displayTokenBalance(balanceEl);
    }
    this.displayProPromotionSection(licenseSettingContainer, isProActive);
    const betaNoticeEl = licenseSettingContainer.createEl("div", {
      cls: "systemsculpt-beta-notice"
    });
    const headerContainer = betaNoticeEl.createEl("div", {
      cls: "beta-notice-header"
    });
    new import_obsidian14.Setting(headerContainer).setHeading().setName("Beta Testing Phase").addExtraButton((button) => {
      button.setIcon("rocket").setDisabled(true).extraSettingsEl.addClass("beta-header-icon");
    });
    betaNoticeEl.createEl("p", {
      text: "Thank you for trying out SystemSculpt! While some core features are available to everyone during this beta phase, certain advanced capabilities are currently limited to Patreon members to help manage the testing group size.",
      cls: "beta-notice-text"
    });
    betaNoticeEl.createEl("p", {
      text: "As a solo developer, your feedback is incredibly valuable in shaping SystemSculpt. Feel free to test the available features, and if you'd like access to the full beta experience, consider becoming a Patreon supporter!",
      cls: "beta-notice-text"
    });
    if (!document.getElementById("systemsculpt-beta-styles")) {
      const style = document.createElement("style");
      style.id = "systemsculpt-beta-styles";
      style.textContent = `
        .systemsculpt-beta-notice {
          margin-top: 32px;
          padding: 20px;
          border-radius: 8px;
          border-left: 4px solid var(--interactive-accent);
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .beta-notice-header {
          margin-bottom: 16px;
        }

        .beta-notice-header .setting-item {
          padding: 0;
          border: none;
        }

        .beta-notice-header .setting-item-name {
          font-size: 1.2em;
          font-weight: 600;
          color: var(--text-normal);
        }

        .beta-header-icon {
          color: var(--interactive-accent) !important;
          background: none !important;
          padding: 0 !important;
          margin-right: 8px !important;
        }

        .beta-notice-text {
          margin: 12px 0;
          color: var(--text-normal);
          line-height: 1.6;
          font-size: 0.95em;
        }

        .theme-dark .systemsculpt-beta-notice {
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }
      `;
      containerEl.appendChild(style);
    }
  }
  async displayTokenBalance(containerEl) {
    try {
      const balance = await this.systemSculptService.getTokenBalance();
      containerEl.setText(`Available Credits: ${balance.toLocaleString()}`);
    } catch (error) {
      containerEl.setText("Unable to fetch credit balance");
      console.error("Failed to fetch token balance:", error);
    }
  }
  displayProPromotionSection(containerEl, isProActive) {
    if (!isProActive) {
      const proPromotionEl = containerEl.createEl("div", {
        cls: "systemsculpt-pro-promotion"
      });
      const headerContainer = proPromotionEl.createEl("div", {
        cls: "pro-promotion-header"
      });
      new import_obsidian14.Setting(headerContainer).setHeading().setName("Upgrade to Pro").addExtraButton((button) => {
        button.setIcon("sparkles").setDisabled(true).extraSettingsEl.addClass("pro-header-icon");
      });
      proPromotionEl.createEl("p", {
        text: "Transform your workflow with powerful AI features designed for serious productivity.",
        cls: "pro-promotion-text"
      });
      const benefitsList = proPromotionEl.createEl("ul", {
        cls: "pro-benefits-list"
      });
      [
        "Audio Recording & Instant Transcription",
        "Smart Document Processing",
        "Real-time Voice-to-Text in Notes & Chat",
        "Multi-format Support (PDF, Audio, Images)",
        "AI Templates & Custom Personalities",
        "Priority Access to New Features",
        "1-on-1 Support via Patreon DMs",
        "Support SystemSculpt's Development"
      ].forEach((benefit) => {
        benefitsList.createEl("li", { text: benefit });
      });
      new import_obsidian14.Setting(proPromotionEl).addButton((button) => button.setButtonText("Become a Patron").setCta().onClick(() => {
        window.open(PATREON_URL, "_blank");
      }));
    }
  }
  displayChatTab(containerEl) {
    containerEl.dataset.tab = "chat";
    containerEl.createEl("h3", { text: "Chat Settings" });
    const modelSetting = new import_obsidian14.Setting(containerEl).setName("AI Model").setDesc("Select which AI model to use for chat");
    modelSetting.addButton((button) => button.setButtonText("Select Model").onClick(async () => {
      button.setDisabled(true);
      try {
        const models = await this.systemSculptService.getModels();
        const modal = new ModelSelectionModal(this.app, this.plugin.settings.selectedModelId, async (modelId) => {
          this.plugin.settings.selectedModelId = modelId;
          await this.plugin.saveSettings();
          const modelDisplay = containerEl.querySelector(".systemsculpt-current-model");
          if (modelDisplay) {
            modelDisplay.setText(`Current model: ${modelId}`);
          }
        }, this.plugin);
        modal.open();
      } catch (error) {
        console.error("Error loading models:", error);
        showPopup(this.app, "Failed to load available models");
      } finally {
        button.setDisabled(false);
      }
    }));
    modelSetting.descEl.createEl("div", {
      text: `Current model: ${this.plugin.settings.selectedModelId}`,
      cls: "systemsculpt-current-model"
    });
    new import_obsidian14.Setting(containerEl).setName("Chat System Prompt").setDesc("Customize the system prompt used for all new chats").addButton((button) => {
      button.setButtonText("Edit Prompt").onClick(async () => {
        const result = await showSystemPromptModal(this.app, this.plugin.settings.systemPrompt, {
          onSave: async (newPrompt) => {
            this.plugin.settings.systemPrompt = newPrompt;
            await this.plugin.saveSettings();
          },
          systemPromptsDirectory: this.plugin.settings.systemPromptsDirectory,
          mode: "default",
          customPromptFilePath: this.plugin.settings.systemPromptPath
        });
        if (result == null ? void 0 : result.content) {
          this.plugin.settings.systemPrompt = result.content;
          this.plugin.settings.systemPromptType = result.type;
          if ((result == null ? void 0 : result.type) === "custom" && (result == null ? void 0 : result.path)) {
            this.plugin.settings.systemPromptPath = result.path;
          } else {
            this.plugin.settings.systemPromptPath = "";
          }
          await this.plugin.saveSettings();
        }
      });
      return button;
    });
  }
  displayAdvancedTab(containerEl) {
    containerEl.dataset.tab = "advanced";
    new import_obsidian14.Setting(containerEl).setName("Development Mode").setDesc("Toggle between development and production API endpoints").addToggle((toggle) => toggle.setValue(this.plugin.settings.developmentMode).onChange(async (value) => {
      this.plugin.settings.developmentMode = value;
      this.plugin.settings.serverUrl = value ? "http://localhost:3001" : "https://api.systemsculpt.com";
      await this.plugin.saveSettings();
      new import_obsidian14.Notice(`Switched to ${value ? "development" : "production"} mode (${this.systemSculptService.baseUrl})`);
    }));
    new import_obsidian14.Setting(containerEl).setName("Title Generation").setDesc("Configure how titles should be generated from your content").addButton((button) => {
      button.setButtonText("Edit Prompt").setTooltip("Configure the title generation prompt").onClick(async () => {
        const { showTitleGenerationPromptModal: showTitleGenerationPromptModal2 } = await Promise.resolve().then(() => (init_TitleGenerationPromptModal(), TitleGenerationPromptModal_exports));
        const result = await showTitleGenerationPromptModal2(this.app, this.plugin, this.plugin.settings.titleGenerationPrompt, {
          systemPromptsDirectory: this.plugin.settings.systemPromptsDirectory,
          currentCustomPath: this.plugin.settings.titleGenerationPromptPath
        });
        if (result) {
          this.plugin.settings.titleGenerationPrompt = result.content;
          this.plugin.settings.titleGenerationPromptType = result.type;
          this.plugin.settings.titleGenerationPromptPath = result.path || "";
          await this.plugin.saveSettings();
        }
      });
      return button;
    });
    new import_obsidian14.Setting(containerEl).setName("Reset to Factory Settings").setDesc("Clear all custom settings and restore defaults for this plugin.").addButton((btn) => {
      btn.setButtonText("Reset\u2026").onClick(async () => {
        const confirm = await showPopup(this.app, "Reset to Factory Defaults", {
          description: "This will delete ALL saved settings and customizations for SystemSculpt, returning everything to default. Do you want to continue?",
          primaryButton: "Reset & Reload",
          secondaryButton: "Cancel"
        });
        if (!confirm || !confirm.confirmed) {
          return;
        }
        try {
          await this.plugin.saveData(null);
          await this.plugin.getSettingsManager().updateSettings(DEFAULT_SETTINGS);
          window.location.reload();
        } catch (error) {
          console.error("Error resetting to factory settings:", error);
          showPopup(this.app, "Failed to reset: " + String(error));
        }
      });
    });
  }
  async displayDirectoriesTab(containerEl, isProActive) {
    containerEl.dataset.tab = "directories";
    containerEl.createEl("h3", { text: "Directory Settings" });
    this.createDirectorySetting(containerEl, "Chats Directory", "Select the directory for your chat history", "chatsDirectory", "SystemSculpt/Chats");
    this.createDirectorySetting(containerEl, "Recordings Directory", "Select the directory for your recordings", "recordingsDirectory", "SystemSculpt/Recordings");
    this.createDirectorySetting(containerEl, "System Prompts Directory", "Select the directory for your custom system prompts", "systemPromptsDirectory", "SystemSculpt/System Prompts");
    this.createDirectorySetting(containerEl, "Attachments Directory", "Select the directory for saved images and attachments", "attachmentsDirectory", "SystemSculpt/Attachments");
    this.createDirectorySetting(containerEl, "Extractions Directory", "Select the directory where extracted PDFs/docs will be placed", "extractionsDirectory", "SystemSculpt/Extractions");
    this.createDirectorySetting(containerEl, "Tasks Directory", "Select the directory for your task lists", "tasksDirectory", "SystemSculpt/Tasks");
  }
  createDirectorySetting(containerEl, name, desc, settingKey, placeholder) {
    new import_obsidian14.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
      text.setPlaceholder(placeholder).setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
        await this.handleDirectoryChange(value, settingKey);
      });
      attachFolderSuggester(text.inputEl, async (selectedPath) => {
        if (this.validateDirectory(selectedPath)) {
          this.plugin.settings[settingKey] = selectedPath;
          text.setValue(selectedPath);
          await this.plugin.saveSettings();
        } else {
          showPopup(this.app, "Invalid directory path. Please use relative paths without '..' or leading slashes.");
        }
      }, this.app);
      return text;
    });
  }
  displayRecorderTab(containerEl) {
    containerEl.dataset.tab = "recorder";
    containerEl.createEl("h3", { text: "Recording Settings" });
    const microphoneSetting = new import_obsidian14.Setting(containerEl).setName("Preferred Microphone").setDesc("Select your preferred microphone for recordings");
    const micSelect = microphoneSetting.controlEl.createEl("select", {
      cls: "systemsculpt-microphone-select"
    });
    micSelect.createEl("option", {
      value: "",
      text: "Loading microphones..."
    }).setAttribute("disabled", "true");
    micSelect.disabled = true;
    try {
      navigator.mediaDevices.enumerateDevices().then((devices) => {
        var _a;
        const microphones = devices.filter((device) => device.kind === "audioinput");
        micSelect.disabled = false;
        (_a = micSelect.firstElementChild) == null ? void 0 : _a.remove();
        microphones.forEach((mic) => {
          const option = micSelect.createEl("option", {
            value: mic.deviceId,
            text: mic.label || `Microphone ${mic.deviceId.slice(0, 8)}...`
          });
          if (mic.deviceId === this.plugin.settings.preferredMicrophoneId) {
            option.selected = true;
          }
        });
      }).catch((error) => {
        console.error("Error enumerating audio devices:", error);
        micSelect.createEl("option", {
          value: "",
          text: "Unable to list microphones"
        });
      });
    } catch (error) {
      console.error("Microphone initialization failed:", error);
    }
    micSelect.addEventListener("change", async () => {
      this.plugin.settings.preferredMicrophoneId = micSelect.value;
      await this.plugin.saveSettings();
    });
    new import_obsidian14.Setting(containerEl).setName("Auto-Transcribe Recordings").setDesc("Automatically transcribe recordings when they are completed").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoTranscribeRecordings).onChange(async (value) => {
      this.plugin.settings.autoTranscribeRecordings = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian14.Setting(containerEl).setName("Auto-Paste Transcription").setDesc("Automatically paste transcriptions into the active document").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoPasteTranscription).onChange(async (value) => {
      this.plugin.settings.autoPasteTranscription = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian14.Setting(containerEl).setName("Post-Processing").setDesc("Configure how transcriptions should be post-processed").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.postProcessingEnabled).setTooltip("Enable/disable post-processing").onChange(async (value) => {
        this.plugin.settings.postProcessingEnabled = value;
        await this.plugin.saveSettings();
      });
      return toggle;
    }).addButton((button) => {
      button.setButtonText("Edit Prompt").setTooltip("Configure the post-processing prompt").onClick(async () => {
        const { showPostProcessingPromptModal: showPostProcessingPromptModal2 } = await Promise.resolve().then(() => (init_PostProcessingPromptModal(), PostProcessingPromptModal_exports));
        const result = await showPostProcessingPromptModal2(this.app, this.plugin, this.plugin.settings.postProcessingPrompt);
        if (result) {
          this.plugin.settings.postProcessingPrompt = result.content;
          await this.plugin.saveSettings();
        }
      });
      return button;
    });
  }
  displayTasksTab(containerEl) {
    containerEl.dataset.tab = "tasks";
    containerEl.createEl("h3", { text: "Tasks Settings" });
    new import_obsidian14.Setting(containerEl).setName("Auto-Move Completed Tasks").setDesc("Automatically move completed tasks to the bottom of the list").addToggle((toggle) => toggle.setValue(this.plugin.settings.moveCompletedTasksDown).onChange(async (value) => {
      this.plugin.settings.moveCompletedTasksDown = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/services/RecorderService.ts
var import_obsidian29 = __toModule(require("obsidian"));

// src/modals/AudioTranscriptionModal.ts
var import_obsidian15 = __toModule(require("obsidian"));

// src/services/TranscriptionService.ts
init_SystemSculptService();
var SUPPORTED_AUDIO_EXTENSIONS = ["wav", "m4a", "webm", "ogg", "mp3"];
var MIME_TYPE_MAP = {
  wav: "audio/wav",
  m4a: "audio/mp4",
  webm: "audio/webm",
  ogg: "audio/ogg;codecs=opus",
  mp3: "audio/mpeg"
};
var TranscriptionService = class {
  constructor(plugin) {
    this.isTranscribing = false;
    this.plugin = plugin;
    this.sculptService = SystemSculptService.getInstance(plugin.settings, plugin.app);
  }
  static getInstance(plugin) {
    if (!TranscriptionService.instance) {
      TranscriptionService.instance = new TranscriptionService(plugin);
    }
    return TranscriptionService.instance;
  }
  async parseErrorResponse(response) {
    try {
      const data = await response.json();
      if (data.error) {
        if (typeof data.error === "string") {
          return { message: data.error, data };
        }
        if (data.error.message) {
          return { message: data.error.message, data };
        }
        return { message: JSON.stringify(data.error), data };
      }
      return { message: response.statusText, data };
    } catch (e) {
      return { message: response.statusText };
    }
  }
  async transcribeFile(file, context) {
    var _a, _b, _c, _d;
    console.log("TranscriptionService.transcribeFile called with:", {
      fileName: file.name,
      context
    });
    if (this.isTranscribing) {
      throw new Error("Already transcribing a file");
    }
    const extension = file.extension.toLowerCase();
    if (!SUPPORTED_AUDIO_EXTENSIONS.includes(extension)) {
      throw new Error(`Unsupported file type: ${extension}`);
    }
    this.isTranscribing = true;
    (_a = context == null ? void 0 : context.onProgress) == null ? void 0 : _a.call(context, 0, "Reading audio file...");
    const arrayBuffer = await this.plugin.app.vault.readBinary(file);
    const blob = new Blob([arrayBuffer], {
      type: MIME_TYPE_MAP[extension]
    });
    const formData = new FormData();
    formData.append("file", blob, file.name);
    if (context == null ? void 0 : context.timestamped) {
      formData.append("timestamped", "true");
    }
    try {
      (_b = context == null ? void 0 : context.onProgress) == null ? void 0 : _b.call(context, 20, "Uploading audio...");
      const response = await fetch(`${this.sculptService.baseUrl}/api/v1/audio/transcriptions`, {
        method: "POST",
        headers: {
          "x-license-key": this.plugin.settings.licenseKey
        },
        body: formData
      });
      console.log("Raw server response:", {
        status: response.status,
        ok: response.ok,
        contentType: response.headers.get("content-type")
      });
      let data;
      if (!response.ok) {
        const { message: errorMessage, data: parsedData } = await this.parseErrorResponse(response);
        console.log("Error response parsed:", { errorMessage, parsedData });
        if (response.status === 400 && errorMessage === "Credits charged successfully") {
          console.log("Credits charged successfully, continuing with transcription...");
          data = parsedData;
        } else {
          throw new Error(`Failed to transcribe file: ${response.status} - ${errorMessage}`);
        }
      } else {
        const responseText = await response.text();
        console.log("Raw response text:", responseText);
        try {
          data = JSON.parse(responseText);
          console.log("Parsed response data:", data);
        } catch (e) {
          console.error("Failed to parse response JSON:", e);
          throw new Error("Invalid JSON response from server");
        }
      }
      (_c = context == null ? void 0 : context.onProgress) == null ? void 0 : _c.call(context, 60, "Processing audio...");
      console.log("Final data object:", {
        hasData: !!data,
        dataType: typeof data,
        keys: data ? Object.keys(data) : null,
        textType: (data == null ? void 0 : data.text) ? typeof data.text : null,
        textLength: (data == null ? void 0 : data.text) ? data.text.length : null,
        textPreview: (data == null ? void 0 : data.text) ? data.text.substring(0, 100) + "..." : null
      });
      if (!data || typeof data.text !== "string") {
        console.error("Invalid response data:", data);
        throw new Error("No transcription text received from server");
      }
      const trimmedText = data.text.trim();
      console.log("Trimmed text:", {
        length: trimmedText.length,
        preview: trimmedText.substring(0, 100) + "..."
      });
      if (!trimmedText) {
        console.error("Empty transcription text after trimming:", data);
        throw new Error("Empty transcription text received from server");
      }
      (_d = context == null ? void 0 : context.onProgress) == null ? void 0 : _d.call(context, 100, "Transcription complete!");
      return trimmedText;
    } catch (error) {
      console.error("Transcription error:", error);
      throw error;
    } finally {
      this.isTranscribing = false;
    }
  }
  unload() {
  }
};

// src/services/PostProcessingService.ts
init_SystemSculptService();
var PostProcessingService = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.defaultModelId = null;
    this.sculptService = SystemSculptService.getInstance(plugin.settings, plugin.app);
  }
  static getInstance(plugin) {
    if (!PostProcessingService.instance) {
      PostProcessingService.instance = new PostProcessingService(plugin);
    }
    return PostProcessingService.instance;
  }
  async findDefaultModel() {
    if (this.defaultModelId)
      return this.defaultModelId;
    try {
      const models = await this.sculptService.getModels();
      const defaultModel = models.find((model) => {
        var _a;
        return (_a = model.name) == null ? void 0 : _a.match(/\(Default\)/i);
      });
      if (!defaultModel) {
        throw new Error("Default model not found");
      }
      this.defaultModelId = defaultModel.id;
      return defaultModel.id;
    } catch (error) {
      console.error("Error finding default model:", error);
      throw error;
    }
  }
  async processTranscription(text) {
    if (!this.plugin.settings.postProcessingEnabled) {
      return text;
    }
    try {
      const modelId = await this.findDefaultModel();
      const messages = [
        {
          role: "system",
          content: this.plugin.settings.postProcessingPrompt,
          message_id: crypto.randomUUID()
        },
        {
          role: "user",
          content: text,
          message_id: crypto.randomUUID()
        }
      ];
      let processedText = "";
      for await (const chunk of this.sculptService.streamMessage({
        messages,
        model: modelId,
        temperature: 0.3
      })) {
        if (chunk.content) {
          processedText += chunk.content;
        }
      }
      return processedText.trim();
    } catch (error) {
      console.error("Error post-processing transcription:", error);
      return text;
    }
  }
};

// src/modals/AudioTranscriptionModal.ts
var PersistentTranscriptionNotice = class extends import_obsidian15.Notice {
  constructor() {
    super("", 0);
    this.noticeEl.addClass("systemsculpt-transcription-notice");
    const progressContainer = this.noticeEl.createDiv("transcription-progress");
    const statusContainer = progressContainer.createDiv("transcription-status");
    this.statusIcon = statusContainer.createDiv("transcription-status-icon");
    this.statusText = statusContainer.createDiv("transcription-status-text");
    const progressBarContainer = progressContainer.createDiv("transcription-progress-bar-container");
    this.progressBar = progressBarContainer.createDiv("transcription-progress-bar");
    if (!document.getElementById("systemsculpt-transcription-notice-styles")) {
      const style = document.createElement("style");
      style.id = "systemsculpt-transcription-notice-styles";
      style.textContent = `
        .systemsculpt-transcription-notice {
          padding: 8px 12px !important;
          min-width: 260px;
        }

        .transcription-progress {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }

        .transcription-status {
          display: flex;
          align-items: center;
          gap: 8px;
          color: var(--text-normal);
        }

        .transcription-status-icon {
          display: flex;
          align-items: center;
          justify-content: center;
          color: var(--text-accent);
        }

        .transcription-status-text {
          flex: 1;
          font-size: 14px;
        }

        .transcription-progress-bar-container {
          width: 100%;
          height: 4px;
          background: var(--background-modifier-border);
          border-radius: 2px;
          overflow: hidden;
        }

        .transcription-progress-bar {
          height: 100%;
          background: var(--text-accent);
          border-radius: 2px;
          transition: width 0.3s ease;
          width: 0%;
        }

        .notice-success .transcription-progress-bar {
          background: var(--text-success) !important;
        }

        .notice-error .transcription-progress-bar {
          background: var(--text-error) !important;
        }
      `;
      document.head.appendChild(style);
    }
  }
  updateProgress({ progress, status, icon }) {
    this.progressBar.style.width = `${progress}%`;
    this.statusText.setText(status);
    this.statusIcon.empty();
    (0, import_obsidian15.setIcon)(this.statusIcon, icon);
    this.noticeEl.removeClass("notice-success", "notice-error");
    if (progress === 100) {
      this.noticeEl.addClass("notice-success");
    } else if (progress === 0 && icon === "x-circle") {
      this.noticeEl.addClass("notice-error");
    }
  }
};
var AudioTranscriptionModal = class {
  constructor(app, options) {
    this.options = options;
    this.transcriptionService = TranscriptionService.getInstance(options.plugin);
    this.postProcessingService = PostProcessingService.getInstance(options.plugin);
  }
  open() {
    this.notice = new PersistentTranscriptionNotice();
    this.startTranscription();
  }
  async startTranscription() {
    try {
      this.notice.updateProgress({
        progress: 0,
        status: "Starting transcription...",
        icon: "mic"
      });
      const text = await this.transcriptionService.transcribeFile(this.options.file, {
        type: this.options.isChat ? "chat" : "note",
        timestamped: this.options.timestamped,
        onProgress: (progress, status) => {
          this.notice.updateProgress({
            progress,
            status,
            icon: "audio-lines"
          });
        }
      });
      if (!text) {
        throw new Error("Failed to get transcription text");
      }
      let finalText = text;
      if (!this.options.isChat && this.options.plugin.settings.postProcessingEnabled) {
        this.notice.updateProgress({
          progress: 80,
          status: "Post-processing transcription...",
          icon: "wand"
        });
        const processedText = await this.postProcessingService.processTranscription(text);
        finalText = `# Audio Transcription
Source: ${this.options.file.basename}
Transcribed: ${new Date().toISOString()}

## Raw Transcription
${text}

## Processed Transcription
${processedText}`;
      } else {
        finalText = this.options.isChat ? text : `# Audio Transcription
Source: ${this.options.file.basename}
Transcribed: ${new Date().toISOString()}

## Raw Transcription
${text}`;
      }
      if (this.options.onTranscriptionComplete) {
        this.options.onTranscriptionComplete(finalText);
      }
      await navigator.clipboard.writeText(finalText);
      this.notice.updateProgress({
        progress: 100,
        status: "Transcription complete!",
        icon: "check-circle"
      });
      setTimeout(() => {
        this.notice.hide();
      }, 2e3);
    } catch (error) {
      console.error("Transcription error:", error);
      this.notice.updateProgress({
        progress: 0,
        status: `Error: ${error instanceof Error ? error.message : String(error)}`,
        icon: "x-circle"
      });
      setTimeout(() => {
        this.notice.hide();
      }, 4e3);
    }
  }
};
async function showAudioTranscriptionModal(app, options) {
  const modal = new AudioTranscriptionModal(app, options);
  modal.open();
}

// src/views/ChatView.ts
var import_obsidian28 = __toModule(require("obsidian"));
init_SystemSculptService();

// src/services/ChatStorageService.ts
var import_obsidian16 = __toModule(require("obsidian"));
var ChatStorageService = class {
  constructor(app, chatDirectory) {
    this.app = app;
    this.chatDirectory = chatDirectory;
  }
  async saveChat(chatId, messages, selectedModelId, contextFiles, customPromptFilePath, systemPromptType, systemPromptPath, title, tokenLimit, tokenLimitPercentage) {
    try {
      const filePath = `${this.chatDirectory}/${chatId}.md`;
      const contextFileObjects = contextFiles ? Array.from(contextFiles).map((path) => {
        const isExtraction = path.includes("/Extractions/");
        return {
          path,
          type: isExtraction ? "extraction" : "source"
        };
      }) : [];
      const metadata = {
        id: chatId,
        model: selectedModelId,
        created: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        title: title || chatId,
        context_files: contextFileObjects,
        systemMessage: systemPromptType ? {
          type: systemPromptType,
          path: systemPromptType === "custom" && systemPromptPath ? `[[${systemPromptPath}]]` : void 0,
          tokenLimit,
          tokenLimitPercentage
        } : void 0
      };
      const content = `---
${(0, import_obsidian16.stringifyYaml)(metadata)}---

${messages.map((msg) => {
        const messageStart = `<!-- SYSTEMSCULPT-MESSAGE-START role="${msg.role}" message-id="${msg.message_id}" -->`;
        return `${messageStart}
${msg.content}
<!-- SYSTEMSCULPT-MESSAGE-END -->`;
      }).join("\n\n")}`;
      await this.app.vault.adapter.mkdir(this.chatDirectory);
      await this.app.vault.adapter.write(filePath, content);
    } catch (error) {
      console.error("Failed to save chat:", error);
      throw new Error("Failed to save chat");
    }
  }
  async loadChats() {
    try {
      const files = await this.app.vault.adapter.list(this.chatDirectory);
      const chatFiles = files.files.filter((f) => f.endsWith(".md"));
      const chats = await Promise.all(chatFiles.map(async (filePath) => {
        const content = await this.app.vault.adapter.read(filePath);
        return this.parseMarkdownContent(content);
      }));
      return chats.filter((chat) => chat !== null);
    } catch (error) {
      console.error("Failed to load chats:", error);
      return [];
    }
  }
  async loadChat(chatId) {
    try {
      const filePath = `${this.chatDirectory}/${chatId}.md`;
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!(file instanceof import_obsidian16.TFile)) {
        return null;
      }
      const content = await this.app.vault.read(file);
      return this.parseMarkdownContent(content);
    } catch (error) {
      console.error("Failed to load chat:", error);
      return null;
    }
  }
  generateMarkdownContent(metadata, messages) {
    const yamlMetadata = {
      systemsculpt_chat: true,
      ...metadata
    };
    const metadataSection = [
      "---",
      (0, import_obsidian16.stringifyYaml)(yamlMetadata).trim(),
      "---",
      ""
    ].join("\n");
    const messagesSection = messages.map((msg) => [
      `<!-- SYSTEMSCULPT-MESSAGE-START role="${msg.role}" message-id="${msg.message_id}" -->`,
      msg.content,
      "<!-- SYSTEMSCULPT-MESSAGE-END -->",
      ""
    ].join("\n")).join("\n");
    return metadataSection + messagesSection;
  }
  parseMetadata(content) {
    try {
      const metadataMatch = content.match(/---\n([\s\S]*?)\n---/);
      if (!metadataMatch)
        return null;
      const parsed = (0, import_obsidian16.parseYaml)(metadataMatch[1]);
      if (!parsed || typeof parsed !== "object")
        return null;
      const {
        id,
        model,
        created,
        lastModified,
        title,
        context_files,
        systemMessage
      } = parsed;
      if (!id || !model || !created || !lastModified)
        return null;
      const processedContextFiles = context_files == null ? void 0 : context_files.map((file) => {
        if (typeof file === "string") {
          const isExtraction = file.includes("/Extractions/");
          return {
            path: file,
            type: isExtraction ? "extraction" : "source"
          };
        }
        return {
          path: file.path,
          type: file.type
        };
      });
      if (systemMessage == null ? void 0 : systemMessage.path) {
        systemMessage.path = systemMessage.path.replace(/^\[\[(.*?)\]\]$/, "$1");
      }
      return {
        id,
        model,
        created,
        lastModified,
        title: title || id,
        context_files: processedContextFiles || [],
        systemMessage
      };
    } catch (error) {
      console.error("Failed to parse metadata:", error);
      return null;
    }
  }
  async parseMarkdownContent(content) {
    var _a, _b, _c;
    try {
      const metadata = this.parseMetadata(content);
      if (!metadata)
        return null;
      const messages = [];
      const messageRegex = /<!-- SYSTEMSCULPT-MESSAGE-START role="(user|assistant)" message-id="([^"]+)" -->\n([\s\S]*?)\n<!-- SYSTEMSCULPT-MESSAGE-END -->/g;
      let msgMatch;
      while ((msgMatch = messageRegex.exec(content)) !== null) {
        const [, role, messageId, messageContent] = msgMatch;
        messages.push({
          role,
          content: messageContent.trim(),
          message_id: messageId
        });
      }
      const contextFiles = (_a = metadata.context_files) == null ? void 0 : _a.map((file) => typeof file === "string" ? file : file.path);
      return {
        id: metadata.id,
        messages,
        selectedModelId: metadata.model,
        lastModified: new Date(metadata.lastModified).getTime(),
        title: metadata.title,
        context_files: contextFiles,
        customPromptFilePath: (_b = metadata.systemMessage) == null ? void 0 : _b.path,
        tokenLimit: (_c = metadata.systemMessage) == null ? void 0 : _c.tokenLimit
      };
    } catch (error) {
      console.error("Failed to parse markdown content:", error);
      return null;
    }
  }
  generateMessageId() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  async getMetadata(chatId) {
    try {
      const filePath = `${this.chatDirectory}/${chatId}.md`;
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!(file instanceof import_obsidian16.TFile)) {
        return null;
      }
      const content = await this.app.vault.read(file);
      return this.parseMetadata(content);
    } catch (error) {
      console.error("Failed to get metadata:", error);
      return null;
    }
  }
};

// src/services/ScrollManagerService.ts
var import_obsidian17 = __toModule(require("obsidian"));
var ScrollManagerService = class {
  constructor(config) {
    this.state = {
      isAutoScrollEnabled: true,
      isUserScrolling: false,
      lastContentHeight: 0
    };
    this.handleScroll = (0, import_obsidian17.debounce)(() => {
      const isAtBottom = this.isScrolledToBottom();
      if (isAtBottom && !this.state.isAutoScrollEnabled) {
        this.enableAutoScroll();
      } else if (!isAtBottom && this.state.isAutoScrollEnabled) {
        this.disableAutoScroll();
      }
    }, 150);
    this.handleWheel = (e) => {
      if (e.deltaY < 0) {
        this.disableAutoScroll();
      }
    };
    this.handleTouchStart = () => {
      this.state.isUserScrolling = true;
    };
    this.handleTouchEnd = () => {
      this.state.isUserScrolling = false;
      if (this.isScrolledToBottom()) {
        this.enableAutoScroll();
      }
    };
    this.container = config.container;
    this.onScrollStateChange = config.onScrollStateChange;
    this.attachEventListeners();
  }
  attachEventListeners() {
    this.container.addEventListener("scroll", this.handleScroll);
    this.container.addEventListener("wheel", this.handleWheel);
    this.container.addEventListener("touchstart", this.handleTouchStart);
    this.container.addEventListener("touchend", this.handleTouchEnd);
  }
  isScrolledToBottom() {
    const { scrollHeight, scrollTop, clientHeight } = this.container;
    return Math.abs(scrollHeight - scrollTop - clientHeight) < 10;
  }
  scrollToBottom() {
    if (!this.state.isAutoScrollEnabled)
      return;
    void this.container.offsetHeight;
    requestAnimationFrame(() => {
      this.container.scrollTo({
        top: this.container.scrollHeight,
        behavior: this.state.isUserScrolling ? "smooth" : "auto"
      });
      this.state.lastContentHeight = this.container.scrollHeight;
    });
  }
  enableAutoScroll() {
    var _a;
    this.state.isAutoScrollEnabled = true;
    this.state.isUserScrolling = false;
    this.state.lastContentHeight = this.container.scrollHeight;
    this.scrollToBottom();
    (_a = this.onScrollStateChange) == null ? void 0 : _a.call(this, true);
  }
  disableAutoScroll() {
    var _a;
    this.state.isAutoScrollEnabled = false;
    (_a = this.onScrollStateChange) == null ? void 0 : _a.call(this, false);
  }
  updateContentHeight() {
    void this.container.offsetHeight;
    requestAnimationFrame(() => {
      const currentHeight = this.container.scrollHeight;
      if (currentHeight !== this.state.lastContentHeight) {
        this.state.lastContentHeight = currentHeight;
        if (!this.container.scrollTop || this.isScrolledToBottom()) {
          this.scrollToBottom();
        }
      }
    });
  }
  cleanup() {
    this.container.removeEventListener("scroll", this.handleScroll);
    this.container.removeEventListener("wheel", this.handleWheel);
    this.container.removeEventListener("touchstart", this.handleTouchStart);
    this.container.removeEventListener("touchend", this.handleTouchEnd);
  }
};

// src/views/ChatView.ts
init_ui();
init_errors();

// src/views/components/DrawerComponent.ts
var import_obsidian18 = __toModule(require("obsidian"));
var DrawerComponent = class extends import_obsidian18.Component {
  constructor(options) {
    super();
    this.isMouseInProximity = false;
    this.hideTimeout = null;
    this.options = options;
    this.initializeDrawer();
    this.setupEventListeners();
  }
  initializeDrawer() {
    this.drawer = this.options.container.createEl("div", {
      cls: `systemsculpt-drawer ${this.options.cls || ""}`
    });
    this.header = this.drawer.createEl("div", {
      cls: "systemsculpt-drawer-header"
    });
    const titleEl = this.header.createEl("div", {
      cls: "systemsculpt-drawer-title"
    });
    titleEl.createSpan({ text: this.options.title });
    this.toggle = this.header.createSpan({
      cls: "systemsculpt-drawer-toggle",
      text: "\u25BC"
    });
    this.content = this.drawer.createEl("div", {
      cls: "systemsculpt-drawer-content"
    });
    this.setVisibility(false);
  }
  setupEventListeners() {
    this.drawer.addEventListener("mouseenter", () => {
      this.isMouseInProximity = true;
      this.clearHideTimeout();
      this.setVisibility(true);
    });
    this.content.addEventListener("mouseenter", () => {
      this.isMouseInProximity = true;
      this.clearHideTimeout();
      this.setVisibility(true);
    });
    this.drawer.addEventListener("mouseleave", (e) => {
      const rect = this.drawer.getBoundingClientRect();
      const buffer = 25;
      if (e.clientY >= rect.bottom && e.clientY <= rect.bottom + buffer && e.clientX >= rect.left && e.clientX <= rect.right) {
        return;
      }
      this.isMouseInProximity = false;
      this.scheduleHide();
    });
    this.content.addEventListener("mouseleave", (e) => {
      const rect = this.content.getBoundingClientRect();
      const buffer = 25;
      if (e.clientY <= rect.top && e.clientY >= rect.top - buffer && e.clientX >= rect.left && e.clientX <= rect.right) {
        return;
      }
      this.isMouseInProximity = false;
      this.scheduleHide();
    });
    this.header.addEventListener("click", () => {
      const isVisible = this.content.style.opacity === "1";
      this.setVisibility(!isVisible);
    });
  }
  clearHideTimeout() {
    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }
  }
  scheduleHide() {
    this.clearHideTimeout();
    this.hideTimeout = setTimeout(() => {
      if (!this.isMouseInProximity) {
        this.setVisibility(false);
      }
    }, 100);
  }
  setVisibility(visible) {
    this.content.style.opacity = visible ? "1" : "0";
    this.content.style.pointerEvents = visible ? "all" : "none";
    this.content.style.transform = `translateY(${visible ? "0" : "-8px"})`;
    this.toggle.style.transform = visible ? "rotate(0)" : "rotate(-90deg)";
    if (this.options.onVisibilityChange) {
      this.options.onVisibilityChange(visible);
    }
  }
  getContent() {
    return this.content;
  }
  getDrawer() {
    return this.drawer;
  }
  getHeader() {
    return this.header;
  }
  onunload() {
    this.clearHideTimeout();
    super.onunload();
  }
};

// src/views/components/MessageRenderer.ts
var import_obsidian19 = __toModule(require("obsidian"));
init_ui();
var MessageRenderer = class extends import_obsidian19.Component {
  constructor(app) {
    super();
    this.app = app;
  }
  async renderMessage({
    app,
    messageId,
    role,
    content
  }) {
    const messageEl = document.createElement("div");
    messageEl.classList.add("systemsculpt-message");
    messageEl.classList.add(`systemsculpt-${role}-message`);
    messageEl.dataset.messageId = messageId;
    const contentEl = messageEl.createEl("div", {
      cls: "systemsculpt-message-content"
    });
    if (typeof content === "string") {
      await import_obsidian19.MarkdownRenderer.renderMarkdown(content, contentEl, "", this);
    } else if (Array.isArray(content)) {
      const parts = content;
      for (const part of parts) {
        if (part.type === "text") {
          const p = contentEl.createEl("p");
          p.setText(part.text);
        } else if (part.type === "image_url") {
          const img = contentEl.createEl("img", {
            attr: { src: part.image_url.url }
          });
          img.classList.add("systemsculpt-message-image");
        }
      }
    } else {
      await import_obsidian19.MarkdownRenderer.renderMarkdown(String(content), contentEl, "", this);
    }
    this.setupImageHandlers(contentEl);
    return { messageEl, contentEl };
  }
  async renderMarkdownContent(content, containerEl) {
    containerEl.empty();
    const markdownWrapper = containerEl.createEl("div", {
      cls: "systemsculpt-markdown-wrapper"
    });
    const normalizedContent = content.replace(/\n{3,}/g, "\n\n");
    await import_obsidian19.MarkdownRenderer.renderMarkdown(normalizedContent, markdownWrapper, "", this);
    markdownWrapper.querySelectorAll("pre").forEach((preEl) => {
      var _a;
      const codeBlockWrapper = createEl("div", {
        cls: "systemsculpt-code-block-wrapper"
      });
      (_a = preEl.parentNode) == null ? void 0 : _a.replaceChild(codeBlockWrapper, preEl);
      codeBlockWrapper.appendChild(preEl);
    });
  }
  setupImageHandlers(containerEl) {
    containerEl.querySelectorAll("img").forEach((img) => {
      img.style.cursor = "pointer";
      img.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        const src = img.getAttribute("src");
        if (!src)
          return;
        if (src.startsWith("app://")) {
          const path = src.replace("app://local/", "");
          this.app.workspace.openLinkText(path, "", true);
        }
      });
    });
  }
  setToolbarVisibility(toolbar, visible, expanded = false) {
    toolbar.style.opacity = visible ? "1" : "0";
    toolbar.style.pointerEvents = visible ? "all" : "none";
    toolbar.style.transform = `translateY(calc(100% + ${expanded ? "4" : "8"}px))`;
  }
  addMessageButtonToolbar(messageEl, content, role, messageId) {
    const buttonToolbar = messageEl.createEl("div", {
      cls: "systemsculpt-message-button-toolbar"
    });
    const copyButton = buttonToolbar.createEl("button", {
      cls: "systemsculpt-message-button"
    });
    copyButton.setAttribute("title", "Copy message to clipboard");
    (0, import_obsidian19.setIcon)(copyButton, "copy");
    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(content);
      (0, import_obsidian19.setIcon)(copyButton, "check");
      copyButton.classList.add("success");
      setTimeout(() => {
        (0, import_obsidian19.setIcon)(copyButton, "copy");
        copyButton.classList.remove("success");
        this.setToolbarVisibility(buttonToolbar, false);
      }, 2e3);
    });
    if (role === "user") {
      const resubmitButton = buttonToolbar.createEl("button", {
        cls: "systemsculpt-message-button"
      });
      resubmitButton.setAttribute("title", "Resubmit this message");
      (0, import_obsidian19.setIcon)(resubmitButton, "rotate-ccw");
      resubmitButton.dataset.originalIcon = "rotate-ccw";
      resubmitButton.addEventListener("click", async (e) => {
        e.stopPropagation();
        const isConfirming = resubmitButton.dataset.confirming === "true";
        if (!isConfirming) {
          resubmitButton.dataset.confirming = "true";
          resubmitButton.empty();
          resubmitButton.createEl("span", { text: "Resubmit?" });
          resubmitButton.classList.add("confirming", "success");
          const timeoutId = setTimeout(() => {
            resubmitButton.empty();
            const originalIcon = resubmitButton.dataset.originalIcon || "rotate-ccw";
            (0, import_obsidian19.setIcon)(resubmitButton, originalIcon);
            resubmitButton.classList.remove("confirming", "success");
            resubmitButton.dataset.confirming = "false";
          }, 3e3);
          resubmitButton.dataset.timeoutId = timeoutId.toString();
        } else {
          const timeoutId = resubmitButton.dataset.timeoutId;
          if (timeoutId) {
            clearTimeout(parseInt(timeoutId));
          }
          resubmitButton.empty();
          resubmitButton.createEl("span", { text: "Resubmitting..." });
          messageEl.dispatchEvent(new CustomEvent("resubmit", {
            bubbles: true,
            detail: { messageId, content }
          }));
          setTimeout(() => {
            resubmitButton.empty();
            const originalIcon = resubmitButton.dataset.originalIcon || "rotate-ccw";
            (0, import_obsidian19.setIcon)(resubmitButton, originalIcon);
            resubmitButton.classList.remove("confirming", "success");
            resubmitButton.dataset.confirming = "false";
          }, 1e3);
        }
      });
    }
    const editButton = buttonToolbar.createEl("button", {
      cls: "systemsculpt-message-button"
    });
    editButton.setAttribute("title", "Edit this message");
    (0, import_obsidian19.setIcon)(editButton, "pencil");
    editButton.dataset.originalIcon = "pencil";
    editButton.addEventListener("click", async (e) => {
      e.stopPropagation();
      const currentContent = messageEl.dataset.content || content;
      const modal = new TextAreaModal(this.app, "Edit Message", currentContent, {
        primaryButton: "Save",
        secondaryButton: "Cancel",
        rows: 10
      });
      const newText = await modal.openAndGetValue();
      if (newText !== null && newText !== currentContent) {
        messageEl.dispatchEvent(new CustomEvent("edit", {
          bubbles: true,
          detail: {
            messageId,
            oldContent: currentContent,
            newContent: newText
          }
        }));
      }
    });
    const deleteButton = buttonToolbar.createEl("button", {
      cls: "systemsculpt-message-button danger"
    });
    deleteButton.setAttribute("title", "Delete this message");
    (0, import_obsidian19.setIcon)(deleteButton, "trash");
    deleteButton.dataset.originalIcon = "trash";
    deleteButton.addEventListener("click", async (e) => {
      e.stopPropagation();
      const isConfirming = deleteButton.dataset.confirming === "true";
      if (!isConfirming) {
        deleteButton.dataset.confirming = "true";
        deleteButton.empty();
        deleteButton.createEl("span", { text: "Delete?" });
        deleteButton.classList.add("confirming");
        const timeoutId = setTimeout(() => {
          deleteButton.empty();
          const originalIcon = deleteButton.dataset.originalIcon || "trash";
          (0, import_obsidian19.setIcon)(deleteButton, originalIcon);
          deleteButton.classList.remove("confirming");
          deleteButton.dataset.confirming = "false";
        }, 3e3);
        deleteButton.dataset.timeoutId = timeoutId.toString();
      } else {
        const timeoutId = deleteButton.dataset.timeoutId;
        if (timeoutId) {
          clearTimeout(parseInt(timeoutId));
        }
        deleteButton.empty();
        deleteButton.createEl("span", { text: "Deleting..." });
        messageEl.dispatchEvent(new CustomEvent("delete", {
          bubbles: true,
          detail: { messageId }
        }));
        setTimeout(() => {
          deleteButton.empty();
          const originalIcon = deleteButton.dataset.originalIcon || "trash";
          (0, import_obsidian19.setIcon)(deleteButton, originalIcon);
          deleteButton.classList.remove("confirming");
          deleteButton.dataset.confirming = "false";
        }, 1e3);
      }
    });
    messageEl.addEventListener("mouseenter", () => {
      this.setToolbarVisibility(buttonToolbar, true, true);
    });
    messageEl.addEventListener("mouseleave", (e) => {
      if (!e.relatedTarget || !buttonToolbar.contains(e.relatedTarget)) {
        this.setToolbarVisibility(buttonToolbar, false);
      }
    });
    buttonToolbar.addEventListener("mouseleave", (e) => {
      if (!e.relatedTarget || !messageEl.contains(e.relatedTarget)) {
        this.setToolbarVisibility(buttonToolbar, false);
      }
    });
  }
  createReasoningContainer(messageEl) {
    const container = messageEl.createEl("div", {
      cls: "systemsculpt-reasoning-container"
    });
    const header = container.createEl("div", {
      cls: "systemsculpt-reasoning-header"
    });
    (0, import_obsidian19.setIcon)(header, "brain");
    header.createSpan({ text: "Reasoning" });
    header.addEventListener("click", () => {
      container.classList.toggle("collapsed");
    });
    const content = container.createEl("div", {
      cls: "systemsculpt-reasoning-content"
    });
    return { container, content };
  }
  updateReasoningContent(messageEl, reasoning, isComplete = false) {
    let container = messageEl.querySelector(".systemsculpt-reasoning-container");
    let content = messageEl.querySelector(".systemsculpt-reasoning-content");
    if (!container || !content) {
      const elements = this.createReasoningContainer(messageEl);
      container = elements.container;
      content = elements.content;
      messageEl.prepend(container);
    }
    content.textContent = reasoning;
    container.classList.add("visible");
    if (isComplete) {
      container.classList.add("collapsed");
    }
  }
};

// src/views/components/InputHandler.ts
var import_obsidian20 = __toModule(require("obsidian"));
init_errors();
init_ui();
init_ImageProcessor();
var InputHandler = class extends import_obsidian20.Component {
  constructor(options) {
    super();
    this.isGenerating = false;
    this.renderTimeout = null;
    this.recorderVisualizer = null;
    this.isRecording = false;
    this.abortController = null;
    this.stopButton = null;
    this.webSearchEnabled = false;
    this.app = options.app;
    this.container = options.container;
    this.aiService = options.aiService;
    this.getMessages = options.getMessages;
    this.getSelectedModelId = options.getSelectedModelId;
    this.getContextFiles = options.getContextFiles;
    this.getSystemPrompt = options.getSystemPrompt;
    this.chatContainer = options.chatContainer;
    this.scrollManager = options.scrollManager;
    this.messageRenderer = options.messageRenderer;
    this.onMessageSubmit = options.onMessageSubmit;
    this.onAssistantResponse = options.onAssistantResponse;
    this.onContextFileAdd = options.onContextFileAdd;
    this.onError = options.onError;
    this.onAddContextFile = options.onAddContextFile;
    this.onEditSystemPrompt = options.onEditSystemPrompt;
    this.plugin = options.plugin;
    this.chatView = options.chatView;
    console.log("Initializing InputHandler with RecorderService");
    this.recorderService = RecorderService.getInstance(this.app, this.plugin, {
      isInChat: true,
      onTranscriptionComplete: (text) => {
        console.log("Received transcription, inserting at cursor position");
        this.insertTextAtCursor(text);
      }
    });
    const originalMessageSubmit = options.onMessageSubmit;
    this.onMessageSubmit = async (message) => {
      await originalMessageSubmit(message);
    };
    const originalAssistantResponse = options.onAssistantResponse;
    this.onAssistantResponse = async (message) => {
      await originalAssistantResponse(message);
    };
    this.setupInput();
  }
  setupInput() {
    var _a;
    this.inputContainer = this.container.createEl("div", {
      cls: "systemsculpt-input-container"
    });
    this.buttonGrid = this.inputContainer.createEl("div", {
      cls: "systemsculpt-button-grid"
    });
    const attachButton = this.buttonGrid.createEl("button", {
      cls: "systemsculpt-input-action-button",
      attr: { "aria-label": "Add attachment" }
    });
    (0, import_obsidian20.setIcon)(attachButton, "paperclip");
    attachButton.addEventListener("click", (e) => {
      if (e.shiftKey) {
        this.handleDocumentUpload();
      } else {
        this.onAddContextFile();
      }
    });
    const settingsButton = this.buttonGrid.createEl("button", {
      cls: "systemsculpt-input-action-button",
      attr: { "aria-label": "System prompt settings" }
    });
    (0, import_obsidian20.setIcon)(settingsButton, "settings");
    settingsButton.addEventListener("click", () => {
      this.onEditSystemPrompt();
    });
    const webSearchButton = this.buttonGrid.createEl("button", {
      cls: "systemsculpt-input-action-button",
      attr: { "aria-label": "Toggle web search" }
    });
    this.webSearchButton = webSearchButton;
    (0, import_obsidian20.setIcon)(webSearchButton, "globe");
    webSearchButton.addEventListener("click", async () => {
      const isNativeProvider = this.plugin.settings.activeProvider.type === "native";
      const currentProvider = this.plugin.settings.customProviders.find((p) => p.id === this.plugin.settings.activeProvider.id);
      const isOpenRouter = currentProvider == null ? void 0 : currentProvider.endpoint.includes("openrouter.ai");
      if (!isNativeProvider && !isOpenRouter) {
        const result = await showPopup(this.app, "Web search allows the AI to access real-time information from the internet to provide up-to-date answers.", {
          title: "Feature Restriction - Web Search",
          description: "Web search is only available for SystemSculpt and OpenRouter models. Please switch to a compatible model to use this feature.",
          primaryButton: "OK"
        });
        return;
      }
      this.webSearchEnabled = !this.webSearchEnabled;
      webSearchButton.classList.toggle("is-enabled", this.webSearchEnabled);
    });
    const hasProLicense = ((_a = this.plugin.settings.licenseKey) == null ? void 0 : _a.trim()) && this.plugin.settings.licenseValid;
    const micButton = this.buttonGrid.createEl("button", {
      cls: `systemsculpt-input-action-button systemsculpt-mic-button${hasProLicense ? "" : " pro-feature"}`,
      attr: {
        "aria-label": hasProLicense ? "Record audio message" : "Record audio message (Pro feature)",
        "aria-disabled": (!hasProLicense).toString(),
        title: hasProLicense ? "Record audio message" : "Recording is a Pro feature. Click to learn more."
      }
    });
    (0, import_obsidian20.setIcon)(micButton, "mic");
    micButton.classList.toggle("disabled", !hasProLicense);
    micButton.addEventListener("click", async () => {
      if (!hasProLicense) {
        const result = await showPopup(this.app, "Voice recording allows you to quickly capture your thoughts by speaking instead of typing. This feature includes automatic transcription of your recordings to text.", {
          title: "Pro Feature - Voice Recording",
          description: "Support SystemSculpt's development and unlock voice recording, transcription, and other premium features by becoming a Patreon member!",
          primaryButton: "Become a Patron",
          secondaryButton: "Maybe Later"
        });
        if (result == null ? void 0 : result.confirmed) {
          window.open(PATREON_URL, "_blank");
        }
        return;
      }
      this.handleMicClick();
    });
    const sendButton = this.buttonGrid.createEl("button", {
      cls: "systemsculpt-input-action-button systemsculpt-send-button",
      attr: { "aria-label": "Send message" }
    });
    (0, import_obsidian20.setIcon)(sendButton, "send");
    sendButton.addEventListener("click", this.handleSendMessage.bind(this));
    this.stopButton = this.buttonGrid.createEl("button", {
      cls: "systemsculpt-input-action-button systemsculpt-stop-button",
      attr: { "aria-label": "Stop generation" }
    });
    (0, import_obsidian20.setIcon)(this.stopButton, "square");
    this.stopButton.style.display = "none";
    this.stopButton.addEventListener("click", this.handleStopGeneration.bind(this));
    this.input = this.inputContainer.createEl("textarea", {
      cls: "systemsculpt-input systemsculpt-chat-input",
      attr: {
        rows: "1",
        placeholder: "Type a message..."
      }
    });
    this.input.addEventListener("keydown", this.handleKeyDown.bind(this));
    this.input.addEventListener("input", this.adjustInputHeight.bind(this));
    this.input.addEventListener("paste", this.handlePaste.bind(this));
    this.recorderService.onToggle((isRecording) => {
      this.isRecording = isRecording;
      const micButton2 = this.buttonGrid.querySelector(".systemsculpt-mic-button");
      if (micButton2) {
        micButton2.classList.toggle("active", isRecording);
      }
    });
    this.updateGeneratingState = () => {
      this.input.disabled = this.isGenerating;
      sendButton.disabled = this.isGenerating;
      micButton.disabled = this.isGenerating;
      attachButton.disabled = this.isGenerating;
      settingsButton.disabled = this.isGenerating;
      webSearchButton.disabled = this.isGenerating;
      if (this.stopButton) {
        this.stopButton.style.display = this.isGenerating ? "flex" : "none";
        sendButton.style.display = this.isGenerating ? "none" : "flex";
      }
      this.input.placeholder = this.isGenerating ? "Waiting for response..." : "Type a message...";
      this.input.classList.toggle("disabled", this.isGenerating);
      sendButton.classList.toggle("disabled", this.isGenerating);
      micButton.classList.toggle("disabled", this.isGenerating);
      attachButton.classList.toggle("disabled", this.isGenerating);
      settingsButton.classList.toggle("disabled", this.isGenerating);
      webSearchButton.classList.toggle("disabled", this.isGenerating);
    };
  }
  handleStopGeneration() {
    if (this.abortController) {
      this.abortController.abort();
      this.abortController = null;
      this.isGenerating = false;
      this.updateGeneratingState();
    }
  }
  async handleSendMessage() {
    const currentModelId = this.getSelectedModelId();
    if (!currentModelId || currentModelId.trim() === "") {
      const result = await showPopup(this.app, "No model selected", {
        description: "Please select an AI model before sending a message.",
        primaryButton: "Select Model",
        secondaryButton: "Cancel"
      });
      if (result == null ? void 0 : result.confirmed) {
        const modal = new ModelSelectionModal(this.app, "", async (modelId) => {
          await this.chatView.setSelectedModelId(modelId);
          showEnhancedNotice("Model selected. Please re-send your message.", "info");
        }, this.plugin);
        modal.open();
      }
      return;
    }
    if (this.plugin.settings.activeProvider.type === "native" && (!this.plugin.settings.licenseKey || !this.plugin.settings.licenseKey.trim())) {
      showPopup(this.app, "You don't have a license key. Please add a valid license key in settings to use SystemSculpt AI specific models.", {
        description: "License Key Required",
        primaryButton: "OK"
      });
      return;
    }
    const content = this.input.value.trim();
    if (!content || this.isGenerating)
      return;
    this.input.value = "";
    this.adjustInputHeight();
    try {
      const userMessageId = this.generateMessageId();
      const userMessage = {
        role: "user",
        content,
        message_id: userMessageId
      };
      const modelId = this.webSearchEnabled ? `${this.getSelectedModelId()}:online` : this.getSelectedModelId();
      await this.onMessageSubmit(userMessage);
      this.scrollManager.updateContentHeight();
      this.scrollManager.scrollToBottom();
      const { messageEl, contentEl } = this.createAssistantMessageContainer();
      messageEl.setAttribute("data-message-id", this.generateMessageId());
      messageEl.appendChild(contentEl);
      let fullResponse = "";
      let accumulatedReasoning = "";
      this.isGenerating = true;
      this.updateGeneratingState();
      const loadingEl = contentEl.createEl("span", {
        cls: "systemsculpt-loading",
        text: " \u25CF Thinking..."
      });
      this.chatContainer.appendChild(messageEl);
      this.scrollManager.updateContentHeight();
      this.scrollManager.scrollToBottom();
      this.abortController = new AbortController();
      const systemPrompt = this.getSystemPrompt();
      try {
        for await (const chunk of this.aiService.streamMessage({
          messages: this.getMessages(),
          model: modelId,
          contextFiles: this.getContextFiles(),
          systemPromptType: systemPrompt.type,
          systemPromptPath: systemPrompt.path,
          signal: this.abortController.signal
        })) {
          if (!fullResponse) {
            loadingEl.textContent = " \u25CF Generating...";
          }
          if (chunk.content) {
            fullResponse += chunk.content;
            await this.scheduleRender(fullResponse, contentEl);
            contentEl.appendChild(loadingEl);
          }
          if (chunk.reasoning) {
            accumulatedReasoning += chunk.reasoning;
            this.messageRenderer.updateReasoningContent(messageEl, accumulatedReasoning);
          }
          this.scrollManager.updateContentHeight();
          this.scrollManager.scrollToBottom();
        }
        this.isGenerating = false;
        this.abortController = null;
        loadingEl.remove();
        if (accumulatedReasoning) {
          this.messageRenderer.updateReasoningContent(messageEl, accumulatedReasoning, true);
        }
        const assistantMessage = {
          role: "assistant",
          content: fullResponse,
          message_id: messageEl.getAttribute("data-message-id") || this.generateMessageId()
        };
        await this.onAssistantResponse(assistantMessage);
        this.messageRenderer.addMessageButtonToolbar(messageEl, fullResponse, "assistant", assistantMessage.message_id);
        this.scrollManager.updateContentHeight();
        this.scrollManager.scrollToBottom();
        messageEl.addEventListener("delete", async (e) => {
          const { messageId } = e.detail;
          const messages = this.getMessages();
          const index = messages.findIndex((msg) => msg.message_id === messageId);
          if (index !== -1) {
            messageEl.remove();
            this.scrollManager.updateContentHeight();
          }
        });
      } catch (error) {
        this.isGenerating = false;
        this.abortController = null;
        loadingEl.remove();
        messageEl.remove();
        console.error("Chat message error:", {
          error,
          message: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : void 0
        });
        this.onError(error);
      } finally {
        this.isGenerating = false;
        this.abortController = null;
        this.updateGeneratingState();
        this.focus();
      }
    } catch (error) {
      console.error("Outer message handling error:", {
        error,
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : void 0
      });
      this.isGenerating = false;
      this.abortController = null;
      this.updateGeneratingState();
      this.focus();
      this.onError(error);
    }
  }
  handleMicClick() {
    if (this.isGenerating)
      return;
    this.toggleRecording();
  }
  async toggleRecording() {
    await this.recorderService.toggleRecording();
    this.input.focus();
  }
  async handlePaste(e) {
    var _a;
    const dt = e.clipboardData;
    if (!dt)
      return;
    const pastedText = (_a = dt.getData("text/plain")) != null ? _a : "";
    const allFiles = Array.from(dt.files);
    if (!allFiles.length && pastedText) {
      return;
    }
    e.preventDefault();
    if (!allFiles.length) {
      return;
    }
    for (const file of allFiles) {
      try {
        let extension = "bin";
        if (file.name && file.name.includes(".")) {
          const dotIdx = file.name.lastIndexOf(".");
          if (dotIdx >= 0) {
            extension = file.name.substring(dotIdx + 1).toLowerCase();
          }
        } else if (file.type) {
          const mimeParts = file.type.split("/");
          if (mimeParts.length === 2) {
            extension = mimeParts[1].toLowerCase().replace(/[^a-z0-9]/g, "");
          }
        }
        const now = new Date();
        const isoString = now.toISOString().replace(/[:.]/g, "-");
        const newFileName = `pasted-${isoString}.${extension}`;
        const arrayBuffer = await file.arrayBuffer();
        const attachmentsDir = this.plugin.settings.attachmentsDirectory || "Attachments";
        const finalPath = `${attachmentsDir}/${newFileName}`;
        await this.ensureDirectoryExists(attachmentsDir);
        await this.app.vault.createBinary(finalPath, arrayBuffer);
        const createdFile = this.app.vault.getAbstractFileByPath(finalPath);
        if (createdFile instanceof import_obsidian20.TFile) {
          await this.chatView.addFileToContext(createdFile);
          new import_obsidian20.Notice(`Pasted file saved & added to context: ${createdFile.name}`);
        } else {
          throw new Error("Failed to locate pasted file in vault.");
        }
      } catch (err) {
        console.error("Error handling pasted file:", err);
        new import_obsidian20.Notice(`Failed to handle pasted file: ${err}`);
      }
    }
    if (pastedText) {
      this.insertTextAtCursor(pastedText);
    }
  }
  async handleKeyDown(event) {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();
      await this.handleSendMessage();
    }
  }
  async handleImagePaste(clipboardData) {
    const file = clipboardData.files[0];
    if (!file || !file.type.startsWith("image/")) {
      throw new SystemSculptError("No image in clipboard", ERROR_CODES.NO_IMAGE, 400);
    }
    const base64 = await ImageProcessor.processClipboardImage(clipboardData);
    return base64;
  }
  adjustInputHeight() {
    if (!this.input)
      return;
    this.input.style.height = "auto";
    const newHeight = Math.min(Math.max(this.input.scrollHeight, 48), 200);
    this.input.style.height = newHeight + "px";
  }
  focus() {
    this.input.focus();
  }
  getValue() {
    return this.input.value;
  }
  setValue(value) {
    if (!this.input) {
      console.error("Input element not found in setValue");
      return;
    }
    try {
      this.input.value = value;
      const inputEvent = new Event("input", {
        bubbles: true,
        cancelable: true
      });
      this.input.dispatchEvent(inputEvent);
      this.adjustInputHeight();
      this.input.focus();
      this.input.setSelectionRange(value.length, value.length);
    } catch (error) {
      console.error("Error in setValue:", error);
      new import_obsidian20.Notice("\u274C Failed to set input value");
    }
  }
  unload() {
    if (this.renderTimeout) {
      clearTimeout(this.renderTimeout);
    }
    this.recorderService.setVisualizerCanvas(null);
    if (this.recorderVisualizer) {
      this.recorderVisualizer.remove();
      this.recorderVisualizer = null;
    }
  }
  generateMessageId() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  createAssistantMessageContainer() {
    return {
      messageEl: createDiv({
        cls: "systemsculpt-message systemsculpt-assistant-message"
      }),
      contentEl: createDiv({ cls: "systemsculpt-message-content" })
    };
  }
  async scheduleRender(content, containerEl) {
    if (this.renderTimeout) {
      clearTimeout(this.renderTimeout);
    }
    const currentHeight = containerEl.offsetHeight;
    const tempContainer = containerEl.querySelector(".temp-text") || containerEl.createEl("div", { cls: "temp-text" });
    tempContainer.style.visibility = "hidden";
    tempContainer.style.position = "absolute";
    tempContainer.style.width = containerEl.offsetWidth + "px";
    await this.messageRenderer.renderMarkdownContent(content, tempContainer);
    if (currentHeight !== tempContainer.offsetHeight) {
      await this.messageRenderer.renderMarkdownContent(content, containerEl);
    } else {
      const lastChild = containerEl.lastChild;
      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {
        lastChild.textContent = content;
      } else {
        containerEl.appendChild(document.createTextNode(content));
      }
    }
    tempContainer.remove();
    return Promise.resolve();
  }
  async handleDocumentUpload() {
    var _a;
    try {
      if (!((_a = this.plugin.settings.licenseKey) == null ? void 0 : _a.trim()) || !this.plugin.settings.licenseValid) {
        await showPopup(this.app, "Upload and process documents directly in your chat conversations. SystemSculpt will automatically extract and analyze the content.", {
          title: "Pro Feature - Document Processing",
          description: "Support SystemSculpt's development and unlock document processing, analysis, and other premium features by becoming a Patreon member!",
          primaryButton: "Become a Patron",
          secondaryButton: "Maybe Later"
        }).then((result2) => {
          if (result2 == null ? void 0 : result2.confirmed) {
            window.open(PATREON_URL, "_blank");
          }
        });
        return;
      }
      const isValid = await this.plugin.getLicenseManager().validateLicenseKey(true);
      if (!isValid) {
        this.plugin.settings.licenseValid = false;
        await this.plugin.saveSettings();
        await showPopup(this.app, "Your license appears to be invalid. Please check your license key in settings.", {
          title: "License Invalid",
          primaryButton: "OK"
        });
        return;
      }
      const files = this.app.vault.getFiles();
      if (!files.length) {
        new import_obsidian20.Notice("No files found to upload.");
        return;
      }
      const firstFile = files[0];
      const result = await this.aiService.uploadDocument(firstFile);
      new import_obsidian20.Notice(`Uploaded doc. ID: ${result.documentId}, status: ${result.status}`);
    } catch (error) {
      if ((error == null ? void 0 : error.statusCode) === 401 || (error == null ? void 0 : error.statusCode) === 403) {
        await showPopup(this.app, "Upload and process documents directly in your chat conversations. SystemSculpt will automatically extract and analyze the content.", {
          title: "Pro Feature - Document Processing",
          description: "Document processing requires an active Pro subscription. Support SystemSculpt's development by becoming a Patreon member!",
          primaryButton: "Become a Patron",
          secondaryButton: "Maybe Later"
        }).then((result) => {
          if (result == null ? void 0 : result.confirmed) {
            window.open(PATREON_URL, "_blank");
          }
        });
        return;
      }
      new import_obsidian20.Notice(`Error uploading doc: ${error}`);
    }
  }
  insertTextAtCursor(text) {
    const cursorPos = this.input.selectionStart;
    const currentValue = this.input.value;
    if (cursorPos !== null) {
      const newValue = currentValue.slice(0, cursorPos) + text + currentValue.slice(cursorPos);
      this.input.value = newValue;
      this.input.selectionStart = this.input.selectionEnd = cursorPos + text.length;
    } else {
      this.input.value = currentValue + text;
      this.input.selectionStart = this.input.selectionEnd = this.input.value.length;
    }
    this.input.dispatchEvent(new Event("input"));
    this.input.focus();
  }
  updateWebSearchButtonState() {
    if (!this.webSearchButton)
      return;
    const isNativeProvider = this.plugin.settings.activeProvider.type === "native";
    const currentProvider = this.plugin.settings.customProviders.find((p) => p.id === this.plugin.settings.activeProvider.id);
    const isOpenRouter = currentProvider == null ? void 0 : currentProvider.endpoint.includes("openrouter.ai");
    const webSearchAllowed = isNativeProvider || isOpenRouter;
    if (!webSearchAllowed && this.webSearchEnabled) {
      this.webSearchEnabled = false;
      this.webSearchButton.classList.remove("is-enabled");
    }
    this.webSearchButton.classList.toggle("disabled", !webSearchAllowed);
    this.webSearchButton.setAttribute("aria-disabled", (!webSearchAllowed).toString());
  }
  onModelChange() {
    this.updateWebSearchButtonState();
  }
  async ensureDirectoryExists(dirPath) {
    try {
      await this.app.vault.adapter.mkdir(dirPath);
    } catch (err) {
      if (!err.message.includes("already exists"))
        throw err;
    }
  }
};

// src/views/components/FileContextManager.ts
var import_obsidian24 = __toModule(require("obsidian"));

// src/modals/ContextSelectionModal.ts
var import_obsidian22 = __toModule(require("obsidian"));
var import_obsidian23 = __toModule(require("obsidian"));

// src/services/TokenCounterService.ts
var import_obsidian21 = __toModule(require("obsidian"));
var TokenCounterService = class {
  constructor() {
    this.cache = new Map();
    this.fileCache = new Map();
    this.cacheSize = 1e3;
    this.handleFileModify = this.handleFileModify.bind(this);
    this.handleFileDelete = this.handleFileDelete.bind(this);
    this.handleFileRename = this.handleFileRename.bind(this);
  }
  handleFileModify(file) {
    if (file instanceof import_obsidian21.TFile) {
      this.fileCache.delete(file.path);
    }
  }
  handleFileDelete(file) {
    if (file instanceof import_obsidian21.TFile) {
      this.fileCache.delete(file.path);
    }
  }
  handleFileRename(file, oldPath) {
    if (file instanceof import_obsidian21.TFile) {
      this.fileCache.delete(oldPath);
    }
  }
  static getInstance() {
    if (!TokenCounterService.instance) {
      TokenCounterService.instance = new TokenCounterService();
    }
    return TokenCounterService.instance;
  }
  setApp(app) {
    this.app = app;
    this.app.vault.on("modify", this.handleFileModify);
    this.app.vault.on("delete", this.handleFileDelete);
    this.app.vault.on("rename", this.handleFileRename);
  }
  async getFileTokenCount(file) {
    const cached = this.fileCache.get(file.path);
    if (cached && cached.mtime === file.stat.mtime) {
      return cached.tokens;
    }
    const content = await this.app.vault.read(file);
    const tokens = this.approximateTokenCount(content);
    this.fileCache.set(file.path, {
      tokens,
      mtime: file.stat.mtime
    });
    return tokens;
  }
  approximateTokenCount(text) {
    if (!text)
      return 0;
    const cacheKey = `${text.slice(0, 100)}_${text.length}`;
    const cached = this.cache.get(cacheKey);
    if (cached !== void 0)
      return cached;
    text = text.replace(/\s+/g, " ").trim();
    let tokenCount = 0;
    const commonPatterns = [
      /^https?:\/\/\S+/gm,
      /[@#]\w+/g,
      /:[a-z_]+:/g,
      /[A-Z]{2,}/g,
      /\d{1,16}/g,
      /[.,!?;:(){}\[\]"']/g
    ];
    for (const pattern of commonPatterns) {
      const matches = text.match(pattern);
      if (matches) {
        tokenCount += matches.reduce((sum, match) => {
          if (match.startsWith("http")) {
            return sum + Math.ceil(match.length / 4);
          } else if (match.length <= 4) {
            return sum + 1;
          } else {
            return sum + Math.ceil(match.length / 3);
          }
        }, 0);
        text = text.replace(pattern, " ");
      }
    }
    const words = text.split(/\s+/).filter((w) => w.length > 0);
    for (const word of words) {
      let wordTokens = 1;
      if (word.length > 4) {
        wordTokens += Math.floor((word.length - 4) / 3);
      }
      if (/[a-z][A-Z]/.test(word)) {
        wordTokens += (word.match(/[A-Z]/g) || []).length;
      }
      const nonAscii = (word.match(/[^\x00-\x7F]/g) || []).length;
      if (nonAscii > 0) {
        wordTokens += Math.ceil(nonAscii * 1.5);
      }
      tokenCount += wordTokens;
    }
    tokenCount = Math.ceil(tokenCount * 1.1);
    this.cacheResult(cacheKey, tokenCount);
    return tokenCount;
  }
  cacheResult(key, value) {
    if (this.cache.size >= this.cacheSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }
    this.cache.set(key, value);
  }
  clearCache() {
    this.cache.clear();
    this.fileCache.clear();
  }
  unload() {
    if (this.app) {
      this.app.vault.off("modify", this.handleFileModify);
      this.app.vault.off("delete", this.handleFileDelete);
      this.app.vault.off("rename", this.handleFileRename);
    }
  }
  formatTokenCount(count) {
    if (count === 0)
      return "";
    if (count < 100)
      return "< 100 tokens";
    if (count >= 1e3) {
      const inK = Math.ceil(count / 1e3);
      return `~${inK}K tokens`;
    } else {
      const inHundreds = Math.ceil(count / 100) * 100;
      return `~${inHundreds} tokens`;
    }
  }
};

// src/core/license/LicenseChecker.ts
init_ui();
var LicenseChecker = class {
  static requiresProLicense(extension) {
    return this.PRO_EXTENSIONS.includes(extension.toLowerCase());
  }
  static hasValidLicense(plugin) {
    var _a;
    return ((_a = plugin.settings.licenseKey) == null ? void 0 : _a.trim()) && plugin.settings.licenseValid;
  }
  static async showProFeaturePopup(app) {
    const result = await showPopup(app, "Support SystemSculpt's development and unlock powerful document processing features. Upgrade to Pro to process PDFs, Word documents, and audio files.", {
      title: "Pro Feature Required",
      primaryButton: "Become a Patron",
      secondaryButton: "Maybe Later",
      icon: "sparkles"
    });
    if (result == null ? void 0 : result.confirmed) {
      window.open(PATREON_URL, "_blank");
    }
    return (result == null ? void 0 : result.confirmed) || false;
  }
  static async checkLicenseForFile(file, app, plugin) {
    if (this.requiresProLicense(file.extension.toLowerCase())) {
      if (!this.hasValidLicense(plugin)) {
        await this.showProFeaturePopup(app);
        return false;
      }
    }
    return true;
  }
};
LicenseChecker.PRO_EXTENSIONS = [
  "pdf",
  "doc",
  "docx",
  "ppt",
  "pptx",
  "xls",
  "xlsx",
  "mp3",
  "wav",
  "m4a",
  "ogg",
  "webm"
];

// src/modals/ContextSelectionModal.ts
var SUPPORTED_EXTENSIONS = {
  documents: ["md", "txt"],
  proDocuments: ["pdf", "doc", "docx", "ppt", "pptx", "xls", "xlsx"],
  images: ["png", "jpg", "jpeg", "gif", "svg", "webp"],
  audio: ["mp3", "wav", "m4a", "ogg", "webm"]
};
var ALL_SUPPORTED_EXTENSIONS = Object.values(SUPPORTED_EXTENSIONS).flat();
var ContextSelectionModal = class extends import_obsidian22.Modal {
  constructor(app, onSelect, plugin) {
    super(app);
    this.tokenCounts = new Map();
    this.currentSearchResults = [];
    this.searchTimeout = null;
    this.selectedExtensions = new Set();
    this.extensionButtons = new Map();
    this.selectedFiles = new Set();
    this.selectedIndex = 0;
    this.resultElements = [];
    this.onSelect = onSelect;
    this.searchService = new SearchService();
    this.tokenCounter = TokenCounterService.getInstance();
    this.plugin = plugin;
    this.files = this.getAvailableFiles();
    this.selectedExtensions.add("md");
  }
  getAvailableFiles() {
    return this.app.vault.getFiles().filter((file) => ALL_SUPPORTED_EXTENSIONS.includes(file.extension.toLowerCase()));
  }
  getSearchFields(file) {
    return [
      { field: "title", text: file.basename, weight: 100 },
      { field: "path", text: file.path, weight: 75 },
      { field: "extension", text: file.extension, weight: 50 }
    ];
  }
  formatFileSize(bytes) {
    if (bytes < 1024)
      return bytes + " B";
    const kb = bytes / 1024;
    if (kb < 1024)
      return kb.toFixed(1) + " KB";
    const mb = kb / 1024;
    return mb.toFixed(1) + " MB";
  }
  highlightText(text, matches = []) {
    var _a;
    if (!matches || matches.length === 0) {
      const fragment2 = createFragment();
      fragment2.appendText(text);
      return fragment2;
    }
    const fragment = createFragment();
    const searchQuery = ((_a = this.searchInput) == null ? void 0 : _a.value) || "";
    const normalizedQuery = searchQuery.toLowerCase().trim();
    const regex = new RegExp(`(${normalizedQuery})`, "gi");
    let lastIndex = 0;
    let match;
    while ((match = regex.exec(text)) !== null) {
      if (match.index > lastIndex) {
        fragment.appendText(text.slice(lastIndex, match.index));
      }
      const span = fragment.createSpan({
        cls: "systemsculpt-highlight",
        text: match[0]
      });
      lastIndex = match.index + match[0].length;
    }
    if (lastIndex < text.length) {
      fragment.appendText(text.slice(lastIndex));
    }
    return fragment;
  }
  createLoadingIndicator() {
    const container = createDiv({ cls: "systemsculpt-context-loading" });
    (0, import_obsidian23.setIcon)(container, "loader-2");
    container.appendChild(createSpan({ text: "Loading..." }));
    return container;
  }
  createEmptyState() {
    const container = createDiv({ cls: "systemsculpt-context-empty" });
    (0, import_obsidian23.setIcon)(container, "search");
    container.appendChild(createSpan({ text: "No matching files found" }));
    return container;
  }
  async calculateTokenCount(file) {
    try {
      if (file.extension === "md" || file.extension === "txt") {
        const content = await this.app.vault.read(file);
        return this.tokenCounter.approximateTokenCount(content);
      }
      return 0;
    } catch (error) {
      console.error("Error calculating tokens for file:", file.path, error);
      return 0;
    }
  }
  async updateTokenCount(file) {
    const count = await this.calculateTokenCount(file);
    this.tokenCounts.set(file.path, count);
  }
  createCard(file, result) {
    var _a;
    const card = createDiv({ cls: "systemsculpt-context-card" });
    card.setAttribute("tabindex", "0");
    const cardContent = card.createDiv({ cls: "systemsculpt-card-content" });
    if (file.extension.match(/png|jpe?g|gif|svg|webp/i)) {
      const thumbContainer = cardContent.createDiv({
        cls: "systemsculpt-context-thumbnail"
      });
      (async () => {
        try {
          const arrayBuffer = await this.app.vault.readBinary(file);
          const blob = new Blob([arrayBuffer]);
          const objectUrl = URL.createObjectURL(blob);
          const img = thumbContainer.createEl("img", {
            cls: "systemsculpt-context-thumb-img",
            attr: { src: objectUrl }
          });
        } catch (err) {
          console.error("Error loading thumbnail:", err);
        }
      })();
    }
    if (this.selectedFiles.has(file)) {
      card.addClass("is-added");
      const checkIcon = card.createDiv({ cls: "systemsculpt-context-check" });
      (0, import_obsidian23.setIcon)(checkIcon, "check");
    }
    const textContainer = cardContent.createDiv({
      cls: "systemsculpt-card-text"
    });
    const title = textContainer.createDiv({
      cls: "systemsculpt-context-title"
    });
    title.appendChild(this.highlightText(file.basename, result.matches.filter((m) => m.field === "title")));
    const path = textContainer.createDiv({ cls: "systemsculpt-context-path" });
    path.appendChild(this.highlightText(file.path, result.matches.filter((m) => m.field === "path")));
    const meta = textContainer.createDiv({ cls: "systemsculpt-context-meta" });
    const typeGroup = meta.createDiv({
      cls: "systemsculpt-context-type-group"
    });
    const type = typeGroup.createDiv({ cls: "systemsculpt-context-type" });
    type.setText(file.extension.toUpperCase());
    if (LicenseChecker.requiresProLicense(file.extension)) {
      const proBadge = typeGroup.createDiv({
        cls: "systemsculpt-context-badge pro-badge"
      });
      (0, import_obsidian23.setIcon)(proBadge.createSpan(), "sparkles");
      proBadge.createSpan({ text: "Pro" });
    }
    const metaGroup = meta.createDiv({
      cls: "systemsculpt-context-meta-group"
    });
    const size = metaGroup.createDiv({ cls: "systemsculpt-context-size" });
    size.setText(this.formatFileSize(((_a = file.stat) == null ? void 0 : _a.size) || 0));
    if (file.extension === "md" || file.extension === "txt") {
      const tokenCount = metaGroup.createDiv({
        cls: "systemsculpt-context-token-count"
      });
      const count = this.tokenCounts.get(file.path) || 0;
      tokenCount.setText(this.tokenCounter.formatTokenCount(count));
      if (!this.tokenCounts.has(file.path)) {
        this.updateTokenCount(file).then(() => {
          tokenCount.setText(this.tokenCounter.formatTokenCount(this.tokenCounts.get(file.path) || 0));
        });
      }
    }
    card.addEventListener("click", () => {
      this.toggleFileSelection(file, card);
    });
    card.addEventListener("mouseenter", () => {
      const index = this.resultElements.indexOf(card);
      if (index >= 0) {
        this.selectedIndex = index;
        this.updateSelectedResult();
      }
    });
    return card;
  }
  updateSelectedResult() {
    this.resultElements.forEach((el, index) => {
      el.toggleClass("is-selected", index === this.selectedIndex && this.selectedIndex >= 0);
    });
    if (this.selectedIndex >= 0 && this.selectedIndex < this.resultElements.length) {
      this.resultElements[this.selectedIndex].scrollIntoView({
        behavior: "smooth",
        block: "nearest"
      });
    }
  }
  async toggleFileSelection(file, cardEl) {
    var _a;
    if (!await LicenseChecker.checkLicenseForFile(file, this.app, this.plugin)) {
      return;
    }
    if (this.selectedFiles.has(file)) {
      this.selectedFiles.delete(file);
      cardEl.removeClass("is-added");
      (_a = cardEl.querySelector(".systemsculpt-context-check")) == null ? void 0 : _a.remove();
    } else {
      this.selectedFiles.add(file);
      cardEl.addClass("is-added");
      const checkIcon = cardEl.createDiv({ cls: "systemsculpt-context-check" });
      (0, import_obsidian23.setIcon)(checkIcon, "check");
    }
    this.updateActionButton();
  }
  updateActionButton() {
    const actionButton = this.containerEl.querySelector(".systemsculpt-context-action-button");
    if (actionButton) {
      const count = this.selectedFiles.size;
      actionButton.setText(count > 0 ? `Add ${count} selected file${count === 1 ? "" : "s"}` : "Select files to add as context");
      actionButton.toggleClass("is-active", count > 0);
    }
  }
  renderResults(searchResults) {
    this.resultsContainer.empty();
    this.resultElements = [];
    this.currentSearchResults = searchResults;
    if (searchResults.length === 0) {
      this.emptyState.style.display = "flex";
      return;
    }
    this.emptyState.style.display = "none";
    const grid = this.resultsContainer.createDiv({
      cls: "systemsculpt-context-grid"
    });
    searchResults.forEach((result, index) => {
      const card = this.createCard(result.item, result);
      grid.appendChild(card);
      this.resultElements.push(card);
    });
  }
  getUniqueExtensions() {
    const extensions = new Set();
    this.files.forEach((file) => {
      if (file.extension) {
        extensions.add(file.extension.toLowerCase());
      }
    });
    return Array.from(extensions).sort((a, b) => {
      if (a === "md")
        return -1;
      if (b === "md")
        return 1;
      const aIsPro = LicenseChecker.requiresProLicense(a);
      const bIsPro = LicenseChecker.requiresProLicense(b);
      if (aIsPro && !bIsPro)
        return 1;
      if (!aIsPro && bIsPro)
        return -1;
      return a.localeCompare(b);
    });
  }
  createExtensionButton(extension) {
    const button = createDiv({
      cls: "systemsculpt-extension-button"
    });
    const iconContainer = button.createSpan({
      cls: "systemsculpt-extension-icon"
    });
    if (SUPPORTED_EXTENSIONS.documents.includes(extension)) {
      (0, import_obsidian23.setIcon)(iconContainer, "file-text");
    } else if (SUPPORTED_EXTENSIONS.images.includes(extension)) {
      (0, import_obsidian23.setIcon)(iconContainer, "image");
    } else if (SUPPORTED_EXTENSIONS.audio.includes(extension)) {
      (0, import_obsidian23.setIcon)(iconContainer, "headphones");
    }
    button.createSpan({
      text: extension.toUpperCase(),
      cls: "systemsculpt-extension-text"
    });
    if (LicenseChecker.requiresProLicense(extension)) {
      const proBadge = button.createSpan({
        cls: "systemsculpt-extension-badge pro-badge"
      });
      (0, import_obsidian23.setIcon)(proBadge, "sparkles");
    }
    button.addEventListener("click", () => {
      if (this.selectedExtensions.has(extension)) {
        this.selectedExtensions.delete(extension);
        button.removeClass("is-selected");
      } else {
        this.selectedExtensions.add(extension);
        button.addClass("is-selected");
      }
      this.performSearch(this.searchInput.value);
    });
    return button;
  }
  performSearch(query) {
    let results = this.searchService.search(this.files.filter((file) => this.selectedExtensions.size === 0 || this.selectedExtensions.has(file.extension.toLowerCase())), query, (file) => this.getSearchFields(file));
    results.sort((a, b) => {
      if (b.score !== a.score)
        return b.score - a.score;
      return a.item.basename.localeCompare(b.item.basename);
    });
    this.renderResults(results);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-context-modal");
    const searchContainer = contentEl.createDiv({
      cls: "systemsculpt-context-search"
    });
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search files to add as context..."
    });
    const extensionContainer = contentEl.createDiv({
      cls: "systemsculpt-extension-container"
    });
    const extensions = this.getUniqueExtensions();
    extensions.forEach((ext) => {
      const button = this.createExtensionButton(ext);
      this.extensionButtons.set(ext, button);
      extensionContainer.appendChild(button);
    });
    const mdBtn = this.extensionButtons.get("md");
    if (mdBtn)
      mdBtn.addClass("is-selected");
    this.loadingIndicator = this.createLoadingIndicator();
    contentEl.appendChild(this.loadingIndicator);
    this.emptyState = this.createEmptyState();
    this.emptyState.style.display = "none";
    contentEl.appendChild(this.emptyState);
    const scrollContainer = contentEl.createDiv({
      cls: "systemsculpt-scroll-container"
    });
    this.resultsContainer = scrollContainer.createDiv();
    const actionContainer = contentEl.createDiv({
      cls: "systemsculpt-action-container"
    });
    const actionButton = actionContainer.createEl("button", {
      cls: "systemsculpt-context-action-button",
      text: "Select files to add as context"
    });
    actionButton.addEventListener("click", () => {
      if (this.selectedFiles.size > 0) {
        this.onSelect(Array.from(this.selectedFiles));
        this.close();
      }
    });
    this.updateActionButton();
    this.loadingIndicator.style.display = "flex";
    this.resultsContainer.empty();
    this.setupEventListeners();
    this.containerEl.addEventListener("keydown", (e) => {
      if (document.activeElement === this.searchInput)
        return;
      if (this.currentSearchResults.length === 0)
        return;
      if (e.key === "Tab") {
        e.preventDefault();
        if (e.shiftKey && this.selectedIndex === 0) {
          this.searchInput.focus();
          return;
        }
        if (e.shiftKey) {
          this.selectedIndex = (this.selectedIndex - 1 + this.resultElements.length) % this.resultElements.length;
        } else {
          this.selectedIndex = (this.selectedIndex + 1) % this.resultElements.length;
        }
        this.updateSelectedResult();
        return;
      }
      if (e.code === "Space") {
        e.preventDefault();
        const file = this.currentSearchResults[this.selectedIndex].item;
        const cardEl = this.resultElements[this.selectedIndex];
        this.toggleFileSelection(file, cardEl);
        return;
      }
      if (e.key === "Enter") {
        e.preventDefault();
        if (this.selectedFiles.size > 0) {
          this.onSelect(Array.from(this.selectedFiles));
          this.close();
        }
        return;
      }
    });
    this.searchInput.focus();
    this.performSearch("");
    this.loadingIndicator.style.display = "none";
  }
  setupEventListeners() {
    this.searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Tab") {
        e.preventDefault();
        e.stopPropagation();
        if (this.resultElements.length > 0) {
          if (e.shiftKey) {
            this.selectedIndex = this.resultElements.length - 1;
          } else {
            this.selectedIndex = 0;
          }
          this.updateSelectedResult();
          this.resultElements[this.selectedIndex].focus();
        }
      }
    });
    this.searchInput.addEventListener("focus", () => {
      this.selectedIndex = -1;
      this.updateSelectedResult();
    });
    this.searchInput.addEventListener("input", () => {
      if (this.searchTimeout) {
        window.clearTimeout(this.searchTimeout);
      }
      this.searchTimeout = window.setTimeout(() => {
        const query = this.searchInput.value;
        let results = this.searchService.search(this.files.filter((file) => this.selectedExtensions.size === 0 || this.selectedExtensions.has(file.extension.toLowerCase())), query, (file) => this.getSearchFields(file));
        results.sort((a, b) => {
          if (b.score !== a.score)
            return b.score - a.score;
          return a.item.basename.localeCompare(b.item.basename);
        });
        this.renderResults(results);
      }, 150);
    });
  }
  onClose() {
    if (this.searchTimeout) {
      window.clearTimeout(this.searchTimeout);
    }
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/views/components/FileContextManager.ts
var import_obsidian25 = __toModule(require("obsidian"));
var FileContextManager = class extends import_obsidian24.Component {
  constructor(options) {
    super();
    this.contextFiles = new Set();
    this.processingStatus = null;
    this.processingFiles = new Map();
    this.processingTimeouts = new Map();
    this.syncStatusEl = null;
    this.isSyncing = false;
    this.tokenCounts = new Map();
    this.app = options.app;
    this.onContextChange = options.onContextChange;
    this.sculptService = options.sculptService;
    this.plugin = options.plugin;
    this.tokenCounter = TokenCounterService.getInstance();
    this.drawer = new DrawerComponent({
      container: options.container,
      title: options.title || "Files"
    });
    this.contextPanel = this.drawer.getDrawer();
    this.setupContextPanel();
    this.initializeProcessingStatus();
  }
  initializeProcessingStatus() {
    this.processingStatus = this.contextPanel.createEl("div", {
      cls: "systemsculpt-processing-status"
    });
    this.processingStatus.style.display = "none";
  }
  updateProcessingStatus(file, status, icon, remove = false) {
    const fileId = file.path;
    let statusEl = this.processingFiles.get(fileId);
    const existingTimeout = this.processingTimeouts.get(fileId);
    if (existingTimeout) {
      clearTimeout(existingTimeout);
      this.processingTimeouts.delete(fileId);
    }
    if (!statusEl && !remove && this.processingStatus) {
      statusEl = this.processingStatus.createEl("div", {
        cls: "systemsculpt-file-status"
      });
      const iconEl = statusEl.createSpan({
        cls: "systemsculpt-status-icon"
      });
      (0, import_obsidian24.setIcon)(iconEl, icon);
      statusEl.createSpan({
        text: `${file.basename}: ${status}`,
        cls: "systemsculpt-status-text"
      });
      this.processingFiles.set(fileId, statusEl);
    } else if (statusEl && !remove) {
      statusEl.empty();
      const iconEl = statusEl.createSpan({
        cls: "systemsculpt-status-icon"
      });
      (0, import_obsidian24.setIcon)(iconEl, icon);
      statusEl.createSpan({
        text: `${file.basename}: ${status}`,
        cls: "systemsculpt-status-text"
      });
    } else if (statusEl && remove) {
      statusEl.remove();
      this.processingFiles.delete(fileId);
    }
    if (this.processingStatus) {
      this.processingStatus.style.display = this.processingFiles.size > 0 ? "block" : "none";
    }
    if (remove || status.includes("successfully") || status.includes("completed") || status.includes("Error:")) {
      const timeout = setTimeout(() => {
        this.updateProcessingStatus(file, "", "", true);
        this.processingTimeouts.delete(fileId);
      }, 3e3);
      this.processingTimeouts.set(fileId, timeout);
    }
  }
  setupContextPanel() {
    const titleEl = this.contextPanel.querySelector(".systemsculpt-drawer-title");
    if (!titleEl)
      return;
    const contextCount = titleEl.createSpan({
      cls: "systemsculpt-drawer-count",
      text: "0"
    });
    this.syncStatusEl = titleEl.createSpan({
      cls: "systemsculpt-sync-status synced"
    });
    (0, import_obsidian24.setIcon)(this.syncStatusEl, "check");
    const contextButton = titleEl.createEl("button", {
      cls: "systemsculpt-context-add-button"
    });
    (0, import_obsidian24.setIcon)(contextButton, "plus");
    contextButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.addContextFile();
    });
    this.updateContextPanel();
  }
  updateSyncStatus(syncing = false) {
    if (!this.syncStatusEl)
      return;
    this.isSyncing = syncing;
    this.syncStatusEl.empty();
    if (syncing) {
      this.syncStatusEl.removeClass("synced");
      this.syncStatusEl.addClass("syncing");
      (0, import_obsidian24.setIcon)(this.syncStatusEl, "loader-2");
    } else {
      this.syncStatusEl.removeClass("syncing");
      this.syncStatusEl.addClass("synced");
      (0, import_obsidian24.setIcon)(this.syncStatusEl, "check");
    }
  }
  async checkSyncStatus() {
    if (this.contextFiles.size === 0) {
      this.updateSyncStatus(false);
      return;
    }
    this.updateSyncStatus(true);
    this.updateSyncStatus(false);
  }
  updateContextPanel() {
    var _a;
    if (!this.contextPanel)
      return;
    const header = this.contextPanel.querySelector(".systemsculpt-drawer-header");
    const content = this.contextPanel.querySelector(".systemsculpt-drawer-content");
    const count = this.contextPanel.querySelector(".systemsculpt-drawer-count");
    if (!header || !content || !count)
      return;
    count.textContent = this.contextFiles.size.toString();
    content.empty();
    if (this.contextFiles.size === 0) {
      content.createEl("div", {
        cls: "systemsculpt-drawer-empty",
        text: "No context files added yet. Click the plus button to add files in your chat."
      });
      return;
    }
    const categories = {
      text: {
        label: "Text Files",
        files: [],
        extensions: ["md", "txt", "markdown"]
      },
      images: {
        label: "Images",
        files: [],
        extensions: ["jpg", "jpeg", "png", "gif", "webp", "svg"]
      },
      audio: {
        label: "Audio Files",
        files: [],
        extensions: ["mp3", "wav", "ogg", "m4a"]
      },
      documents: {
        label: "Documents",
        files: [],
        extensions: ["doc", "docx", "ppt", "pptx", "xls", "xlsx", "pdf"]
      }
    };
    const documentGroups = new Map();
    const nonExtractedFiles = new Set();
    for (const filePath of this.contextFiles) {
      const cleanPath = filePath.replace(/^\[\[(.*?)\]\]$/, "$1");
      if (cleanPath.includes("/Extractions/")) {
        const parts = cleanPath.split("/");
        const extractionDirIndex = parts.indexOf("Extractions");
        if (extractionDirIndex >= 0 && extractionDirIndex + 1 < parts.length) {
          const sourceDoc = parts[extractionDirIndex + 1];
          if (!documentGroups.has(sourceDoc)) {
            documentGroups.set(sourceDoc, new Set());
          }
          (_a = documentGroups.get(sourceDoc)) == null ? void 0 : _a.add(filePath);
        } else {
          nonExtractedFiles.add(filePath);
        }
      } else {
        nonExtractedFiles.add(filePath);
      }
    }
    this.categorizeFiles(Array.from(nonExtractedFiles), categories);
    for (const categoryKey of ["text", "images", "audio"]) {
      const category = categories[categoryKey];
      if (category.files.length > 0) {
        this.renderCategory(content, category);
      }
    }
    if (categories.documents.files.length > 0 || documentGroups.size > 0) {
      content.createEl("div", {
        cls: "systemsculpt-drawer-category",
        text: "Documents"
      });
      this.renderFiles(content, categories.documents.files);
      for (const [sourceDoc, extractedFiles] of documentGroups) {
        content.createEl("div", {
          cls: "systemsculpt-drawer-category",
          text: `\u{1F4C4} ${sourceDoc} Extractions`
        });
        const extractedCategories = this.createCategories();
        this.categorizeFiles(Array.from(extractedFiles), extractedCategories);
        const textFiles = extractedCategories.text.files;
        if (textFiles.length > 0) {
          this.renderFiles(content, textFiles);
        }
        const imageFiles = extractedCategories.images.files;
        if (imageFiles.length > 0) {
          this.renderFiles(content, imageFiles);
        }
        const otherFiles = [
          ...extractedCategories.audio.files,
          ...extractedCategories.documents.files
        ];
        if (otherFiles.length > 0) {
          this.renderFiles(content, otherFiles);
        }
      }
    }
  }
  createCategories() {
    return {
      text: {
        label: "Text Files",
        files: [],
        extensions: ["md", "txt", "markdown"]
      },
      images: {
        label: "Images",
        files: [],
        extensions: ["jpg", "jpeg", "png", "gif", "webp", "svg"]
      },
      audio: {
        label: "Audio Files",
        files: [],
        extensions: ["mp3", "wav", "ogg", "m4a"]
      },
      documents: {
        label: "Documents",
        files: [],
        extensions: ["doc", "docx", "ppt", "pptx", "xls", "xlsx", "pdf"]
      }
    };
  }
  categorizeFiles(files, categories) {
    for (const filePath of files) {
      const linkText = filePath.replace(/^\[\[(.*?)\]\]$/, "$1");
      const resolvedFile = this.app.metadataCache.getFirstLinkpathDest(linkText, "");
      if (resolvedFile instanceof import_obsidian24.TFile) {
        const extension = resolvedFile.extension.toLowerCase();
        let categoryFound = false;
        for (const [category, info] of Object.entries(categories)) {
          if (info.extensions.includes(extension)) {
            info.files.push({ file: resolvedFile, path: filePath, linkText });
            categoryFound = true;
            break;
          }
        }
        if (!categoryFound) {
          categories.documents.files.push({
            file: resolvedFile,
            path: filePath,
            linkText
          });
        }
      }
    }
  }
  renderCategory(container, category) {
    if (category.files.length === 0)
      return;
    container.createEl("div", {
      cls: "systemsculpt-drawer-category",
      text: category.label
    });
    this.renderFiles(container, category.files);
  }
  renderFiles(container, files) {
    files.sort((a, b) => a.file.basename.localeCompare(b.file.basename));
    const imagePreview = document.body.createEl("img", {
      cls: "systemsculpt-preview systemsculpt-image-preview"
    });
    const markdownPreview = document.body.createDiv({
      cls: "systemsculpt-preview systemsculpt-markdown-preview"
    });
    let isMarkdownPreviewVisible = false;
    const handleWheel = (e) => {
      if (!isMarkdownPreviewVisible)
        return;
      e.preventDefault();
      const scrollAmount = e.deltaY;
      markdownPreview.scrollTop += scrollAmount;
    };
    document.addEventListener("wheel", handleWheel, { passive: false });
    this.register(() => {
      document.removeEventListener("wheel", handleWheel);
    });
    const calculatePreviewDimensions = (naturalWidth, naturalHeight, viewportWidth, viewportHeight) => {
      const maxWidth = Math.min(viewportWidth * 0.4, naturalWidth);
      const maxHeight = Math.min(viewportHeight * 0.6, naturalHeight);
      let width = naturalWidth;
      let height = naturalHeight;
      if (width > maxWidth) {
        width = maxWidth;
        height = naturalHeight * maxWidth / naturalWidth;
      }
      if (height > maxHeight) {
        height = maxHeight;
        width = naturalWidth * maxHeight / naturalHeight;
      }
      return { width, height };
    };
    const updatePreviewPosition = (e, previewEl) => {
      if (!previewEl)
        return;
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const rect = previewEl.getBoundingClientRect();
      const width = rect.width;
      const height = rect.height;
      let x = e.clientX + 16;
      let y = e.clientY + 16;
      if (x + width > viewportWidth) {
        x = e.clientX - width - 16;
      }
      if (y + height > viewportHeight) {
        y = e.clientY - height - 16;
      }
      previewEl.style.left = `${x}px`;
      previewEl.style.top = `${y}px`;
    };
    this.register(() => {
      imagePreview.remove();
      markdownPreview.remove();
    });
    for (const { file, path, linkText } of files) {
      const item = container.createEl("div", {
        cls: "systemsculpt-drawer-item"
      });
      const pathEl = item.createEl("div", {
        cls: "systemsculpt-drawer-item-path"
      });
      const iconContainer = pathEl.createSpan({
        cls: "systemsculpt-file-icon"
      });
      const extension = file.extension.toLowerCase();
      let iconName = "file";
      const link = pathEl.createEl("a", {
        cls: "internal-link",
        text: file.basename,
        attr: {
          href: path,
          "data-href": path
        }
      });
      if (["md", "txt", "markdown"].includes(extension)) {
        iconName = "file-text";
        const showMarkdownPreview = async (e) => {
          try {
            const mdFile = this.app.vault.getAbstractFileByPath(file.path);
            if (mdFile instanceof import_obsidian24.TFile) {
              const content = await this.app.vault.read(mdFile);
              markdownPreview.empty();
              markdownPreview.createDiv({
                cls: "systemsculpt-preview-header",
                text: file.basename
              });
              const contentEl = markdownPreview.createDiv();
              await import_obsidian25.MarkdownRenderer.renderMarkdown(content.length > 4e3 ? content.slice(0, 4e3) + "\n\n---\n\n**Click to view full document** (showing first 4000 of " + content.length + " characters)" : content, contentEl, file.path, this);
              markdownPreview.classList.add("visible");
              isMarkdownPreviewVisible = true;
              updatePreviewPosition(e, markdownPreview);
            }
          } catch (error) {
            console.error("Failed to load markdown preview:", error);
          }
        };
        const hideMarkdownPreview = () => {
          markdownPreview.classList.remove("visible");
          markdownPreview.empty();
          isMarkdownPreviewVisible = false;
          markdownPreview.scrollTop = 0;
        };
        item.addEventListener("mouseenter", showMarkdownPreview);
        item.addEventListener("mouseleave", hideMarkdownPreview);
        item.addEventListener("mousemove", (e) => updatePreviewPosition(e, markdownPreview));
        markdownPreview.addEventListener("mouseleave", hideMarkdownPreview);
        this.register(() => {
          markdownPreview.removeEventListener("mouseleave", hideMarkdownPreview);
        });
        this.contextPanel.addEventListener("mouseleave", hideMarkdownPreview);
      } else if (["jpg", "jpeg", "png", "gif", "webp", "svg"].includes(extension)) {
        iconName = "image";
        const showImagePreview = async (e) => {
          try {
            const imageFile = this.app.vault.getAbstractFileByPath(file.path);
            if (imageFile instanceof import_obsidian24.TFile) {
              const arrayBuffer = await this.app.vault.readBinary(imageFile);
              const blob = new Blob([arrayBuffer]);
              const url = URL.createObjectURL(blob);
              imagePreview.src = url;
              imagePreview.onload = () => {
                URL.revokeObjectURL(url);
                imagePreview.classList.add("visible");
                const { width, height } = calculatePreviewDimensions(imagePreview.naturalWidth, imagePreview.naturalHeight, window.innerWidth, window.innerHeight);
                imagePreview.style.width = `${width}px`;
                imagePreview.style.height = `${height}px`;
                updatePreviewPosition(e, imagePreview);
              };
            }
          } catch (error) {
            console.error("Failed to load image preview:", error);
          }
        };
        const hideImagePreview = () => {
          imagePreview.classList.remove("visible");
          imagePreview.src = "";
          imagePreview.style.width = "";
          imagePreview.style.height = "";
        };
        item.addEventListener("mouseenter", showImagePreview);
        item.addEventListener("mouseleave", hideImagePreview);
        item.addEventListener("mousemove", (e) => updatePreviewPosition(e, imagePreview));
        imagePreview.addEventListener("mouseleave", hideImagePreview);
        this.register(() => {
          imagePreview.removeEventListener("mouseleave", hideImagePreview);
        });
        this.contextPanel.addEventListener("mouseleave", hideImagePreview);
      } else if (["mp3", "wav", "ogg", "m4a"].includes(extension)) {
        iconName = "audio-lines";
      } else if (["doc", "docx", "ppt", "pptx", "xls", "xlsx", "pdf"].includes(extension)) {
        iconName = "file";
      }
      (0, import_obsidian24.setIcon)(iconContainer, iconName);
      link.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.app.workspace.openLinkText(linkText, "", true);
      });
      const meta = item.createDiv({ cls: "systemsculpt-context-meta" });
      const removeBtn = meta.createEl("button", {
        cls: "systemsculpt-drawer-item-remove",
        text: "\xD7"
      });
      removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.removeContextFile(path);
      });
      const updateMetaInfo = () => {
        var _a;
        const availableWidth = container.offsetWidth - 40;
        const fileNameWidth = link.offsetWidth;
        const removeBtnWidth = 24;
        const remainingWidth = availableWidth - fileNameWidth - removeBtnWidth;
        const existingMeta = meta.querySelectorAll(".systemsculpt-context-type, .systemsculpt-context-size, .systemsculpt-context-token-count");
        existingMeta.forEach((el) => el.remove());
        if (remainingWidth > 150) {
          if (remainingWidth > 200) {
            const type = meta.createDiv({ cls: "systemsculpt-context-type" });
            type.setText(file.extension.toUpperCase());
          }
          if (remainingWidth > 100) {
            const size = meta.createDiv({ cls: "systemsculpt-context-size" });
            size.setText(this.formatFileSize(((_a = file.stat) == null ? void 0 : _a.size) || 0));
          }
          if (remainingWidth > 250 && (file.extension === "md" || file.extension === "txt")) {
            const tokenCount = meta.createDiv({
              cls: "systemsculpt-context-token-count"
            });
            const count = this.tokenCounts.get(file.path) || 0;
            tokenCount.setText(this.tokenCounter.formatTokenCount(count));
            if (!this.tokenCounts.has(file.path)) {
              this.updateTokenCount(file).then(() => {
                tokenCount.setText(this.tokenCounter.formatTokenCount(this.tokenCounts.get(file.path) || 0));
              });
            }
          }
        }
      };
      updateMetaInfo();
      const resizeObserver = new ResizeObserver(() => {
        updateMetaInfo();
      });
      resizeObserver.observe(container);
      this.register(() => {
        resizeObserver.disconnect();
      });
    }
  }
  async addContextFile() {
    const modal = new ContextSelectionModal(this.app, async (files) => {
      for (const file of files) {
        try {
          await this.addFileToContext(file);
        } catch (error) {
          this.updateProcessingStatus(file, `Error: ${error.message}`, "x-circle");
          setTimeout(() => {
            this.updateProcessingStatus(file, "", "", true);
          }, 3e3);
        }
      }
    }, this.plugin);
    modal.open();
  }
  async removeContextFile(filePath) {
    const normalizedPath = filePath.replace(/^\[\[(.*?)\]\]$/, "$1");
    this.contextFiles.delete(filePath);
    this.contextFiles.delete(`[[${normalizedPath}]]`);
    this.updateContextPanel();
    await this.onContextChange();
  }
  async addFileToContext(file) {
    const extension = file.extension.toLowerCase();
    const datalabDocExtensions = [
      "pdf",
      "doc",
      "docx",
      "xls",
      "xlsx",
      "ppt",
      "pptx"
    ];
    const audioExtensions = ["wav", "m4a", "webm", "ogg", "mp3"];
    if (!await LicenseChecker.checkLicenseForFile(file, this.app, this.plugin)) {
      return;
    }
    if (datalabDocExtensions.includes(extension)) {
      try {
        const newMdPath = await this.processDocumentFile(file);
        const wikiLink = `[[${newMdPath}]]`;
        this.contextFiles.add(wikiLink);
      } catch (error) {
        this.updateProcessingStatus(file, `Error: ${error.message}`, "x-circle");
      }
    } else if (audioExtensions.includes(extension)) {
      try {
        const newMdPath = await this.processAudioFile(file);
        const wikiLink = `[[${newMdPath}]]`;
        this.contextFiles.add(wikiLink);
      } catch (error) {
        this.updateProcessingStatus(file, `Error: ${error.message}`, "x-circle");
      }
    } else {
      const wikiLink = `[[${file.path}]]`;
      this.contextFiles.add(wikiLink);
    }
    this.updateContextPanel();
    await this.onContextChange();
  }
  async processDocumentFile(file) {
    var _a, _b;
    this.updateProcessingStatus(file, "Uploading...", "upload");
    const { documentId, status, cached } = await this.sculptService.uploadDocument(file);
    if (!cached) {
      this.updateProcessingStatus(file, "Processing...", "loader-2");
      const success = await this.pollUntilComplete(documentId);
      if (!success) {
        throw new Error("Document processing not completed in time.");
      }
    }
    this.updateProcessingStatus(file, "Downloading results...", "download");
    const extractionData = await this.downloadExtraction(documentId);
    const extractionFolder = this.sculptService.extractionsDirectory;
    const baseName = file.basename.replace(/[\\/:*?"<>|]/g, "-").trim();
    const parentPath = extractionFolder ? `${extractionFolder}/${baseName}` : `${(_b = (_a = file.parent) == null ? void 0 : _a.path) != null ? _b : ""}/${baseName}`;
    await this.app.vault.createFolder(parentPath).catch(() => {
    });
    const extractedText = this.getExtractionMarkdown(extractionData);
    const newMdPath = `${parentPath}/${baseName}.md`;
    try {
      await this.app.vault.create(newMdPath, extractedText);
    } catch (error) {
      if (!(error instanceof Error) || !error.message.includes("already exists")) {
        throw error;
      }
    }
    const mdWikiLink = `[[${newMdPath}]]`;
    this.contextFiles.add(mdWikiLink);
    if (extractionData.images && typeof extractionData.images === "object") {
      for (const [filename, base64Data] of Object.entries(extractionData.images)) {
        const imagePath = `${parentPath}/${filename.replace(/[\\/:*?"<>|]/g, "-").trim()}`;
        try {
          await this.app.vault.createBinary(imagePath, this.decodeBase64(base64Data));
        } catch (error) {
          if (!(error instanceof Error) || !error.message.includes("already exists")) {
            throw error;
          }
        }
        const imageWikiLink = `[[${imagePath}]]`;
        this.contextFiles.add(imageWikiLink);
      }
    }
    return newMdPath;
  }
  getExtractionMarkdown(extractionData) {
    var _a, _b, _c;
    const text = (_a = extractionData == null ? void 0 : extractionData.text) != null ? _a : "";
    const metadata = (_b = extractionData == null ? void 0 : extractionData.metadata) != null ? _b : {};
    const pageCount = (_c = extractionData == null ? void 0 : extractionData.pageCount) != null ? _c : 0;
    return `# Document Extraction
Page Count: ${pageCount}

${text}

${metadata ? `
# Metadata
${JSON.stringify(metadata, null, 2)}` : ""}
`;
  }
  decodeBase64(base64String) {
    const binaryStr = window.atob(base64String);
    const len = binaryStr.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryStr.charCodeAt(i);
    }
    return bytes.buffer;
  }
  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  getContextFiles() {
    return this.contextFiles;
  }
  async setContextFiles(files) {
    this.contextFiles = new Set(files);
    this.updateContextPanel();
    await this.checkSyncStatus();
  }
  getContainer() {
    return this.contextPanel;
  }
  unload() {
    this.processingTimeouts.forEach((timeout) => {
      clearTimeout(timeout);
    });
    this.processingTimeouts.clear();
    this.processingFiles.forEach((statusEl) => {
      statusEl.remove();
    });
    this.processingFiles.clear();
    if (this.processingStatus) {
      this.processingStatus.style.display = "none";
    }
    this.drawer.unload();
  }
  async processAudioFile(file, timestamped = false) {
    var _a, _b;
    this.updateProcessingStatus(file, "Transcribing audio...", "loader-2");
    try {
      const transcriptionService = TranscriptionService.getInstance(this.plugin);
      const text = await transcriptionService.transcribeFile(file, {
        type: "note",
        timestamped,
        onProgress: (progress, status) => {
          this.updateProcessingStatus(file, status, "loader-2");
        }
      });
      const extractionFolder = this.sculptService.extractionsDirectory;
      const baseName = file.basename.replace(/[\\/:*?"<>|]/g, "-").trim();
      const parentPath = extractionFolder ? `${extractionFolder}/${baseName}` : `${(_b = (_a = file.parent) == null ? void 0 : _a.path) != null ? _b : ""}/${baseName}`;
      await this.app.vault.createFolder(parentPath).catch(() => {
      });
      const outputPath = `${parentPath}/${baseName}.md`;
      const finalContent = `# Audio Transcription
Source: ${file.basename}
Transcribed: ${new Date().toISOString()}

${text}`;
      try {
        const existingFile = this.app.vault.getAbstractFileByPath(outputPath);
        if (existingFile instanceof import_obsidian24.TFile) {
          await this.app.vault.modify(existingFile, finalContent);
        } else {
          await this.app.vault.create(outputPath, finalContent);
        }
      } catch (error) {
        console.error("File operation failed:", error);
        throw error;
      }
      this.updateProcessingStatus(file, "Added successfully!", "check-circle");
      return outputPath;
    } catch (error) {
      console.error("Audio transcription error:", error);
      this.updateProcessingStatus(file, `Error: ${error instanceof Error ? error.message : String(error)}`, "x-circle");
      throw error;
    }
  }
  async pollUntilComplete(documentId) {
    var _a, _b, _c;
    const maxTries = 50;
    for (let i = 0; i < maxTries; i++) {
      await this.sleep(3e3);
      const url = `${this.sculptService.baseUrl}/api/v1/documents/${documentId}`;
      const resp = await fetch(url);
      if (!resp.ok)
        continue;
      const data = await resp.json();
      if (((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.status) === "completed")
        return true;
      if (((_b = data == null ? void 0 : data.data) == null ? void 0 : _b.status) === "error") {
        throw new Error(((_c = data == null ? void 0 : data.data) == null ? void 0 : _c.error) || "Processing failed");
      }
    }
    return false;
  }
  async downloadExtraction(documentId) {
    const url = `${this.sculptService.baseUrl}/api/v1/documents/${documentId}/download`;
    const resp = await fetch(url);
    if (!resp.ok) {
      throw new Error(`Download extraction failed: ${resp.status}`);
    }
    const data = await resp.json();
    if (!data.success) {
      throw new Error(data.error || "Failed to download extraction");
    }
    return data.data.extractionResult;
  }
  async calculateTokenCount(file) {
    try {
      if (file.extension === "md" || file.extension === "txt") {
        const content = await this.app.vault.read(file);
        return this.tokenCounter.approximateTokenCount(content);
      }
      return 0;
    } catch (error) {
      console.error("Error calculating tokens for file:", file.path, error);
      return 0;
    }
  }
  async updateTokenCount(file) {
    const count = await this.calculateTokenCount(file);
    this.tokenCounts.set(file.path, count);
  }
  formatFileSize(bytes) {
    if (bytes < 1024)
      return bytes + " B";
    const kb = bytes / 1024;
    if (kb < 1024)
      return kb.toFixed(1) + " KB";
    const mb = kb / 1024;
    return mb.toFixed(1) + " MB";
  }
};

// src/views/ChatView.ts
init_SystemPromptService();

// src/modals/LoadChatModal.ts
var import_obsidian26 = __toModule(require("obsidian"));
init_SystemPromptService();
var LoadChatModal = class extends import_obsidian26.Modal {
  constructor(app, onSelect, plugin) {
    super(app);
    this.chatItems = [];
    this.flattenedItems = [];
    this.selectedChatId = null;
    this.selectedCardIndex = 0;
    this.chatCards = [];
    this.currentSearchResults = [];
    this.isKeyboardNavActive = false;
    this.batchSize = 20;
    this.currentBatch = 0;
    this.isLoading = false;
    this.cardCache = new Map();
    this.getSearchableFields = (chat) => {
      return [
        { field: "title", text: chat.title, weight: 200 },
        { field: "content", text: chat.messages.map((m) => this.getMessageContent(m)).join(" "), weight: 100 }
      ];
    };
    this.onSelect = onSelect;
    this.plugin = plugin;
    this.searchService = new SearchService();
    this.chatStorage = new ChatStorageService(app, plugin.settings.chatsDirectory);
    this.setupVirtualScroller();
  }
  setupVirtualScroller() {
    this.virtualScroller = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && !this.isLoading) {
          this.loadNextBatch();
        }
      });
    }, {
      root: null,
      rootMargin: "100px",
      threshold: 0.1
    });
  }
  async loadNextBatch() {
    if (this.isLoading || this.currentBatch * this.batchSize >= this.currentSearchResults.length) {
      return;
    }
    this.isLoading = true;
    const start = this.currentBatch * this.batchSize;
    const end = Math.min(start + this.batchSize, this.currentSearchResults.length);
    const batch = this.currentSearchResults.slice(start, end);
    const fragment = document.createDocumentFragment();
    const sectionsContainer = fragment.createDiv({
      cls: "systemsculpt-chat-sections-container"
    });
    await Promise.all(batch.map(async (result) => {
      await this.renderChatCard(result.item, result.matches || [], sectionsContainer);
    }));
    this.chatGrid.appendChild(fragment);
    this.currentBatch++;
    this.isLoading = false;
    if (end < this.currentSearchResults.length) {
      const sentinel = this.chatGrid.createDiv({
        cls: "systemsculpt-chat-sentinel"
      });
      this.virtualScroller.observe(sentinel);
    }
  }
  async flattenChatItem(item) {
    const modelName = await this.getModelName(item.selectedModelId);
    const promptLabel = await this.getPromptLabel(item);
    const lastMessage = item.messages[item.messages.length - 1];
    const messageContent = item.messages.map((msg) => this.getMessageContent(msg)).join("\n");
    return {
      id: item.id,
      searchText: `${messageContent} ${modelName} ${promptLabel}`.toLowerCase(),
      modelName,
      promptLabel,
      lastMessage: lastMessage ? this.getMessageContent(lastMessage) : "",
      messageContent,
      item
    };
  }
  createProgressModal() {
    const { contentEl } = this;
    this.progressContainer = contentEl.createDiv({
      cls: "systemsculpt-progress-overlay"
    });
    const statusContainer = this.progressContainer.createDiv({
      cls: "systemsculpt-progress-status"
    });
    const statusIcon = statusContainer.createDiv({
      cls: "systemsculpt-progress-status-icon"
    });
    (0, import_obsidian26.setIcon)(statusIcon, "loader-2");
    this.progressText = statusContainer.createSpan({
      text: "Loading chats..."
    });
  }
  updateProgress(current, total) {
    if (current === total) {
      this.progressContainer.remove();
    }
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-chat-modal");
    this.createProgressModal();
    try {
      const chats = await this.chatStorage.loadChats();
      this.chatItems = chats.sort((a, b) => b.lastModified - a.lastModified);
      this.flattenedItems = await Promise.all(this.chatItems.map(async (item, index) => {
        const flatItem = await this.flattenChatItem(item);
        this.updateProgress(index + 1, this.chatItems.length);
        return flatItem;
      }));
    } catch (error) {
      console.error("Failed to load chats:", error);
      this.chatItems = [];
      this.flattenedItems = [];
    }
    const searchContainer = contentEl.createDiv({
      cls: "systemsculpt-chat-search"
    });
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search chats..."
    });
    this.chatGrid = contentEl.createDiv({ cls: "systemsculpt-chat-grid" });
    await this.renderChats(this.flattenedItems.map((item) => ({
      item: item.item,
      matches: [],
      score: 0
    })));
    const buttonContainer = contentEl.createDiv({
      cls: "systemsculpt-button-container"
    });
    const newChatButton = buttonContainer.createEl("button", {
      cls: "systemsculpt-button",
      text: "Open New Chat Instead"
    });
    newChatButton.addEventListener("click", () => this.openNewChat());
    this.setupEventListeners();
    this.containerEl.style.display = "";
    this.searchInput.focus();
  }
  setupEventListeners() {
    this.searchInput.addEventListener("input", () => {
      const query = this.searchInput.value;
      if (!query) {
        this.currentSearchResults = this.flattenedItems.map((item) => ({
          item: item.item,
          matches: [],
          score: 0
        }));
        this.selectedCardIndex = 0;
        this.isKeyboardNavActive = false;
        this.renderChats(this.currentSearchResults);
        return;
      }
      if (query.length < 3) {
        this.chatGrid.empty();
        this.chatCards = [];
        this.selectedCardIndex = 0;
        this.isKeyboardNavActive = false;
        const messageEl = this.chatGrid.createDiv({
          cls: "systemsculpt-chat-empty"
        });
        messageEl.setText(`Please enter at least 3 characters to search (${query.length}/3)`);
        return;
      }
      const searchTerms = query.toLowerCase().split(/\s+/).filter(Boolean);
      const results = this.flattenedItems.map((flatItem) => {
        const allTermsExist = searchTerms.every((term) => flatItem.searchText.includes(term));
        if (!allTermsExist) {
          return { item: flatItem.item, matches: [], score: 0 };
        }
        let score = 0;
        const matches = [];
        searchTerms.forEach((term) => {
          let pos = 0;
          while ((pos = flatItem.searchText.indexOf(term, pos)) !== -1) {
            score += 1;
            matches.push({
              field: "content",
              text: flatItem.searchText.slice(Math.max(0, pos - 20), pos + term.length + 20),
              indices: [pos],
              matchQuality: 1
            });
            pos += 1;
          }
        });
        if (flatItem.searchText.includes(query.toLowerCase())) {
          score *= 2;
        }
        return {
          item: flatItem.item,
          matches,
          score
        };
      }).filter((result) => result.score > 0).sort((a, b) => {
        if (b.score !== a.score) {
          return b.score - a.score;
        }
        return b.item.lastModified - a.item.lastModified;
      });
      this.currentSearchResults = results;
      this.selectedCardIndex = 0;
      this.isKeyboardNavActive = false;
      this.renderChats(results);
    });
    this.searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Tab") {
        e.preventDefault();
        if (this.chatCards.length === 0)
          return;
        if (!this.isKeyboardNavActive) {
          this.isKeyboardNavActive = true;
          this.selectedCardIndex = 0;
        } else {
          if (e.shiftKey) {
            this.selectedCardIndex = (this.selectedCardIndex - 1 + this.chatCards.length) % this.chatCards.length;
          } else {
            this.selectedCardIndex = (this.selectedCardIndex + 1) % this.chatCards.length;
          }
        }
        this.updateSelectedCard();
      } else if (e.key === "Enter" && this.isKeyboardNavActive && this.chatCards.length > 0) {
        e.preventDefault();
        const selectedCard = this.chatCards[this.selectedCardIndex];
        if (selectedCard == null ? void 0 : selectedCard.dataset.chatId) {
          this.onSelect(selectedCard.dataset.chatId);
          this.close();
        }
      } else if (e.key === "Escape") {
        if (this.isKeyboardNavActive) {
          e.preventDefault();
          this.isKeyboardNavActive = false;
          this.updateSelectedCard();
        }
      }
    });
    this.contentEl.addEventListener("click", () => {
      if (this.isKeyboardNavActive) {
        this.isKeyboardNavActive = false;
        this.updateSelectedCard();
      }
    });
  }
  renderChats(searchResults) {
    var _a;
    if (!this.chatGrid)
      return;
    this.chatGrid.empty();
    this.chatCards = [];
    this.currentBatch = 0;
    this.selectedCardIndex = 0;
    const srMap = new Map(searchResults.map((sr) => [sr.item.id, sr.matches || []]));
    const favorites = [];
    const nonFavorites = [];
    searchResults.forEach((sr) => {
      if (this.plugin.settings.favoriteChats.includes(sr.item.id)) {
        favorites.push(sr.item);
      } else {
        nonFavorites.push(sr.item);
      }
    });
    if (favorites.length > 0) {
      const header = this.chatGrid.createDiv({
        cls: "systemsculpt-provider-header"
      });
      header.createSpan({ text: "Favorites" });
      favorites.sort((a, b) => b.lastModified - a.lastModified);
      favorites.forEach((chat) => {
        const matches = srMap.get(chat.id) || [];
        const card = this.renderChatCard(chat, matches);
        if (card) {
          this.chatGrid.appendChild(card);
        }
      });
    }
    if (nonFavorites.length > 0) {
      const recentHeader = this.chatGrid.createDiv({
        cls: "systemsculpt-provider-header"
      });
      recentHeader.createSpan({ text: "Recent Chats" });
      nonFavorites.sort((a, b) => b.lastModified - a.lastModified);
      nonFavorites.forEach((chat) => {
        const matches = srMap.get(chat.id) || [];
        const card = this.renderChatCard(chat, matches);
        if (card) {
          this.chatGrid.appendChild(card);
        }
      });
    }
    if (favorites.length === 0 && nonFavorites.length === 0) {
      if ((_a = this.searchInput) == null ? void 0 : _a.value) {
        const emptyState = this.chatGrid.createDiv({
          cls: "systemsculpt-chat-empty"
        });
        emptyState.setText("No chats found matching your search.");
      } else {
        const emptyState = this.chatGrid.createDiv({
          cls: "systemsculpt-chat-empty"
        });
        emptyState.setText("No chat history found.");
      }
    }
    if (this.virtualScroller) {
      const sentinel = this.chatGrid.createDiv({
        cls: "systemsculpt-chat-sentinel"
      });
      this.virtualScroller.observe(sentinel);
    }
    if (this.isKeyboardNavActive && this.chatCards.length > 0) {
      this.updateSelectedCard();
    }
  }
  attachCardEventListeners(card, item) {
    card.addEventListener("click", () => {
      this.onSelect(item.id);
      this.close();
    });
    const favoriteButton = card.querySelector(".systemsculpt-favorite-button");
    if (favoriteButton) {
      favoriteButton.addEventListener("click", async (e) => {
        var _a;
        e.stopPropagation();
        const target = e.target;
        const chatCard = target.closest(".systemsculpt-chat-card");
        if (!chatCard)
          return;
        const isFavorite = !this.plugin.settings.favoriteChats.includes(item.id);
        favoriteButton.classList.toggle("is-favorite", isFavorite);
        favoriteButton.setAttribute("aria-label", isFavorite ? "Remove from favorites" : "Add to favorites");
        if (!Array.isArray(this.plugin.settings.favoriteChats)) {
          this.plugin.settings.favoriteChats = [];
        }
        if (isFavorite) {
          if (!this.plugin.settings.favoriteChats.includes(item.id)) {
            this.plugin.settings.favoriteChats.push(item.id);
          }
        } else {
          this.plugin.settings.favoriteChats = this.plugin.settings.favoriteChats.filter((id) => id !== item.id);
        }
        await this.plugin.saveSettings();
        if (isFavorite) {
          let favoritesHeader2 = this.chatGrid.querySelector(".systemsculpt-provider-header");
          if (!favoritesHeader2 || !((_a = favoritesHeader2.textContent) == null ? void 0 : _a.includes("Favorites"))) {
            favoritesHeader2 = this.chatGrid.createDiv({ cls: "systemsculpt-provider-header" });
            favoritesHeader2.createSpan({ text: "Favorites" });
            this.chatGrid.insertBefore(favoritesHeader2, this.chatGrid.firstChild);
          }
          const nextElement = Array.from(this.chatGrid.children).find((el, index) => {
            if (index <= 1)
              return false;
            return !this.plugin.settings.favoriteChats.includes(el.dataset.chatId || "");
          });
          if (nextElement) {
            this.chatGrid.insertBefore(chatCard, nextElement);
          } else {
            const recentHeader2 = Array.from(this.chatGrid.children).find((el) => {
              var _a2;
              return el.classList.contains("systemsculpt-provider-header") && ((_a2 = el.textContent) == null ? void 0 : _a2.includes("Recent Chats"));
            });
            this.chatGrid.insertBefore(chatCard, recentHeader2 || null);
          }
        } else {
          let recentHeader2 = Array.from(this.chatGrid.children).find((el) => {
            var _a2;
            return el.classList.contains("systemsculpt-provider-header") && ((_a2 = el.textContent) == null ? void 0 : _a2.includes("Recent Chats"));
          });
          if (!recentHeader2) {
            recentHeader2 = this.chatGrid.createDiv({ cls: "systemsculpt-provider-header" });
            recentHeader2.createSpan({ text: "Recent Chats" });
            this.chatGrid.appendChild(recentHeader2);
          }
          if (recentHeader2.nextSibling) {
            this.chatGrid.insertBefore(chatCard, recentHeader2.nextSibling);
          } else {
            this.chatGrid.appendChild(chatCard);
          }
        }
        const favoritesHeader = this.chatGrid.querySelector(".systemsculpt-provider-header");
        const recentHeader = Array.from(this.chatGrid.children).find((el) => {
          var _a2;
          return el.classList.contains("systemsculpt-provider-header") && ((_a2 = el.textContent) == null ? void 0 : _a2.includes("Recent Chats"));
        });
        if (favoritesHeader && !this.plugin.settings.favoriteChats.length) {
          favoritesHeader.remove();
        }
        if (recentHeader) {
          const hasRecentChats = Array.from(this.chatGrid.children).some((el) => el.classList.contains("systemsculpt-chat-card") && !this.plugin.settings.favoriteChats.includes(el.dataset.chatId || ""));
          if (!hasRecentChats) {
            recentHeader.remove();
          }
        }
      });
    }
  }
  renderChatCard(item, matches = [], sectionsContainer) {
    var _a;
    const cachedCard = this.cardCache.get(item.id);
    if (cachedCard) {
      const card2 = cachedCard.cloneNode(true);
      if (matches.length > 0) {
        this.updateCardHighlights(card2, matches);
      }
      this.attachCardEventListeners(card2, item);
      card2.dataset.chatId = item.id;
      this.chatCards.push(card2);
      return card2;
    }
    const flatItem = this.flattenedItems.find((f) => f.id === item.id);
    if (!flatItem)
      return document.createElement("div");
    const isSelected = this.isKeyboardNavActive && this.chatCards.length === this.selectedCardIndex;
    const card = document.createElement("div");
    card.className = `systemsculpt-chat-card ${item.id === this.selectedChatId ? "selected" : ""} ${isSelected ? "systemsculpt-keyboard-selected" : ""}`;
    card.dataset.chatId = item.id;
    this.chatCards.push(card);
    const favoriteButton = card.createDiv({
      cls: `systemsculpt-favorite-button ${this.plugin.settings.favoriteChats.includes(item.id) ? "is-favorite" : ""}`,
      attr: {
        "aria-label": this.plugin.settings.favoriteChats.includes(item.id) ? "Remove from favorites" : "Add to favorites",
        role: "button"
      }
    });
    (0, import_obsidian26.setIcon)(favoriteButton, "star");
    const header = card.createDiv({ cls: "systemsculpt-chat-card-header" });
    const leftContainer = header.createDiv({ cls: "systemsculpt-chat-header-left" });
    const modelBadge = leftContainer.createDiv({ cls: "systemsculpt-chat-badge" });
    (0, import_obsidian26.setIcon)(modelBadge, "bot");
    modelBadge.appendText(flatItem.modelName);
    const promptBadge = leftContainer.createDiv({ cls: "systemsculpt-chat-badge" });
    (0, import_obsidian26.setIcon)(promptBadge, "command");
    promptBadge.appendText(flatItem.promptLabel);
    if (item.context_files && item.context_files.length > 0) {
      const docBadge = leftContainer.createDiv({ cls: "systemsculpt-chat-badge" });
      (0, import_obsidian26.setIcon)(docBadge, "file-text");
      docBadge.appendText(`${item.context_files.length} Document${item.context_files.length > 1 ? "s" : ""}`);
    }
    const preview = card.createDiv({ cls: "systemsculpt-chat-preview" });
    if (matches.length > 0) {
      const searchQuery = (_a = this.searchInput) == null ? void 0 : _a.value;
      const searchTerms = (searchQuery == null ? void 0 : searchQuery.toLowerCase().split(/\s+/).filter(Boolean)) || [];
      const contextText = this.getMatchContext(flatItem.messageContent, matches, searchTerms);
      preview.appendChild(this.searchService.highlightText(contextText, matches, searchQuery));
    } else {
      preview.appendText(flatItem.lastMessage);
    }
    const meta = card.createDiv({ cls: "systemsculpt-chat-meta" });
    const dateEl = meta.createDiv({ cls: "systemsculpt-chat-info" });
    (0, import_obsidian26.setIcon)(dateEl, "calendar");
    dateEl.createSpan({ text: this.formatDate(item.lastModified) });
    const messagesEl = meta.createDiv({ cls: "systemsculpt-chat-info" });
    (0, import_obsidian26.setIcon)(messagesEl, "message-square");
    messagesEl.createSpan({ text: `${item.messages.length} message${item.messages.length !== 1 ? "s" : ""}` });
    const titleEl = meta.createDiv({ cls: "systemsculpt-chat-info" });
    (0, import_obsidian26.setIcon)(titleEl, "file");
    titleEl.createSpan({ text: item.title });
    this.attachCardEventListeners(card, item);
    this.cardCache.set(item.id, card.cloneNode(true));
    return card;
  }
  updateCardHighlights(card, matches) {
    var _a;
    const preview = card.querySelector(".systemsculpt-chat-preview");
    if (!preview)
      return;
    const searchQuery = (_a = this.searchInput) == null ? void 0 : _a.value;
    const searchTerms = (searchQuery == null ? void 0 : searchQuery.toLowerCase().split(/\s+/).filter(Boolean)) || [];
    const flatItem = this.flattenedItems.find((f) => f.id === card.dataset.chatId);
    if (!flatItem)
      return;
    const contextText = this.getMatchContext(flatItem.messageContent, matches, searchTerms);
    preview.innerHTML = "";
    preview.appendChild(this.searchService.highlightText(contextText, matches, searchQuery));
  }
  formatDate(timestamp) {
    return new Date(timestamp).toLocaleString();
  }
  getMessageContent(message) {
    if (typeof message.content === "string") {
      return message.content;
    }
    return "Image message";
  }
  async getModelName(modelId) {
    try {
      const models = await this.plugin.modelService.getModels();
      if (!models)
        return modelId;
      const model = models.find((m) => m.id === modelId || m.identifier && `${m.identifier.providerId}/${m.identifier.modelId}` === modelId);
      if (model == null ? void 0 : model.identifier) {
        return model.identifier.displayName || model.identifier.modelId;
      }
      return (model == null ? void 0 : model.name) || modelId;
    } catch (error) {
      console.error("Failed to get model name:", error);
      return modelId;
    }
  }
  async getPromptLabel(item) {
    var _a;
    if (item.customPromptFilePath) {
      return ((_a = item.customPromptFilePath.split("/").pop()) == null ? void 0 : _a.replace(/\.md$/, "")) || "Custom Prompt";
    }
    if (item.systemPromptType) {
      try {
        const systemPromptService = new SystemPromptService(this.app);
        const preset = await systemPromptService.getSystemPromptById(item.systemPromptType);
        if (preset) {
          return preset.label;
        }
      } catch (error) {
        console.error("Failed to fetch system prompt:", error);
      }
    }
    return "Default";
  }
  updateSelectedCard() {
    this.chatCards.forEach((card, index) => {
      if (index === this.selectedCardIndex && this.isKeyboardNavActive) {
        card.classList.add("systemsculpt-keyboard-selected");
        card.scrollIntoView({ behavior: "smooth", block: "nearest" });
      } else {
        card.classList.remove("systemsculpt-keyboard-selected");
      }
    });
  }
  openNewChat() {
    this.close();
    const leaf = this.app.workspace.getLeaf(true);
    leaf.setViewState({
      type: CHAT_VIEW_TYPE,
      state: {}
    });
    this.app.workspace.setActiveLeaf(leaf);
  }
  onClose() {
    if (this.virtualScroller) {
      this.virtualScroller.disconnect();
    }
    const { contentEl } = this;
    contentEl.empty();
  }
  getMatchContext(text, matches, searchTerms) {
    if (!matches.length)
      return text;
    const positions = [];
    searchTerms.forEach((term) => {
      let pos = 0;
      const textLower = text.toLowerCase();
      while ((pos = textLower.indexOf(term, pos)) !== -1) {
        positions.push(pos);
        pos += 1;
      }
    });
    if (!positions.length)
      return text;
    positions.sort((a, b) => a - b);
    const CONTEXT_SIZE = 75;
    let bestStart = positions[0];
    let bestEnd = positions[0];
    let bestSpan = Infinity;
    for (let i = 0; i < positions.length; i++) {
      const start = positions[i];
      let end = start;
      let matchCount = 1;
      for (let j = i + 1; j < positions.length; j++) {
        if (positions[j] - start > CONTEXT_SIZE * 2)
          break;
        end = positions[j];
        matchCount++;
      }
      const span = end - start;
      if (matchCount > 1 && span < bestSpan) {
        bestStart = start;
        bestEnd = end;
        bestSpan = span;
      }
    }
    const contextStart = Math.max(0, bestStart - CONTEXT_SIZE);
    const contextEnd = Math.min(text.length, bestEnd + CONTEXT_SIZE);
    let previewStart = contextStart;
    while (previewStart > 0 && !/[\s.!?\n]/.test(text[previewStart - 1])) {
      previewStart--;
    }
    let previewEnd = contextEnd;
    while (previewEnd < text.length && !/[\s.!?\n]/.test(text[previewEnd])) {
      previewEnd++;
    }
    let preview = text.slice(previewStart, previewEnd).trim();
    if (previewStart > 0)
      preview = "..." + preview;
    if (previewEnd < text.length)
      preview = preview + "...";
    return preview;
  }
  getVisibleChats() {
    if (!this.searchInput || !this.searchInput.value.trim()) {
      return this.flattenedItems.map((item) => ({
        item: item.item,
        matches: [],
        score: 0
      }));
    }
    const query = this.searchInput.value.trim();
    const results = this.searchService.search(this.flattenedItems.map((f) => f.item), query, (chat) => this.getSearchableFields(chat), {
      initialResultsLimit: 25,
      maxFilteredResults: 50
    });
    const filteredResults = results.filter((result) => result.matches.length > 0 && result.score > 0);
    return filteredResults.sort((a, b) => b.score - a.score);
  }
};

// src/views/ChatView.ts
init_TitleGenerationModal();
var CHAT_VIEW_TYPE = "systemsculpt-chat-view";
var ChatView = class extends import_obsidian28.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.messages = [];
    this.currentModelName = "";
    this.isGenerating = false;
    this.refreshInterval = null;
    this.lastRefreshTime = 0;
    this.awaitingStateRestore = false;
    this.plugin = plugin;
    this.aiService = SystemSculptService.getInstance(plugin.settings, this.app);
    this.chatStorage = new ChatStorageService(this.app, plugin.settings.chatsDirectory);
    this.selectedModelId = plugin.settings.selectedModelId;
    this.messages = [];
    this.lastRefreshTime = 0;
    this.isGenerating = false;
    this.awaitingStateRestore = true;
    this.messageRenderer = new MessageRenderer(this.app);
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hour = String(now.getHours()).padStart(2, "0");
    const minute = String(now.getMinutes()).padStart(2, "0");
    const second = String(now.getSeconds()).padStart(2, "0");
    this.chatId = `${year}-${month}-${day} ${hour}-${minute}-${second}`;
    this.chatTitle = `Chat ${now.toLocaleString()}`;
    this.systemPromptType = this.plugin.settings.systemPromptType || "general-use";
    if (this.systemPromptType === "custom" && this.plugin.settings.systemPromptPath) {
      this.systemPromptPath = this.plugin.settings.systemPromptPath;
    } else {
      this.systemPromptPath = void 0;
    }
    this.layoutChangeHandler = this.onLayoutChange.bind(this);
  }
  getViewType() {
    return CHAT_VIEW_TYPE;
  }
  getDisplayText() {
    return this.chatTitle;
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("systemsculpt-chat-container");
    this.setupDragAndDrop(container);
    const headerContainer = container.createEl("div", {
      cls: "systemsculpt-chat-header"
    });
    const headerRow = headerContainer.createEl("div", {
      cls: "systemsculpt-chat-header-row"
    });
    const leftSection = headerRow.createEl("div", {
      cls: "systemsculpt-header-section-left"
    });
    this.contextManager = new FileContextManager({
      app: this.app,
      container: leftSection,
      onContextChange: async () => {
        await this.saveChat();
        await this.contextManager.checkSyncStatus();
      },
      sculptService: this.aiService,
      plugin: this.plugin
    });
    const rightSection = headerRow.createEl("div", {
      cls: "systemsculpt-header-section-right"
    });
    this.actionsDrawer = new DrawerComponent({
      container: rightSection,
      title: "Actions"
    });
    const actionsContent = this.actionsDrawer.getContent();
    const modelSelectionAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item"
    });
    this.modelIndicator = modelSelectionAction.createEl("div", {
      cls: "systemsculpt-model-indicator-drawer",
      text: `Current Model: ${this.selectedModelId}`
    });
    this.updateModelIndicator();
    actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-separator"
    });
    const changeTitleAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item",
      text: "Change Chat's Title"
    });
    changeTitleAction.addEventListener("click", async () => {
      if (this.isGenerating) {
        return;
      }
      const newTitle = await showTitleGenerationModal(this.app, this.plugin, this.chatTitle, this.messages);
      if (newTitle !== null && newTitle !== this.chatTitle) {
        this.chatTitle = newTitle;
        await this.saveChat();
        this.app.workspace.requestSaveLayout();
      }
    });
    const loadDifferentChatAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item",
      text: "Load A Different Chat"
    });
    loadDifferentChatAction.addEventListener("click", () => {
      const leaf = this.app.workspace.getLeaf(true);
      new LoadChatModal(this.app, async (chatId) => {
        const view = await leaf.setViewState({
          type: CHAT_VIEW_TYPE,
          state: { chatId }
        });
        this.app.workspace.setActiveLeaf(leaf);
      }, this.plugin).open();
    });
    const copyChatAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item",
      text: "Copy Chat to Clipboard"
    });
    copyChatAction.addEventListener("click", async () => {
      await this.copyToClipboard();
    });
    const openHistoryAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item",
      text: "Open Chat History File"
    });
    openHistoryAction.addEventListener("click", () => {
      const filePath = `${this.plugin.settings.chatsDirectory}/${this.chatId}.md`;
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian28.TFile) {
        this.app.workspace.getLeaf().openFile(file);
      }
    });
    const deleteChatAction = actionsContent.createEl("div", {
      cls: "systemsculpt-drawer-item systemsculpt-drawer-item-danger",
      text: "Delete This Chat"
    });
    deleteChatAction.addEventListener("click", async () => {
      const deleteConfirmed = await showPopup(this.app, "Are you sure you want to delete this chat?", {
        primaryButton: "Delete",
        secondaryButton: "Cancel"
      });
      if (deleteConfirmed == null ? void 0 : deleteConfirmed.confirmed) {
        const filePath = `${this.plugin.settings.chatsDirectory}/${this.chatId}.md`;
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file instanceof import_obsidian28.TFile) {
          await this.app.vault.delete(file);
        }
        this.leaf.detach();
      }
    });
    this.chatContainer = container.createEl("div", {
      cls: "systemsculpt-messages-container"
    });
    this.scrollManager = new ScrollManagerService({
      container: this.chatContainer
    });
    this.inputHandler = new InputHandler({
      app: this.app,
      container,
      aiService: this.aiService,
      getMessages: () => [...this.messages],
      getSelectedModelId: () => this.selectedModelId,
      getContextFiles: () => this.contextManager.getContextFiles(),
      getSystemPrompt: () => ({
        type: this.systemPromptType,
        path: this.systemPromptPath
      }),
      chatContainer: this.chatContainer,
      scrollManager: this.scrollManager,
      messageRenderer: this.messageRenderer,
      onMessageSubmit: async (message) => {
        this.messages.push(message);
        await this.saveChat();
        await this.addMessage(message.role, message.content, message.message_id);
      },
      onAssistantResponse: async (message) => {
        this.messages.push(message);
        await this.saveChat();
      },
      onContextFileAdd: async (wikilink) => {
        const files = this.contextManager.getContextFiles();
        files.add(wikilink);
        this.contextManager.setContextFiles(Array.from(files));
        await this.saveChat();
      },
      onError: (error) => this.handleError(error),
      onAddContextFile: () => {
        const contextButton = this.contextManager.getContainer().querySelector(".systemsculpt-context-add-button");
        if (contextButton instanceof HTMLElement) {
          contextButton.click();
        }
      },
      onEditSystemPrompt: () => {
        this.handleSystemPromptEdit();
      },
      plugin: this.plugin,
      chatView: this
    });
    this.inputHandler.onModelChange();
    this.app.workspace.on("active-leaf-change", (leaf) => {
      if (leaf === this.leaf) {
        this.checkForUpdates();
        this.inputHandler.focus();
      }
    });
    this.inputHandler.focus();
    await this.checkForUpdates();
    if (!this.awaitingStateRestore && this.messages.length === 0) {
      if (!this.chatId) {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, "0");
        const day = String(now.getDate()).padStart(2, "0");
        const hour = String(now.getHours()).padStart(2, "0");
        const minute = String(now.getMinutes()).padStart(2, "0");
        const second = String(now.getSeconds()).padStart(2, "0");
        this.chatId = `${year}-${month}-${day} ${hour}-${minute}-${second}`;
        this.chatTitle = `Chat ${now.toLocaleString()}`;
        await this.saveChat();
      }
    }
    setTimeout(async () => {
      if (!this.plugin.settings.selectedModelId) {
        const result = await showPopup(this.app, "You don't have a default model selected yet. Would you like to choose one now? This will be used as the default for all new chats.", {
          title: "Select Default Model",
          icon: "bot",
          primaryButton: "Choose Model",
          secondaryButton: "Maybe Later"
        });
        if (result == null ? void 0 : result.confirmed) {
          try {
            const models = await this.plugin.modelService.getModels();
            const modal = new ModelSelectionModal(this.app, "", async (modelId) => {
              this.plugin.settings.selectedModelId = modelId;
              await this.plugin.saveSettings();
              this.selectedModelId = modelId;
              await this.updateModelIndicator();
            }, this.plugin);
            modal.open();
          } catch (error) {
            console.error("Error loading models:", error);
            showPopup(this.app, "Failed to load available models");
          }
        }
      }
    }, 100);
  }
  async loadMessages() {
    if (!this.chatContainer)
      return;
    const scrollTop = this.chatContainer.scrollTop;
    const scrollHeight = this.chatContainer.scrollHeight;
    const clientHeight = this.chatContainer.clientHeight;
    const wasAtBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 10;
    this.chatContainer.empty();
    for (const message of this.messages) {
      await this.addMessage(message.role, message.content, message.message_id);
    }
    if (wasAtBottom) {
      this.scrollManager.scrollToBottom();
    } else {
      this.chatContainer.scrollTop = scrollTop;
    }
  }
  async updateModelIndicator() {
    if (this.modelIndicator) {
      const newModelIndicator = this.modelIndicator.cloneNode(true);
      this.modelIndicator.replaceWith(newModelIndicator);
      this.modelIndicator = newModelIndicator;
      this.modelIndicator.addEventListener("click", async () => {
        const modal = new ModelSelectionModal(this.app, this.selectedModelId || "", async (modelId) => {
          await this.setSelectedModelId(modelId);
          showEnhancedNotice("Model selected successfully", "info");
        }, this.plugin);
        modal.open();
      });
      if (!this.selectedModelId || this.selectedModelId.trim() === "") {
        this.modelIndicator.empty();
        this.modelIndicator.createSpan({ text: "No model selected" });
        this.modelIndicator.addClass("systemsculpt-no-model");
      } else {
        try {
          const models = await this.plugin.modelService.getModels();
          const currentModel = models.find((model) => model.id === this.selectedModelId);
          let providerPrefix = "";
          if (currentModel) {
            if (currentModel.provider === "systemsculpt") {
              providerPrefix = "[SYSTEMSCULPT] ";
            } else {
              providerPrefix = `[${currentModel.provider.toUpperCase()}] `;
            }
          }
          this.currentModelName = (currentModel == null ? void 0 : currentModel.name) || this.selectedModelId;
          this.modelIndicator.empty();
          this.modelIndicator.removeClass("systemsculpt-no-model");
          this.modelIndicator.createSpan({ text: "Current Model: " });
          this.modelIndicator.createSpan({
            text: providerPrefix + this.currentModelName
          });
        } catch (error) {
          this.currentModelName = this.selectedModelId;
          this.modelIndicator.empty();
          this.modelIndicator.removeClass("systemsculpt-no-model");
          this.modelIndicator.createSpan({ text: "Current Model: " });
          this.modelIndicator.createSpan({ text: this.currentModelName });
        }
      }
    }
  }
  async checkForUpdates() {
    if (this.isGenerating)
      return;
    try {
      const savedChats = await this.chatStorage.loadChats();
      const currentChat = savedChats.find((c) => c.id === this.chatId);
      if (!currentChat)
        return;
      const hasChanges = currentChat.messages.length !== this.messages.length || currentChat.selectedModelId !== this.selectedModelId || JSON.stringify(Array.from(this.contextManager.getContextFiles())) !== JSON.stringify(currentChat.context_files) || JSON.stringify(currentChat.messages) !== JSON.stringify(this.messages);
      if (hasChanges) {
        this.messages = currentChat.messages;
        this.selectedModelId = currentChat.selectedModelId;
        if (currentChat.context_files) {
          await this.contextManager.setContextFiles(currentChat.context_files);
        }
        await this.loadMessages();
        this.updateModelIndicator();
      } else {
        await this.contextManager.checkSyncStatus();
      }
    } catch (error) {
      console.error("Failed to check for updates:", error);
    }
  }
  async saveChat() {
    if (!this.chatId) {
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, "0");
      const day = String(now.getDate()).padStart(2, "0");
      const hour = String(now.getHours()).padStart(2, "0");
      const minute = String(now.getMinutes()).padStart(2, "0");
      const second = String(now.getSeconds()).padStart(2, "0");
      this.chatId = `${year}-${month}-${day} ${hour}-${minute}-${second}`;
      this.chatTitle = this.chatTitle || this.chatId;
    }
    try {
      await this.chatStorage.saveChat(this.chatId, this.messages, this.selectedModelId, this.contextManager.getContextFiles(), void 0, this.systemPromptType, this.systemPromptPath, this.chatTitle, this.tokenLimit, this.tokenLimitPercentage);
    } catch (error) {
      this.handleError("Failed to save chat");
    }
  }
  async handleError(error) {
    console.error("Chat error:", {
      error,
      message: typeof error === "string" ? error : error.message,
      code: error instanceof SystemSculptError ? error.code : void 0,
      metadata: error instanceof SystemSculptError ? error.metadata : void 0
    });
    let errorMessage = typeof error === "string" ? error : error.message;
    if (error instanceof SystemSculptError && (error.code === "MODEL_UNAVAILABLE" || error.code === "MODEL_REQUEST_ERROR" || error.code === "QUOTA_EXCEEDED")) {
      showEnhancedNotice(errorMessage, "error", error);
      const modal = new ModelSelectionModal(this.app, this.selectedModelId, async (modelId) => {
        this.selectedModelId = modelId;
        this.updateModelIndicator();
        showEnhancedNotice("Model changed. You can now retry your message.", "info");
        this.focusInput();
      }, this.plugin);
      modal.open();
      try {
        const models = await this.plugin.modelService.getModels();
        modal.setModels(models);
      } catch (err) {
        console.error("Failed to fetch models:", err);
        showEnhancedNotice("Failed to fetch available models", "error", err);
      }
      const lastMessage = this.chatContainer.querySelector(".systemsculpt-message:last-child");
      if (lastMessage) {
        lastMessage.remove();
      }
      const lastUserMessage = [...this.messages].reverse().find((msg) => msg.role === "user");
      if (lastUserMessage) {
        const index = this.messages.findIndex((msg) => msg.message_id === lastUserMessage.message_id);
        if (index !== -1) {
          this.messages.splice(index);
          const allMessages = this.chatContainer.querySelectorAll(".systemsculpt-message");
          for (let i = index; i < allMessages.length; i++) {
            allMessages[i].remove();
          }
          this.inputHandler.setValue(typeof lastUserMessage.content === "string" ? lastUserMessage.content : JSON.stringify(lastUserMessage.content));
          this.inputHandler.focus();
        }
      }
    } else {
      showEnhancedNotice(errorMessage, "error", error);
    }
  }
  async onLayoutChange() {
    var _a;
    if (((_a = this.app.workspace.getActiveViewOfType(import_obsidian28.ItemView)) == null ? void 0 : _a.leaf) === this.leaf) {
      this.lastRefreshTime = 0;
      await this.checkForUpdates();
      this.inputHandler.focus();
    }
  }
  generateMessageId() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0;
      const v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  async handleSystemPromptEdit() {
    let currentContent = "";
    if (this.systemPromptType === "custom") {
      const file = this.app.vault.getAbstractFileByPath((this.systemPromptPath || "") + ".md");
      if (file instanceof import_obsidian28.TFile) {
        currentContent = await this.app.vault.read(file);
      } else {
        currentContent = this.plugin.settings.systemPrompt;
      }
    } else {
      const systemPromptService = new SystemPromptService(this.app);
      try {
        const preset = await systemPromptService.getSystemPromptById(this.systemPromptType);
        if (preset) {
          currentContent = preset.systemPrompt;
        } else {
          currentContent = this.plugin.settings.systemPrompt;
        }
      } catch (error) {
        console.error("Failed to fetch system prompt:", error);
        currentContent = this.plugin.settings.systemPrompt;
      }
    }
    let modelContextLength;
    try {
      const models = await this.plugin.modelService.getModels();
      const currentModel = models.find((model) => model.id === this.selectedModelId);
      if (currentModel) {
        modelContextLength = currentModel.context_length;
      }
    } catch (error) {
      console.error("Failed to get model context length:", error);
    }
    const result = await showSystemPromptModal(this.app, currentContent, {
      mode: "chat-specific",
      customPromptFilePath: this.systemPromptPath || this.plugin.settings.systemPromptPath,
      systemPromptsDirectory: this.plugin.settings.systemPromptsDirectory,
      modelContextLength,
      tokenLimitPercentage: this.tokenLimitPercentage
    });
    if (result) {
      this.systemPromptType = result.type;
      if (result.type === "custom" && result.path) {
        this.systemPromptPath = result.path;
      } else {
        this.systemPromptPath = void 0;
      }
      this.tokenLimitPercentage = result.tokenLimitPercentage;
      this.tokenLimit = result.tokenLimit;
      await this.saveChat();
    }
  }
  async addMessage(role, content, existingMessageId) {
    const messageId = existingMessageId || this.generateMessageId();
    const { messageEl, contentEl } = await this.messageRenderer.renderMessage({
      app: this.app,
      messageId,
      role,
      content
    });
    const contentStr = typeof content === "string" ? content : JSON.stringify(content);
    messageEl.dataset.content = contentStr;
    this.messageRenderer.addMessageButtonToolbar(messageEl, typeof content === "string" ? content : JSON.stringify(content), role, messageId);
    messageEl.addEventListener("resubmit", async (e) => {
      const { messageId: messageId2, content: content2 } = e.detail;
      const index = this.messages.findIndex((msg) => msg.message_id === messageId2);
      if (index !== -1) {
        this.messages.splice(index);
        await this.saveChat();
        this.chatContainer.empty();
        for (const msg of this.messages) {
          await this.addMessage(msg.role, msg.content, msg.message_id);
        }
        this.inputHandler.setValue(content2);
        this.inputHandler.focus();
      }
    });
    messageEl.addEventListener("edit", async (e) => {
      const { messageId: messageId2, oldContent, newContent } = e.detail;
      const index = this.messages.findIndex((msg) => msg.message_id === messageId2);
      if (index !== -1) {
        this.messages[index].content = newContent;
        await this.saveChat();
        const { contentEl: newContentEl } = await this.messageRenderer.renderMessage({
          app: this.app,
          messageId: messageId2,
          role: this.messages[index].role,
          content: this.messages[index].content
        });
        const oldContentEl = messageEl.querySelector(".systemsculpt-message-content");
        if (oldContentEl && newContentEl) {
          oldContentEl.replaceWith(newContentEl);
          this.messageRenderer.setupImageHandlers(newContentEl);
        }
        const updatedStr = typeof this.messages[index].content === "string" ? this.messages[index].content : JSON.stringify(this.messages[index].content);
        messageEl.dataset.content = updatedStr;
      }
    });
    messageEl.addEventListener("delete", async (e) => {
      const { messageId: messageId2 } = e.detail;
      const index = this.messages.findIndex((msg) => msg.message_id === messageId2);
      if (index !== -1) {
        this.messages.splice(index, 1);
        await this.saveChat();
        messageEl.remove();
        this.scrollManager.updateContentHeight();
        this.scrollManager.scrollToBottom();
      }
    });
    this.chatContainer.appendChild(messageEl);
    this.scrollManager.updateContentHeight();
    this.scrollManager.scrollToBottom();
  }
  getInputValue() {
    return this.inputHandler.getValue();
  }
  onunload() {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
    this.scrollManager.cleanup();
    this.app.workspace.off("active-leaf-change", this.checkForUpdates.bind(this));
    this.actionsDrawer.unload();
    this.contextManager.unload();
    this.inputHandler.unload();
  }
  getState() {
    return {
      chatId: this.chatId,
      selectedModelId: this.selectedModelId
    };
  }
  async setState(state) {
    var _a;
    if (state.chatId) {
      await this.loadChatById(state.chatId);
    }
    this.awaitingStateRestore = false;
    if (((_a = this.app.workspace.getActiveViewOfType(import_obsidian28.ItemView)) == null ? void 0 : _a.leaf) === this.leaf) {
      this.inputHandler.focus();
    }
  }
  async loadChatById(chatId) {
    try {
      const chatData = await this.chatStorage.loadChat(chatId);
      if (!chatData) {
        this.handleError("Failed to load chat");
        return;
      }
      this.chatContainer.empty();
      this.messages = chatData.messages;
      this.chatId = chatData.id;
      this.selectedModelId = chatData.selectedModelId;
      this.chatTitle = chatData.title || "Untitled Chat";
      const metadata = await this.chatStorage.getMetadata(chatId);
      if (metadata == null ? void 0 : metadata.systemMessage) {
        this.systemPromptType = metadata.systemMessage.type;
        this.tokenLimit = metadata.systemMessage.tokenLimit;
        this.tokenLimitPercentage = metadata.systemMessage.tokenLimitPercentage;
        if (metadata.systemMessage.path) {
          this.systemPromptPath = metadata.systemMessage.path.replace(/^\[\[(.*?)\]\]$/, "$1");
        }
      }
      try {
        const models = await this.plugin.modelService.getModels();
        const currentModel = models.find((model) => model.id === this.selectedModelId);
        this.currentModelName = (currentModel == null ? void 0 : currentModel.name) || this.selectedModelId;
      } catch (error) {
        this.currentModelName = this.selectedModelId;
      }
      if (chatData.context_files) {
        await this.contextManager.setContextFiles(chatData.context_files);
      }
      for (const message of this.messages) {
        await this.addMessage(message.role, message.content, message.message_id);
      }
      this.updateModelIndicator();
      this.inputHandler.onModelChange();
      if (this.leaf) {
        this.leaf.setViewState({
          type: CHAT_VIEW_TYPE,
          state: { chatId: this.chatId },
          title: this.chatTitle
        });
      }
      this.app.workspace.requestSaveLayout();
    } catch (error) {
      console.error("[SystemSculpt] Error in loadChatById:", error);
      this.handleError("Failed to load chat");
    }
  }
  async addFileToContext(file) {
    await this.contextManager.addFileToContext(file);
  }
  async copyToClipboard() {
    try {
      const content = await this.getMarkdown();
      await navigator.clipboard.writeText(content);
      showNotice("Chat copied to clipboard", { type: "success" });
    } catch (error) {
      showNotice("Failed to copy chat to clipboard", { type: "error" });
    }
  }
  getTokenLimit() {
    return this.tokenLimit;
  }
  focusInput() {
    this.inputHandler.focus();
  }
  setupDragAndDrop(container) {
    const overlay = container.createEl("div", {
      cls: "systemsculpt-drag-overlay"
    });
    const message = overlay.createEl("div", {
      cls: "systemsculpt-drag-message",
      text: "Drop files to add to context"
    });
    const MAX_FILES = 100;
    const parseObsidianUri = (uri) => {
      try {
        if (!uri.startsWith("obsidian://open"))
          return null;
        const url = new URL(uri);
        return decodeURIComponent(url.searchParams.get("file") || "");
      } catch (e) {
        console.error("[DragDrop] Error parsing URI:", uri, e);
        return null;
      }
    };
    const getFilesFromFolder = (folder) => {
      const files = [];
      const processFolder = (currentFolder) => {
        for (const child of currentFolder.children) {
          if (child instanceof import_obsidian28.TFile) {
            files.push(child);
          } else if (child instanceof import_obsidian28.TFolder) {
            processFolder(child);
          }
        }
      };
      processFolder(folder);
      const result = files.slice(0, MAX_FILES);
      return result;
    };
    const getFileCount = async (dt) => {
      const currentContextSize = this.contextManager.getContextFiles().size;
      if (currentContextSize >= MAX_FILES) {
        return 0;
      }
      const remainingSlots = MAX_FILES - currentContextSize;
      let newFileCount = 0;
      let filesToProcess = [];
      if (dt.items && dt.items.length > 0) {
        for (const item of Array.from(dt.items)) {
          if (item.type === "text/plain") {
            const text = await new Promise((resolve) => {
              item.getAsString(resolve);
            });
            const lines = text.split("\n").filter((line) => line.trim());
            for (const line of lines) {
              let filePath = line;
              let abstractFile = null;
              if (line.startsWith("obsidian://")) {
                filePath = parseObsidianUri(line) || line;
              }
              abstractFile = this.app.vault.getAbstractFileByPath(filePath);
              if (abstractFile instanceof import_obsidian28.TFolder) {
                filesToProcess.push(abstractFile);
              } else if (abstractFile instanceof import_obsidian28.TFile) {
                filesToProcess.push(abstractFile);
              } else if (!filePath.includes(".")) {
                const mdPath = `${filePath}.md`;
                const mdFile = this.app.vault.getAbstractFileByPath(mdPath);
                if (mdFile instanceof import_obsidian28.TFile) {
                  filesToProcess.push(mdFile);
                }
              }
            }
          }
        }
      }
      for (const item of filesToProcess) {
        if (item instanceof import_obsidian28.TFolder) {
          const folderFiles = getFilesFromFolder(item).length;
          newFileCount += folderFiles;
        } else if (item instanceof import_obsidian28.TFile) {
          newFileCount++;
        }
      }
      if (newFileCount === 0 && dt.types.includes("text/uri-list")) {
        const uriData = await new Promise((resolve) => {
          dt.items[1].getAsString(resolve);
        });
        const uris = uriData.split("obsidian://open").filter((uri) => uri.trim()).map((uri) => "obsidian://open" + uri.trim());
        for (const uri of uris) {
          const filePath = parseObsidianUri(uri);
          if (!filePath)
            continue;
          const abstractFile = this.app.vault.getAbstractFileByPath(filePath);
          if (abstractFile instanceof import_obsidian28.TFolder) {
            const folderFiles = getFilesFromFolder(abstractFile).length;
            newFileCount += folderFiles;
          } else if (abstractFile instanceof import_obsidian28.TFile) {
            newFileCount++;
          }
        }
      }
      const finalCount = Math.min(newFileCount, remainingSlots);
      return finalCount;
    };
    const updateMessage = async (dt) => {
      const currentContextSize = this.contextManager.getContextFiles().size;
      if (currentContextSize >= MAX_FILES) {
        message.textContent = `Cannot add more files (max ${MAX_FILES} reached)`;
        return;
      }
      const fileCount = await getFileCount(dt);
      if (fileCount > 0) {
        message.textContent = `Add ${fileCount} file${fileCount > 1 ? "s" : ""} to context (${currentContextSize + fileCount}/${MAX_FILES} total)`;
      } else {
        message.textContent = `Drop files to add to context (${currentContextSize}/${MAX_FILES})`;
      }
    };
    let dragCounter = 0;
    container.addEventListener("dragenter", (e) => {
      e.preventDefault();
      e.stopPropagation();
      dragCounter++;
      if (dragCounter === 1) {
        container.addClass("systemsculpt-drag-active");
        if (e.dataTransfer) {
          updateMessage(e.dataTransfer);
        }
      }
    });
    container.addEventListener("dragleave", (e) => {
      e.preventDefault();
      e.stopPropagation();
      dragCounter--;
      if (dragCounter === 0) {
        container.removeClass("systemsculpt-drag-active");
      }
    });
    container.addEventListener("dragover", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (e.dataTransfer) {
        await updateMessage(e.dataTransfer);
      }
    });
    container.addEventListener("drop", async (e) => {
      var _a, _b, _c;
      e.preventDefault();
      e.stopPropagation();
      dragCounter = 0;
      container.removeClass("systemsculpt-drag-active");
      const dt = e.dataTransfer;
      if (!dt) {
        return;
      }
      const startingContextSize = this.contextManager.getContextFiles().size;
      if (startingContextSize >= MAX_FILES) {
        const { confirmed } = await showAlert(this.app, `Cannot add more files (max ${MAX_FILES} reached)`, {
          type: "info",
          icon: "alert-triangle"
        });
        return;
      }
      try {
        let filesToProcess = [];
        if (dt.items && dt.items.length > 0) {
          for (const item of Array.from(dt.items)) {
            if (item.type === "text/plain") {
              const text = await new Promise((resolve) => {
                item.getAsString(resolve);
              });
              const lines = text.split("\n").filter((line) => line.trim());
              for (const line of lines) {
                let filePath = line;
                let abstractFile = null;
                if (line.startsWith("obsidian://")) {
                  filePath = parseObsidianUri(line) || line;
                }
                abstractFile = this.app.vault.getAbstractFileByPath(filePath);
                if (abstractFile instanceof import_obsidian28.TFolder) {
                  filesToProcess.push(abstractFile);
                } else if (abstractFile instanceof import_obsidian28.TFile) {
                  const extension = abstractFile.extension.toLowerCase();
                  const requiresPro = [
                    "pdf",
                    "doc",
                    "docx",
                    "mp3",
                    "wav",
                    "m4a",
                    "ogg",
                    "webm"
                  ].includes(extension);
                  if (requiresPro && (!((_a = this.plugin.settings.licenseKey) == null ? void 0 : _a.trim()) || !this.plugin.settings.licenseValid)) {
                    await showPopup(this.app, "Document processing is a Pro feature. Support SystemSculpt's development and unlock this feature by becoming a Patreon member!", {
                      title: "Pro Feature",
                      primaryButton: "Become a Patron",
                      secondaryButton: "Maybe Later"
                    }).then((result) => {
                      if (result == null ? void 0 : result.confirmed) {
                        window.open(PATREON_URL, "_blank");
                      }
                    });
                    return;
                  }
                  filesToProcess.push(abstractFile);
                } else if (!filePath.includes(".")) {
                  const mdPath = `${filePath}.md`;
                  const mdFile = this.app.vault.getAbstractFileByPath(mdPath);
                  if (mdFile instanceof import_obsidian28.TFile) {
                    filesToProcess.push(mdFile);
                  }
                }
              }
            }
          }
        }
        if (filesToProcess.length === 0 && dt.types.includes("text/uri-list")) {
          const uriData = await new Promise((resolve) => {
            dt.items[1].getAsString(resolve);
          });
          const uris = uriData.split("obsidian://open").filter((uri) => uri.trim()).map((uri) => "obsidian://open" + uri.trim());
          for (const uri of uris) {
            const filePath = parseObsidianUri(uri);
            if (!filePath)
              continue;
            let abstractFile = this.app.vault.getAbstractFileByPath(filePath);
            if (abstractFile instanceof import_obsidian28.TFile) {
              const extension = abstractFile.extension.toLowerCase();
              const requiresPro = [
                "pdf",
                "doc",
                "docx",
                "mp3",
                "wav",
                "m4a",
                "ogg",
                "webm"
              ].includes(extension);
              if (requiresPro && (!((_b = this.plugin.settings.licenseKey) == null ? void 0 : _b.trim()) || !this.plugin.settings.licenseValid)) {
                await showPopup(this.app, "Document processing is a Pro feature. Support SystemSculpt's development and unlock this feature by becoming a Patreon member!", {
                  title: "Pro Feature",
                  primaryButton: "Become a Patron",
                  secondaryButton: "Maybe Later"
                }).then((result) => {
                  if (result == null ? void 0 : result.confirmed) {
                    window.open(PATREON_URL, "_blank");
                  }
                });
                return;
              }
            }
            if (abstractFile instanceof import_obsidian28.TFile || abstractFile instanceof import_obsidian28.TFolder) {
              filesToProcess.push(abstractFile);
            }
          }
        }
        let totalFilesAdded = 0;
        const remainingSlots = MAX_FILES - startingContextSize;
        for (const item of filesToProcess) {
          if (item instanceof import_obsidian28.TFolder) {
            const files = getFilesFromFolder(item);
            for (const file of files) {
              const currentContextSize = this.contextManager.getContextFiles().size;
              if (currentContextSize >= MAX_FILES) {
                const { confirmed } = await showAlert(this.app, `File limit reached (${MAX_FILES} total)`, {
                  type: "info",
                  icon: "alert-triangle"
                });
                return;
              }
              const extension = file.extension.toLowerCase();
              const requiresPro = [
                "pdf",
                "doc",
                "docx",
                "mp3",
                "wav",
                "m4a",
                "ogg",
                "webm"
              ].includes(extension);
              if (requiresPro && (!((_c = this.plugin.settings.licenseKey) == null ? void 0 : _c.trim()) || !this.plugin.settings.licenseValid)) {
                await showPopup(this.app, "Document processing is a Pro feature. Support SystemSculpt's development and unlock this feature by becoming a Patreon member!", {
                  title: "Pro Feature",
                  primaryButton: "Become a Patron",
                  secondaryButton: "Maybe Later"
                }).then((result) => {
                  if (result == null ? void 0 : result.confirmed) {
                    window.open(PATREON_URL, "_blank");
                  }
                });
                return;
              }
              try {
                await this.contextManager.addFileToContext(file);
                totalFilesAdded++;
                const updatedContextSize = this.contextManager.getContextFiles().size;
                showNotice(`Added ${file.name} to context (${updatedContextSize}/${MAX_FILES})`, { type: "success" });
              } catch (error) {
                console.error("[DragDrop] Error adding file from folder:", {
                  file: file.path,
                  error
                });
              }
            }
          } else if (item instanceof import_obsidian28.TFile) {
            const currentContextSize = this.contextManager.getContextFiles().size;
            if (currentContextSize >= MAX_FILES) {
              const { confirmed } = await showAlert(this.app, `File limit reached (${MAX_FILES} total)`, {
                type: "info",
                icon: "alert-triangle"
              });
              return;
            }
            await this.contextManager.addFileToContext(item);
            totalFilesAdded++;
            const updatedContextSize = this.contextManager.getContextFiles().size;
            showNotice(`Added ${item.name} to context (${updatedContextSize}/${MAX_FILES})`, { type: "success" });
          }
        }
      } catch (error) {
        console.error("[DragDrop] Error processing drop:", error);
        await showAlert(this.app, "Failed to process dropped files", {
          type: "error"
        });
      }
    });
  }
  getSelectedModelId() {
    return this.selectedModelId;
  }
  async setSelectedModelId(modelId) {
    this.selectedModelId = modelId;
    await this.updateModelIndicator();
    await this.saveChat();
    const models = await this.plugin.modelService.getModels();
    const selectedModel = models.find((model) => model.id === modelId);
    if (this.tokenLimitPercentage && (selectedModel == null ? void 0 : selectedModel.context_length)) {
      this.tokenLimit = Math.floor(this.tokenLimitPercentage / 100 * selectedModel.context_length);
      await this.saveChat();
    }
    this.inputHandler.onModelChange();
    this.focusInput();
  }
  async getMarkdown() {
    let chatContent = "";
    if (this.systemPromptType) {
      let systemPromptContent = "";
      if (this.systemPromptType === "custom" && this.systemPromptPath) {
        const file = this.app.vault.getAbstractFileByPath(this.systemPromptPath + ".md");
        if (file instanceof import_obsidian28.TFile) {
          systemPromptContent = await this.app.vault.read(file);
        }
      } else {
        const systemPromptService = new SystemPromptService(this.app);
        try {
          const preset = await systemPromptService.getSystemPromptById(this.systemPromptType);
          if (preset) {
            systemPromptContent = preset.systemPrompt;
          }
        } catch (error) {
          console.error("Failed to fetch system prompt:", error);
        }
      }
      if (systemPromptContent) {
        chatContent += `System Prompt:
"""""
${systemPromptContent}
"""""

`;
      }
    }
    const contextFiles = this.contextManager.getContextFiles();
    if (contextFiles.size > 0) {
      chatContent += "Context Files:\n\n";
      for (const filePath of contextFiles) {
        if (!filePath.startsWith("doc:")) {
          const cleanPath = filePath.replace(/^\[\[(.*?)\]\]$/, "$1").replace(/\$begin:math:display\$\[(.*?)\$end:math:display\$]/g, "$1");
          const resolvedFile = this.app.metadataCache.getFirstLinkpathDest(cleanPath, "");
          if (resolvedFile instanceof import_obsidian28.TFile && !resolvedFile.extension.match(/^(jpg|jpeg|png|gif|webp)$/i)) {
            const content = await this.app.vault.read(resolvedFile);
            chatContent += `[${cleanPath}]
"""""
${content}
"""""

`;
          }
        }
      }
    }
    chatContent += "Chat History Thus Far:\n\n";
    for (const message of this.messages) {
      const role = message.role === "assistant" ? "A" : "User";
      if (typeof message.content === "string") {
        chatContent += `${role}:
"""""
${message.content}
"""""

`;
      }
    }
    return chatContent;
  }
  getMessages() {
    return [...this.messages];
  }
  getChatTitle() {
    return this.chatTitle;
  }
  async setTitle(newTitle) {
    this.chatTitle = newTitle;
    await this.saveChat();
    if (this.leaf) {
      this.leaf.setViewState({
        type: CHAT_VIEW_TYPE,
        state: { chatId: this.chatId }
      });
    }
    this.app.workspace.requestSaveLayout();
  }
};

// src/services/RecorderService.ts
var RECORDING_FORMATS = [
  { mimeType: "audio/webm;codecs=opus", extension: "webm", sampleRate: 16e3 },
  { mimeType: "audio/webm", extension: "webm", sampleRate: 48e3 },
  { mimeType: "audio/ogg;codecs=opus", extension: "ogg", sampleRate: 48e3 },
  { mimeType: "audio/wav", extension: "wav", sampleRate: 48e3 }
];
var RecorderService = class {
  constructor(app, plugin, options = {}) {
    this.isRecording = false;
    this.onToggleCallbacks = new Set();
    this.mediaStream = null;
    this.mediaRecorder = null;
    this.chunks = [];
    this.selectedFormat = null;
    this.lastRecordedFilePath = null;
    this.audioContext = null;
    this.analyser = null;
    this.animationFrame = null;
    this.smoothingFactor = 0.4;
    this.visualizerCanvas = null;
    this.currentContext = null;
    this.recordingModal = null;
    this.dragCleanup = null;
    this.editorHandler = null;
    this.draw = () => {
      if (!this.isRecording || !this.analyser || !this.visualizerCanvas) {
        if (this.animationFrame) {
          cancelAnimationFrame(this.animationFrame);
          this.animationFrame = null;
        }
        return;
      }
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
        this.animationFrame = null;
      }
      const bufferLength = this.analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      this.analyser.getByteFrequencyData(dataArray);
      const ctx = this.visualizerCanvas.getContext("2d");
      if (!ctx)
        return;
      ctx.clearRect(0, 0, this.visualizerCanvas.width, this.visualizerCanvas.height);
      const rect = this.visualizerCanvas.getBoundingClientRect();
      const width = rect.width;
      const height = rect.height;
      const centerY = height / 2;
      const centerX = width / 2;
      const isMobile = width <= 400;
      const overlap = isMobile ? 3 : 5;
      const centerOverlapScale = isMobile ? 4 : 8;
      const amplitudeScale = isMobile ? 0.8 : 0.95;
      const edgeZoneScale = isMobile ? 0.15 : 0.2;
      const computedStyle = getComputedStyle(document.documentElement);
      let accentColor = computedStyle.getPropertyValue("--text-accent").trim();
      if (!accentColor) {
        accentColor = "#5871ef";
      }
      const gradient = ctx.createLinearGradient(0, 0, 0, height);
      gradient.addColorStop(0, accentColor);
      gradient.addColorStop(0.5, accentColor);
      gradient.addColorStop(1, accentColor);
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.moveTo(centerX, centerY);
      const halfBufferLength = Math.floor(bufferLength / 2);
      const sliceWidth = width / 2 / halfBufferLength;
      const centerOverlap = sliceWidth * centerOverlapScale;
      const getEdgeTaper = (i, total) => {
        const edgeZone = total * edgeZoneScale;
        if (i < edgeZone) {
          return 0.3 + 0.7 * (i / edgeZone);
        } else if (i > total - edgeZone) {
          return 0.3 + 0.7 * ((total - i) / edgeZone);
        }
        return 1;
      };
      for (let i = -overlap; i < halfBufferLength + overlap; i++) {
        const value = dataArray[Math.abs(i)] / 255;
        const index = Math.min(Math.abs(i), halfBufferLength - 1);
        this.smoothedValues[index] = this.smoothedValues[index] * this.smoothingFactor + value * (1 - this.smoothingFactor);
        const x = centerX + i * sliceWidth - centerOverlap;
        const taper = getEdgeTaper(i + overlap, halfBufferLength + overlap * 2);
        const y = centerY - this.smoothedValues[index] * centerY * amplitudeScale * taper;
        ctx.lineTo(x, y);
      }
      for (let i = halfBufferLength + overlap - 1; i >= -overlap; i--) {
        const index = Math.min(Math.abs(i), halfBufferLength - 1);
        const x = centerX + i * sliceWidth - centerOverlap;
        const taper = getEdgeTaper(i + overlap, halfBufferLength + overlap * 2);
        const y = centerY + this.smoothedValues[index] * centerY * amplitudeScale * taper;
        ctx.lineTo(x, y);
      }
      for (let i = -overlap; i < halfBufferLength + overlap; i++) {
        const index = Math.min(Math.abs(i), halfBufferLength - 1);
        const x = centerX - i * sliceWidth + centerOverlap;
        const taper = getEdgeTaper(i + overlap, halfBufferLength + overlap * 2);
        const y = centerY + this.smoothedValues[index] * centerY * amplitudeScale * taper;
        ctx.lineTo(x, y);
      }
      for (let i = halfBufferLength + overlap - 1; i >= -overlap; i--) {
        const index = Math.min(Math.abs(i), halfBufferLength - 1);
        const x = centerX - i * sliceWidth + centerOverlap;
        const taper = getEdgeTaper(i + overlap, halfBufferLength + overlap * 2);
        const y = centerY - this.smoothedValues[index] * centerY * amplitudeScale * taper;
        ctx.lineTo(x, y);
      }
      ctx.closePath();
      ctx.fill();
      if (this.isRecording) {
        this.animationFrame = requestAnimationFrame(this.draw);
      }
    };
    this.app = app;
    this.plugin = plugin;
    this.smoothedValues = new Float32Array(128);
    this.updateContext(options);
    console.log("RecorderService initialized");
  }
  static getInstance(app, plugin, options = {}) {
    if (!RecorderService.instance) {
      console.log("Creating new RecorderService instance");
      RecorderService.instance = new RecorderService(app, plugin);
    }
    RecorderService.instance.updateContext(options);
    return RecorderService.instance;
  }
  getActiveViewInfo() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      return { isChat: false, viewIdentifier: "unknown" };
    }
    const viewState = activeLeaf.getViewState();
    const viewType = viewState.type;
    if (viewType === CHAT_VIEW_TYPE) {
      return { isChat: true, viewIdentifier: "chat" };
    }
    const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian29.MarkdownView);
    if (markdownView == null ? void 0 : markdownView.file) {
      return {
        isChat: false,
        viewIdentifier: `note-${markdownView.file.path}`
      };
    }
    return { isChat: false, viewIdentifier: "unknown" };
  }
  updateContext(options) {
    const { isChat } = this.getActiveViewInfo();
    this.currentContext = {
      isInChat: isChat,
      onTranscriptionComplete: options.onTranscriptionComplete
    };
  }
  insertTextIntoActiveView(text) {
    const { isChat } = this.getActiveViewInfo();
    if (isChat) {
      const chatView = this.app.workspace.getActiveViewOfType(ChatView);
      if (chatView) {
        const input = chatView.containerEl.querySelector(".systemsculpt-chat-input");
        if (input) {
          const cursorPos = input.selectionStart;
          const currentValue = input.value;
          if (cursorPos !== null) {
            const newValue = currentValue.slice(0, cursorPos) + text + currentValue.slice(cursorPos);
            input.value = newValue;
            input.selectionStart = input.selectionEnd = cursorPos + text.length;
          } else {
            input.value = currentValue + text;
            input.selectionStart = input.selectionEnd = input.value.length;
          }
          input.dispatchEvent(new Event("input"));
          input.focus();
          new import_obsidian29.Notice("\u2728 Transcription pasted into chat");
        } else {
          console.warn("Chat input element not found");
          new import_obsidian29.Notice("\u2728 Transcription copied to clipboard (no chat input)");
        }
      } else {
        console.warn("No active chat view found");
        new import_obsidian29.Notice("\u2728 Transcription copied to clipboard (no active chat)");
      }
    } else {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian29.MarkdownView);
      if (!(markdownView == null ? void 0 : markdownView.editor)) {
        console.warn("No active markdown editor found");
        new import_obsidian29.Notice("\u2728 Transcription copied to clipboard (no active note)");
        return;
      }
      const editor = markdownView.editor;
      const cursor = editor.getCursor();
      const lineContent = editor.getLine(cursor.line);
      const textToInsert = text ? cursor.ch > 0 && lineContent.length > 0 ? "\n" + text : text : "";
      if (!textToInsert) {
        console.warn("No text to insert");
        return;
      }
      editor.replaceRange(textToInsert, cursor);
      const lines = textToInsert.split("\n");
      const lastLine = lines[lines.length - 1] || "";
      editor.setCursor({
        line: cursor.line + lines.length - 1,
        ch: lastLine.length
      });
      new import_obsidian29.Notice("\u2728 Transcription pasted into note");
    }
  }
  async transcribeLastRecording() {
    var _a, _b;
    if (!this.lastRecordedFilePath)
      return;
    try {
      const file = this.plugin.app.vault.getAbstractFileByPath(this.lastRecordedFilePath);
      if (!file || !(file instanceof import_obsidian29.TFile))
        return;
      const modal = new AudioTranscriptionModal(this.app, {
        file,
        isChat: (_b = (_a = this.currentContext) == null ? void 0 : _a.isInChat) != null ? _b : false,
        onTranscriptionComplete: (text) => {
          var _a2;
          if ((_a2 = this.currentContext) == null ? void 0 : _a2.onTranscriptionComplete) {
            this.currentContext.onTranscriptionComplete(text);
          } else {
            this.insertTextIntoActiveView(text);
          }
        },
        plugin: this.plugin
      });
      modal.open();
      try {
        await this.plugin.app.vault.delete(file);
      } catch (error) {
        console.warn("Failed to clean up recording file:", error);
      }
    } catch (error) {
      console.error("Auto-transcription failed:", error);
      new import_obsidian29.Notice("\u274C Failed to transcribe audio");
      throw error;
    }
  }
  createRecordingModal() {
    if (this.recordingModal) {
      if (this.dragCleanup) {
        this.dragCleanup();
        this.dragCleanup = null;
      }
      this.recordingModal.remove();
      this.recordingModal = null;
    }
    this.recordingModal = document.createElement("div");
    this.recordingModal.className = "systemsculpt-recorder-modal";
    const content = document.createElement("div");
    content.className = "systemsculpt-recorder-content";
    const liveIndicator = document.createElement("div");
    liveIndicator.className = "systemsculpt-recorder-live";
    liveIndicator.textContent = "\u25CF Live";
    content.appendChild(liveIndicator);
    const canvas = document.createElement("canvas");
    canvas.className = "systemsculpt-recorder-canvas";
    content.appendChild(canvas);
    this.recordingModal.appendChild(content);
    document.body.appendChild(this.recordingModal);
    this.dragCleanup = this.setupDraggable(this.recordingModal);
    this.setVisualizerCanvas(canvas);
  }
  setupDraggable(element) {
    let pos = { x: 0, y: 0 };
    const cleanup = () => {
      element.classList.remove("dragging");
    };
    const onMove = (clientX, clientY) => {
      const rect = element.getBoundingClientRect();
      pos.x = Math.min(Math.max(0, clientX - rect.width / 2), window.innerWidth - rect.width);
      pos.y = Math.min(Math.max(0, clientY - rect.height / 2), window.innerHeight - rect.height);
      element.style.bottom = "";
      element.style.right = "";
      element.style.left = `${pos.x}px`;
      element.style.top = `${pos.y}px`;
    };
    const onPointerDown = (e) => {
      if (e.button !== 0 && e.button !== -1)
        return;
      element.classList.add("dragging");
      element.setPointerCapture(e.pointerId);
      const rect = element.getBoundingClientRect();
      pos.x = rect.left;
      pos.y = rect.top;
      onMove(e.clientX, e.clientY);
    };
    const onPointerMove = (e) => {
      if (element.hasPointerCapture(e.pointerId)) {
        onMove(e.clientX, e.clientY);
      }
    };
    const onPointerUp = (e) => {
      cleanup();
      element.releasePointerCapture(e.pointerId);
    };
    element.addEventListener("pointerdown", onPointerDown);
    element.addEventListener("pointermove", onPointerMove);
    element.addEventListener("pointerup", onPointerUp);
    element.addEventListener("pointercancel", cleanup);
    return () => {
      element.removeEventListener("pointerdown", onPointerDown);
      element.removeEventListener("pointermove", onPointerMove);
      element.removeEventListener("pointerup", onPointerUp);
      element.removeEventListener("pointercancel", cleanup);
    };
  }
  async toggleRecording() {
    try {
      if (!this.isRecording) {
        const { isChat, viewIdentifier } = this.getActiveViewInfo();
        if (viewIdentifier === "unknown") {
          new import_obsidian29.Notice("\u26A0\uFE0F Please open a note or chat before recording");
          return;
        }
        console.log("Starting recording in view:", {
          isChat,
          viewIdentifier
        });
        this.updateContext({
          isInChat: isChat
        });
        this.createRecordingModal();
      }
      if (this.isRecording) {
        await this.stopRecording();
        if (this.recordingModal) {
          if (this.dragCleanup) {
            this.dragCleanup();
            this.dragCleanup = null;
          }
          this.recordingModal.remove();
          this.recordingModal = null;
        }
      } else {
        await this.startRecording();
        if (this.recordingModal) {
          this.recordingModal.classList.add("recording");
        }
      }
    } catch (error) {
      console.error("Error toggling recording:", error);
      new import_obsidian29.Notice("\u274C Failed to toggle recording");
    }
  }
  async ensureRecordingDirectory() {
    const dir = this.plugin.settings.recordingsDirectory;
    try {
      await this.plugin.app.vault.adapter.mkdir(dir);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      console.error("Failed to create recordings directory:", errorMessage);
      throw new Error(`Failed to create recordings directory: ${errorMessage}`);
    }
  }
  async detectSupportedFormat() {
    for (const format of RECORDING_FORMATS) {
      try {
        if (MediaRecorder.isTypeSupported(format.mimeType)) {
          console.log(`Selected recording format: ${format.mimeType}`);
          return format;
        }
      } catch (error) {
        console.warn(`Format ${format.mimeType} check failed:`, error);
      }
    }
    throw new Error("No supported audio recording format found");
  }
  generateFileName() {
    var _a;
    const now = new Date();
    const timestamp = now.toISOString().replace(/[:.]/g, "-").replace("T", "_").split(".")[0];
    return `${timestamp}.${((_a = this.selectedFormat) == null ? void 0 : _a.extension) || "audio"}`;
  }
  resetVisualizationState() {
    this.smoothedValues = new Float32Array(128);
    if (this.animationFrame) {
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = null;
    }
    if (this.analyser) {
      this.analyser.disconnect();
      this.analyser = null;
    }
    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }
    if (this.visualizerCanvas) {
      const ctx = this.visualizerCanvas.getContext("2d");
      if (ctx) {
        ctx.clearRect(0, 0, this.visualizerCanvas.width, this.visualizerCanvas.height);
      }
    }
  }
  setupVisualization() {
    if (!this.mediaStream)
      return;
    this.audioContext = new AudioContext({
      sampleRate: 16e3,
      latencyHint: "interactive"
    });
    const source = this.audioContext.createMediaStreamSource(this.mediaStream);
    this.analyser = this.audioContext.createAnalyser();
    this.analyser.fftSize = 256;
    this.analyser.smoothingTimeConstant = 0.7;
    source.connect(this.analyser);
    if (this.visualizerCanvas) {
      this.updateCanvasSize();
      this.draw();
    }
  }
  setVisualizerCanvas(canvas) {
    if (this.visualizerCanvas) {
      const ctx = this.visualizerCanvas.getContext("2d");
      if (ctx) {
        ctx.clearRect(0, 0, this.visualizerCanvas.width, this.visualizerCanvas.height);
      }
    }
    if (!canvas) {
      this.resetVisualizationState();
    }
    this.visualizerCanvas = canvas;
    if (canvas && this.isRecording) {
      this.updateCanvasSize();
      if (!this.audioContext || !this.analyser) {
        this.setupVisualization();
      } else {
        this.draw();
      }
    }
  }
  updateCanvasSize() {
    if (!this.visualizerCanvas)
      return;
    const rect = this.visualizerCanvas.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    this.visualizerCanvas.width = rect.width * dpr;
    this.visualizerCanvas.height = rect.height * dpr;
    const ctx = this.visualizerCanvas.getContext("2d");
    if (ctx) {
      ctx.scale(dpr, dpr);
    }
  }
  async startRecording() {
    if (this.isRecording)
      return;
    this.resetVisualizationState();
    try {
      await this.ensureRecordingDirectory();
      const permissionResult = await navigator.permissions.query({
        name: "microphone"
      });
      if (permissionResult.state === "denied") {
        throw new Error("Microphone permission denied");
      }
      this.selectedFormat = await this.detectSupportedFormat();
      const audioConstraints = {
        echoCancellation: true,
        noiseSuppression: true,
        sampleRate: 16e3,
        channelCount: 1
      };
      if (this.plugin.settings.preferredMicrophoneId) {
        try {
          const devices = await navigator.mediaDevices.enumerateDevices();
          const preferredDevice = devices.find((device) => device.kind === "audioinput" && device.deviceId === this.plugin.settings.preferredMicrophoneId);
          if (preferredDevice) {
            audioConstraints.deviceId = {
              exact: this.plugin.settings.preferredMicrophoneId
            };
          } else {
            this.plugin.settings.preferredMicrophoneId = "";
            await this.plugin.saveSettings();
            console.log("Preferred microphone not found, falling back to default");
          }
        } catch (error) {
          console.error("Error checking microphone devices:", error);
        }
      }
      this.mediaStream = await navigator.mediaDevices.getUserMedia({
        audio: audioConstraints
      });
      this.mediaRecorder = new MediaRecorder(this.mediaStream, {
        mimeType: this.selectedFormat.mimeType
      });
      this.chunks = [];
      this.mediaRecorder.ondataavailable = async (e) => {
        var _a, _b;
        if (e.data.size > 0) {
          this.chunks.push({
            blob: e.data,
            sampleRate: (_b = (_a = this.selectedFormat) == null ? void 0 : _a.sampleRate) != null ? _b : 48e3
          });
        }
      };
      this.mediaRecorder.onstop = async () => {
        var _a;
        try {
          const fileName = this.generateFileName();
          const filePath = `${this.plugin.settings.recordingsDirectory}/${fileName}`;
          const blob = new Blob(this.chunks.map((chunk) => chunk.blob), { type: (_a = this.selectedFormat) == null ? void 0 : _a.mimeType });
          const arrayBuffer = await blob.arrayBuffer();
          await this.plugin.app.vault.adapter.writeBinary(filePath, arrayBuffer);
          this.lastRecordedFilePath = filePath;
          await this.transcribeLastRecording();
        } catch (error) {
          console.error("Failed to save recording:", error);
          new import_obsidian29.Notice("\u274C Failed to save recording");
        }
      };
      this.mediaRecorder.start(1e3);
      this.setupVisualization();
      this.isRecording = true;
      this.notifyListeners();
      if (this.visualizerCanvas) {
        this.draw();
      }
    } catch (error) {
      console.error("Recording error:", error);
      const errorMessage = error instanceof Error ? error.message : "Recording failed";
      throw error;
    }
  }
  async stopRecording() {
    if (!this.isRecording)
      return;
    if (this.mediaRecorder && this.mediaRecorder.state !== "inactive") {
      this.mediaRecorder.stop();
    }
    if (this.mediaStream) {
      this.mediaStream.getTracks().forEach((track) => track.stop());
      this.mediaStream = null;
    }
    this.resetVisualizationState();
    if (this.recordingModal) {
      this.recordingModal.classList.remove("recording");
    }
    this.mediaRecorder = null;
    this.isRecording = false;
    this.notifyListeners();
  }
  onToggle(callback) {
    this.onToggleCallbacks.add(callback);
  }
  notifyListeners() {
    this.onToggleCallbacks.forEach((cb) => cb(this.isRecording));
  }
  unload() {
    this.stopRecording();
    this.onToggleCallbacks.clear();
  }
};

// src/components/SystemSculptContextMenu.ts
var import_obsidian30 = __toModule(require("obsidian"));
init_api();
var SystemSculptContextMenu = class {
  constructor(app, sculptService, plugin) {
    this.statusBarItem = null;
    this.progressModal = null;
    this.progressBar = null;
    this.progressStatus = null;
    this.progressButtons = null;
    this.app = app;
    this.sculptService = sculptService;
    this.plugin = plugin;
    this.transcriptionService = TranscriptionService.getInstance(plugin);
    this.registerContextMenu();
    this.initializeStatusBar();
  }
  initializeStatusBar() {
    this.statusBarItem = this.app.workspace.containerEl.createDiv({
      cls: "systemsculpt-status-bar"
    });
    this.statusBarItem.style.display = "none";
  }
  registerContextMenu() {
    this.app.workspace.on("editor-menu", (menu, editor, view) => {
      if (!(view instanceof import_obsidian30.MarkdownView))
        return;
      const selection = editor.getSelection();
      if (!selection)
        return;
    });
    this.app.workspace.on("file-menu", (menu, file) => {
      if (!(file instanceof import_obsidian30.TFile))
        return;
      const extension = file.extension.toLowerCase();
      if (["md", "txt", "markdown"].includes(extension) || ["pdf", "doc", "docx", "ppt", "pptx", "xls", "xlsx"].includes(extension) || ["mp3", "wav", "m4a", "ogg", "webm"].includes(extension) || ["jpg", "jpeg", "png", "gif", "webp", "svg"].includes(extension)) {
        menu.addItem((item) => {
          item.setTitle("SystemSculpt - Chat with File").setIcon("message-square").onClick(async () => {
            try {
              const leaf = this.app.workspace.getLeaf("tab");
              const view = new ChatView(leaf, this.plugin);
              await leaf.open(view);
              await new Promise((resolve) => setTimeout(resolve, 50));
              this.app.workspace.setActiveLeaf(leaf, { focus: true });
              await view.addFileToContext(file);
            } catch (error) {
              new import_obsidian30.Notice("Failed to open chat with file");
              console.error("Chat open error:", error);
            }
          });
        });
      }
      if (file.extension === "mp3" || file.extension === "wav" || file.extension === "webm") {
        menu.addItem((item) => {
          item.setTitle("SystemSculpt - Transcribe Audio").setIcon("microphone").onClick(async () => {
            try {
              await this.handleAudioTranscription(file, false);
            } catch (error) {
              new import_obsidian30.Notice("Failed to transcribe audio file");
              console.error("Transcription error:", error);
            }
          });
        });
        menu.addItem((item) => {
          item.setTitle("SystemSculpt - Transcribe Audio (Timestamped)").setIcon("clock").onClick(async () => {
            try {
              await this.handleAudioTranscription(file, true);
            } catch (error) {
              new import_obsidian30.Notice("Failed to transcribe audio file with timestamps");
              console.error("Timestamped transcription error:", error);
            }
          });
        });
      }
      if (file.extension === "pdf" || file.extension === "docx" || file.extension === "doc") {
        menu.addItem((item) => {
          item.setTitle("SystemSculpt - Convert to Markdown").setIcon("file-text").onClick(async () => {
            try {
              await this.handleDocumentConversion(file);
            } catch (error) {
              new import_obsidian30.Notice("Failed to convert document");
              console.error("Document conversion error:", error);
            }
          });
        });
      }
    });
  }
  async handleDocumentConversion(file) {
    this.createProgressModal();
    this.updateProgressModal(0, "Processing your document...", "loader-2");
    try {
      await this.sleep(1e3);
      this.updateProgressModal(10, "Uploading document...", "upload");
      const { documentId, status, cached } = await this.sculptService.uploadDocument(file);
      if (cached) {
        this.updateProgressModal(50, "Found cached version", "check");
        const extractionData2 = await this.downloadExtraction(documentId);
        const extractionPath2 = await this.saveExtractionResults(file, extractionData2);
        this.updateProgressModal(100, "Processing complete!", "check-circle");
        this.showCompletionButtons(extractionPath2);
        return;
      }
      this.updateProgressModal(30, "Processing document...", "loader-2");
      const pollResult = await this.pollUntilComplete(documentId);
      if (!pollResult) {
        this.updateProgressModal(0, "Processing incomplete", "alert-circle");
        await this.sleep(3e3);
        this.closeProgressModal();
        return;
      }
      this.updateProgressModal(80, "Downloading results...", "download");
      const extractionData = await this.downloadExtraction(documentId);
      const extractionPath = await this.saveExtractionResults(file, extractionData);
      this.updateProgressModal(100, "Processing complete!", "check-circle");
      this.showCompletionButtons(extractionPath);
    } catch (e) {
      console.error("SystemSculpt error", e);
      this.updateProgressModal(0, `Error: ${e instanceof Error ? e.message : String(e)}`, "x-circle");
      await this.sleep(5e3);
      this.closeProgressModal();
    }
  }
  async handleAudioTranscription(file, timestamped) {
    try {
      await showAudioTranscriptionModal(this.app, {
        file,
        timestamped,
        plugin: this.plugin,
        onTranscriptionComplete: async (text) => {
          var _a;
          const baseName = file.basename;
          const fileExtension = timestamped ? "srt" : "md";
          const outputPath = `${((_a = file.parent) == null ? void 0 : _a.path) || ""}/${baseName}.${fileExtension}`;
          const content = timestamped ? text : text;
          let transcriptionFile;
          const existingFile = this.app.vault.getAbstractFileByPath(outputPath);
          if (existingFile instanceof import_obsidian30.TFile) {
            await this.app.vault.modify(existingFile, content);
            transcriptionFile = existingFile;
          } else {
            transcriptionFile = await this.app.vault.create(outputPath, content);
          }
          const leaf = this.app.workspace.getLeaf("tab");
          await leaf.openFile(transcriptionFile);
          this.app.workspace.setActiveLeaf(leaf, { focus: true });
        }
      });
    } catch (error) {
      console.error("Audio transcription error:", error);
      throw error;
    }
  }
  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  createProgressModal() {
    if (this.progressModal)
      return;
    this.progressModal = document.createElement("div");
    this.progressModal.className = "systemsculpt-progress-modal";
    this.progressBar = this.progressModal.createDiv("systemsculpt-progress-bar");
    this.progressStatus = this.progressModal.createDiv("systemsculpt-progress-status");
    this.progressButtons = this.progressModal.createDiv("systemsculpt-progress-buttons");
    document.body.appendChild(this.progressModal);
  }
  updateProgressModal(progress, status, icon) {
    if (!this.progressModal || !this.progressBar || !this.progressStatus)
      return;
    this.progressBar.style.width = `${progress}%`;
    this.progressStatus.empty();
    (0, import_obsidian30.setIcon)(this.progressStatus, icon);
    this.progressStatus.createSpan({ text: status });
  }
  showCompletionButtons(extractionPath) {
    if (!this.progressButtons)
      return;
    this.progressButtons.empty();
    const viewButton = this.progressButtons.createEl("button", {
      text: "View Result",
      cls: "mod-cta"
    });
    viewButton.addEventListener("click", async () => {
      const file = this.app.vault.getAbstractFileByPath(extractionPath);
      if (file instanceof import_obsidian30.TFile) {
        await this.app.workspace.getLeaf().openFile(file);
      }
      this.closeProgressModal();
    });
    const closeButton = this.progressButtons.createEl("button", {
      text: "Close"
    });
    closeButton.addEventListener("click", () => {
      this.closeProgressModal();
    });
  }
  closeProgressModal() {
    if (this.progressModal && this.progressModal.parentNode) {
      this.progressModal.parentNode.removeChild(this.progressModal);
    }
    this.progressModal = null;
    this.progressBar = null;
    this.progressStatus = null;
    this.progressButtons = null;
  }
  async pollUntilComplete(documentId, maxAttempts = 30) {
    for (let i = 0; i < maxAttempts; i++) {
      const response = await fetch(`${this.sculptService.baseUrl}${SYSTEMSCULPT_API_ENDPOINTS.DOCUMENTS.GET(documentId)}`, {
        headers: {
          "Content-Type": "application/json"
        }
      });
      if (!response.ok) {
        throw new Error(`Failed to check status: ${response.statusText}`);
      }
      const data = await response.json();
      if (data.status === "completed") {
        return true;
      } else if (data.status === "failed") {
        throw new Error(data.error || "Processing failed");
      }
      const progress = Math.min(30 + i / maxAttempts * 50, 80);
      this.updateProgressModal(progress, "Processing document...", "loader-2");
      await this.sleep(2e3);
    }
    return false;
  }
  async downloadExtraction(documentId) {
    const response = await fetch(`${this.sculptService.baseUrl}${SYSTEMSCULPT_API_ENDPOINTS.DOCUMENTS.DOWNLOAD(documentId)}`, {
      headers: {
        "Content-Type": "application/json"
      }
    });
    if (!response.ok) {
      throw new Error(`Failed to download extraction: ${response.statusText}`);
    }
    return response.json();
  }
  async saveExtractionResults(file, data) {
    var _a;
    const extractionFolder = this.sculptService.extractionsDirectory;
    const baseName = this.sanitizeFilename(file.basename);
    const parentPath = extractionFolder ? `${extractionFolder}/${baseName}` : `${((_a = file.parent) == null ? void 0 : _a.path) || ""}/${baseName}`;
    await this.createFolder(parentPath);
    const extractionPath = this.normalizePath(`${parentPath}/${baseName}-extraction.md`);
    const content = this.formatExtractionContent(data);
    const existingFile = this.app.vault.getAbstractFileByPath(extractionPath);
    if (existingFile instanceof import_obsidian30.TFile) {
      await this.app.vault.modify(existingFile, content);
    } else {
      await this.app.vault.create(extractionPath, content);
    }
    return extractionPath;
  }
  sanitizeFilename(filename) {
    return filename.replace(/[^a-zA-Z0-9-_ ]/g, "");
  }
  normalizePath(path) {
    return path.replace(/\\/g, "/").replace(/\/+/g, "/");
  }
  async createFolder(path) {
    const normalizedPath = this.normalizePath(path);
    if (!(this.app.vault.getAbstractFileByPath(normalizedPath) instanceof import_obsidian30.TFolder)) {
      await this.app.vault.createFolder(normalizedPath);
    }
  }
  formatExtractionContent(data) {
    return `# ${data.title || "Document Extraction"}

${data.content || ""}

---
Extracted with SystemSculpt
`;
  }
};

// src/core/settings/SettingsManager.ts
var SettingsManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.settings = DEFAULT_SETTINGS;
  }
  async loadSettings() {
    const loadedData = await this.plugin.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    if (this.settings.developmentMode) {
      this.settings.serverUrl = "http://localhost:3001";
    } else {
      this.settings.serverUrl = "https://api.systemsculpt.com";
    }
  }
  async saveSettings() {
    await this.plugin.saveData(this.settings);
    this.plugin.aiService.updateSettings(this.settings);
  }
  getSettings() {
    return this.settings;
  }
  async updateSettings(newSettings) {
    if (newSettings === DEFAULT_SETTINGS) {
      this.settings = { ...DEFAULT_SETTINGS };
      await this.saveSettings();
      return;
    }
    if (newSettings.developmentMode !== void 0) {
      newSettings.serverUrl = newSettings.developmentMode ? "http://localhost:3001" : "https://api.systemsculpt.com";
    }
    this.settings = { ...this.settings, ...newSettings };
    await this.saveSettings();
  }
};

// src/core/license/LicenseManager.ts
init_ui();
var LicenseManager = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
  }
  async initializeLicense() {
    var _a;
    if ((_a = this.plugin.settings.licenseKey) == null ? void 0 : _a.trim()) {
      await this.validateLicenseKey(true, false);
    }
  }
  async validateLicenseKey(force = false, showReloadPrompt = true) {
    if (!this.plugin.settings.licenseKey) {
      this.plugin.settings.licenseValid = false;
      await this.plugin.saveSettings();
      return false;
    }
    try {
      const isValid = await this.plugin.aiService.validateLicense(force);
      this.plugin.settings.licenseValid = isValid;
      await this.plugin.saveSettings();
      if (isValid && showReloadPrompt) {
        const result = await showPopup(this.app, "Pro features have been successfully activated! To ensure all features work properly, Obsidian needs to be reloaded.", {
          title: "Reload to Complete Upgrade",
          description: "Click the button below to reload Obsidian and start using your Pro features.",
          primaryButton: "Reload & Upgrade",
          icon: "sparkles"
        });
        if (result == null ? void 0 : result.confirmed) {
          window.location.reload();
        }
      }
      return isValid;
    } catch (error) {
      console.error("License validation error:", error);
      this.plugin.settings.licenseValid = false;
      await this.plugin.saveSettings();
      return false;
    }
  }
};

// src/modals/JanitorModal.ts
var import_obsidian31 = __toModule(require("obsidian"));
init_ui();
var JanitorModal = class extends import_obsidian31.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  calculateSize(files) {
    const totalBytes = files.reduce((acc, file) => acc + file.stat.size, 0);
    if (totalBytes === 0) {
      return "empty";
    } else if (totalBytes < 1024) {
      return `${totalBytes} bytes`;
    } else if (totalBytes < 1024 * 1024) {
      return `${(totalBytes / 1024).toFixed(1)} KB`;
    } else if (totalBytes < 1024 * 1024 * 1024) {
      return `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;
    } else {
      return `${(totalBytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;
    }
  }
  getFilesInDirectory(directory) {
    return this.app.vault.getFiles().filter((file) => file.path.startsWith(directory));
  }
  disableButton(button) {
    button.disabled = true;
    button.addClass("mod-disabled");
    button.removeClass("mod-warning");
  }
  updateButtonState(button, files, type) {
    const size = this.calculateSize(files);
    const hasFiles = files.length > 0;
    if (hasFiles) {
      button.disabled = false;
      button.removeClass("mod-disabled");
      button.addClass("mod-warning");
      button.setText(`Clear All ${type} (${size})`);
    } else {
      button.disabled = true;
      button.addClass("mod-disabled");
      button.removeClass("mod-warning");
      button.setText(`No ${type}`);
    }
  }
  async cleanDirectory(directory) {
    if (!directory || directory === "/" || directory === "." || directory === "..") {
      throw new Error("Cannot delete root or system directories");
    }
    const files = this.getFilesInDirectory(directory);
    for (const file of files) {
      await this.app.vault.trash(file, true);
    }
    const folder = this.app.vault.getAbstractFileByPath(directory);
    if (folder instanceof import_obsidian31.TFolder) {
      const subdirs = folder.children.filter((child) => child instanceof import_obsidian31.TFolder).sort((a, b) => b.path.length - a.path.length);
      for (const subdir of subdirs) {
        if (subdir.children.length === 0) {
          await this.app.vault.trash(subdir, true);
        }
      }
      if (folder.children.length === 0) {
        await this.app.vault.trash(folder, true);
      }
    }
  }
  showFilePreview(files, type) {
    var _a, _b;
    const container = document.createElement("div");
    container.className = "systemsculpt-file-tree nav-folder";
    const summary = document.createElement("div");
    summary.className = "nav-folder-title";
    summary.textContent = `${files.length} ${type} (${this.calculateSize(files)})`;
    container.appendChild(summary);
    const sortedFiles = files.sort((a, b) => a.path.localeCompare(b.path));
    const filesByDir = new Map();
    for (const file of sortedFiles) {
      const dir = ((_a = file.parent) == null ? void 0 : _a.path) || "";
      if (!filesByDir.has(dir)) {
        filesByDir.set(dir, []);
      }
      (_b = filesByDir.get(dir)) == null ? void 0 : _b.push(file);
    }
    for (const [dir, dirFiles] of filesByDir) {
      if (dir) {
        const folderDiv = document.createElement("div");
        folderDiv.className = "nav-folder";
        const folderTitle = document.createElement("div");
        folderTitle.className = "nav-folder-title";
        (0, import_obsidian31.setIcon)(folderTitle, "folder");
        folderTitle.createSpan({ text: dir });
        folderDiv.appendChild(folderTitle);
        const folderContent = document.createElement("div");
        folderContent.className = "nav-folder-children";
        folderDiv.appendChild(folderContent);
        for (const file of dirFiles) {
          folderContent.appendChild(this.createFileItem(file));
        }
        container.appendChild(folderDiv);
      } else {
        for (const file of dirFiles) {
          container.appendChild(this.createFileItem(file));
        }
      }
    }
    return container;
  }
  createFileItem(file) {
    const fileDiv = document.createElement("div");
    fileDiv.className = "nav-file";
    const fileTitle = document.createElement("div");
    fileTitle.className = "nav-file-title";
    const extension = file.extension.toLowerCase();
    let iconName = "file";
    if (["md", "txt", "markdown"].includes(extension)) {
      iconName = "file-text";
    } else if (["jpg", "jpeg", "png", "gif", "webp", "svg"].includes(extension)) {
      iconName = "image";
    } else if (["mp3", "wav", "ogg", "m4a"].includes(extension)) {
      iconName = "audio-lines";
    } else if (["pdf"].includes(extension)) {
      iconName = "file-text";
    }
    (0, import_obsidian31.setIcon)(fileTitle, iconName);
    fileTitle.createSpan({ text: file.name });
    const sizeSpan = document.createElement("span");
    sizeSpan.className = "nav-file-size";
    sizeSpan.textContent = this.calculateSize([file]);
    fileTitle.appendChild(sizeSpan);
    fileDiv.appendChild(fileTitle);
    return fileDiv;
  }
  async showConfirmationDialog(files, type, directory, button) {
    const confirmModal = new import_obsidian31.Modal(this.app);
    confirmModal.titleEl.setText(`Clear ${type}`);
    const content = confirmModal.contentEl;
    content.createDiv({
      cls: "systemsculpt-modal-description",
      text: `\u26A0\uFE0F WARNING: The following files will be moved to the Obsidian trash. You can restore them from the trash if needed.`
    });
    content.appendChild(this.showFilePreview(files, type));
    const buttonContainer = content.createDiv({
      cls: "systemsculpt-modal-buttons"
    });
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => confirmModal.close());
    const confirmButton = buttonContainer.createEl("button", {
      cls: "mod-warning",
      text: "Move to Trash"
    });
    confirmButton.addEventListener("click", async () => {
      try {
        await this.cleanDirectory(directory);
        this.disableButton(button);
        button.setText(`No ${type}`);
        showPopup(this.app, `Successfully moved ${files.length} ${type.toLowerCase()} files (${this.calculateSize(files)}) to trash`, { title: "Success" });
      } catch (error) {
        console.error(`Error clearing ${type.toLowerCase()}:`, error);
        showPopup(this.app, `Failed to clear ${type.toLowerCase()}`, {
          title: "Error"
        });
      }
      confirmModal.close();
    });
    confirmModal.open();
  }
  async isEmptyFile(file) {
    if (file.stat.size === 0)
      return true;
    const extension = file.extension.toLowerCase();
    if (["md", "txt", "markdown"].includes(extension)) {
      const content = await this.app.vault.read(file);
      const contentWithoutFrontmatter = content.replace(/^---[\s\S]*?---/, "").trim();
      return !contentWithoutFrontmatter;
    }
    if ([
      "jpg",
      "jpeg",
      "png",
      "gif",
      "webp",
      "svg",
      "mp3",
      "wav",
      "ogg",
      "m4a"
    ].includes(extension)) {
      return file.stat.size === 0;
    }
    if (file.path.includes("/Extractions/")) {
      const content = await this.app.vault.read(file);
      const hasOnlyHeaders = !content.replace(/^#.*$/gm, "").trim();
      const hasErrorMessage = content.includes("Error extracting") || content.includes("Processing failed");
      return hasOnlyHeaders || hasErrorMessage;
    }
    return false;
  }
  async getEmptyFiles() {
    const allFiles = this.app.vault.getFiles();
    const emptyFiles = [];
    for (const file of allFiles) {
      if (await this.isEmptyFile(file)) {
        emptyFiles.push(file);
      }
    }
    return emptyFiles;
  }
  async getEmptyFolders() {
    const emptyFolders = [];
    const checkFolder = (folder) => {
      const hasNonEmptyChildren = folder.children.some((child) => {
        if (child instanceof import_obsidian31.TFile) {
          return child.stat.size > 0;
        }
        if (child instanceof import_obsidian31.TFolder) {
          return !checkFolder(child);
        }
        return false;
      });
      if (!hasNonEmptyChildren) {
        emptyFolders.push(folder);
        return true;
      }
      return false;
    };
    const rootFolder = this.app.vault.getRoot();
    for (const child of rootFolder.children) {
      if (child instanceof import_obsidian31.TFolder) {
        checkFolder(child);
      }
    }
    return emptyFolders;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("systemsculpt-janitor-modal");
    const titleEl = contentEl.createDiv({ cls: "systemsculpt-modal-title" });
    titleEl.setText("SystemSculpt Janitor");
    const descriptionEl = titleEl.createDiv({
      cls: "systemsculpt-modal-description"
    });
    descriptionEl.setText("Clean up and optimize your SystemSculpt workspace");
    const mainContent = contentEl.createDiv({
      cls: "systemsculpt-janitor-content"
    });
    const sectionsContainer = mainContent.createDiv({
      cls: "systemsculpt-sections-container"
    });
    this.createEmptyContentSection(sectionsContainer);
    this.createChatHistorySection(sectionsContainer);
    this.createExtractionsSection(sectionsContainer);
    this.createRecordingsSection(sectionsContainer);
  }
  async createEmptyContentSection(container) {
    const emptySection = this.createSection(container, "Empty Content", "Clean up empty files and folders");
    const emptyFiles = await this.getEmptyFiles();
    const emptyFolders = await this.getEmptyFolders();
    const totalEmpty = emptyFiles.length + emptyFolders.length;
    const clearEmptyButton = emptySection.createEl("button", {
      cls: "systemsculpt-button",
      text: totalEmpty > 0 ? `Clear Empty Content (${totalEmpty} items)` : "No Empty Content"
    });
    this.updateButtonState(clearEmptyButton, emptyFiles, "Empty Content");
    if (totalEmpty > 0) {
      clearEmptyButton.addEventListener("click", async () => {
        if (clearEmptyButton.disabled)
          return;
        const confirmModal = new import_obsidian31.Modal(this.app);
        confirmModal.titleEl.setText("Clear Empty Content");
        const content = confirmModal.contentEl;
        content.createDiv({
          cls: "systemsculpt-modal-description",
          text: `\u26A0\uFE0F WARNING: The following empty items will be moved to the Obsidian trash. You can restore them from the trash if needed.`
        });
        if (emptyFiles.length > 0) {
          content.createDiv({
            cls: "systemsculpt-section-header",
            text: "Empty Files"
          });
          content.appendChild(this.showFilePreview(emptyFiles, "Empty Files"));
        }
        if (emptyFolders.length > 0) {
          content.createDiv({
            cls: "systemsculpt-section-header",
            text: "Empty Folders"
          });
          const folderList = content.createDiv({
            cls: "systemsculpt-file-tree nav-folder"
          });
          for (const folder of emptyFolders) {
            const folderItem = folderList.createDiv({
              cls: "nav-folder-title"
            });
            (0, import_obsidian31.setIcon)(folderItem, "folder");
            folderItem.createSpan({ text: folder.path });
          }
        }
        const buttonContainer = content.createDiv({
          cls: "systemsculpt-modal-buttons"
        });
        const cancelButton = buttonContainer.createEl("button", {
          text: "Cancel"
        });
        cancelButton.addEventListener("click", () => confirmModal.close());
        const confirmButton = buttonContainer.createEl("button", {
          cls: "mod-warning",
          text: "Move to Trash"
        });
        confirmButton.addEventListener("click", async () => {
          try {
            for (const file of emptyFiles) {
              await this.app.vault.trash(file, true);
            }
            const sortedFolders = emptyFolders.sort((a, b) => b.path.length - a.path.length);
            for (const folder of sortedFolders) {
              await this.app.vault.trash(folder, true);
            }
            this.disableButton(clearEmptyButton);
            clearEmptyButton.setText("No Empty Content");
            showPopup(this.app, `Successfully moved ${totalEmpty} empty items to trash`, { title: "Success" });
          } catch (error) {
            console.error("Error clearing empty content:", error);
            showPopup(this.app, "Failed to clear empty content", {
              title: "Error"
            });
          }
          confirmModal.close();
        });
        confirmModal.open();
      });
    }
  }
  createChatHistorySection(container) {
    const historySection = this.createSection(container, "Chat History", "Delete all chat history and conversations permanently");
    const chatFiles = this.getFilesInDirectory(this.plugin.settings.chatsDirectory);
    const chatSize = this.calculateSize(chatFiles);
    const hasChatFiles = chatFiles.length > 0;
    const clearHistoryButton = historySection.createEl("button", {
      cls: "systemsculpt-button",
      text: hasChatFiles ? `Clear All Chat History (${chatSize})` : "No Chat History"
    });
    this.updateButtonState(clearHistoryButton, chatFiles, "Chat History");
    if (hasChatFiles) {
      clearHistoryButton.addEventListener("click", async () => {
        if (clearHistoryButton.disabled)
          return;
        await this.showConfirmationDialog(chatFiles, "Chat History", this.plugin.settings.chatsDirectory, clearHistoryButton);
      });
    }
  }
  createExtractionsSection(container) {
    const extractionsSection = this.createSection(container, "Document Extractions", "Delete all extracted document content (PDFs, documents, etc.)");
    const extractionFiles = this.getFilesInDirectory(this.plugin.settings.extractionsDirectory);
    const extractionsSize = this.calculateSize(extractionFiles);
    const hasExtractionFiles = extractionFiles.length > 0;
    const clearExtractionsButton = extractionsSection.createEl("button", {
      cls: "systemsculpt-button",
      text: hasExtractionFiles ? `Clear All Extractions (${extractionsSize})` : "No Extractions"
    });
    this.updateButtonState(clearExtractionsButton, extractionFiles, "Extractions");
    if (hasExtractionFiles) {
      clearExtractionsButton.addEventListener("click", async () => {
        if (clearExtractionsButton.disabled)
          return;
        await this.showConfirmationDialog(extractionFiles, "Extractions", this.plugin.settings.extractionsDirectory, clearExtractionsButton);
      });
    }
  }
  createRecordingsSection(container) {
    const recordingsSection = this.createSection(container, "Audio Recordings", "Delete all audio recordings (this won't affect transcriptions)");
    const recordingFiles = this.getFilesInDirectory(this.plugin.settings.recordingsDirectory);
    const recordingsSize = this.calculateSize(recordingFiles);
    const hasRecordingFiles = recordingFiles.length > 0;
    const clearRecordingsButton = recordingsSection.createEl("button", {
      cls: "systemsculpt-button",
      text: hasRecordingFiles ? `Clear All Recordings (${recordingsSize})` : "No Recordings"
    });
    this.updateButtonState(clearRecordingsButton, recordingFiles, "Recordings");
    if (hasRecordingFiles) {
      clearRecordingsButton.addEventListener("click", async () => {
        if (clearRecordingsButton.disabled)
          return;
        await this.showConfirmationDialog(recordingFiles, "Recordings", this.plugin.settings.recordingsDirectory, clearRecordingsButton);
      });
    }
  }
  createSection(container, title, description) {
    const section = container.createDiv({
      cls: "systemsculpt-janitor-section"
    });
    const header = section.createDiv({ cls: "systemsculpt-section-header" });
    header.setText(title);
    const desc = section.createDiv({ cls: "systemsculpt-section-description" });
    desc.setText(description);
    return section;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/core/plugin/ribbons.ts
var RibbonManager = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
  }
  initialize() {
    this.registerRibbonIcons();
  }
  registerRibbonIcons() {
    this.plugin.addRibbonIcon("message-square", "Open SystemSculpt Chat", async () => {
      await this.openChatView();
    });
    this.plugin.addRibbonIcon("history", "Open SystemSculpt Chat History", () => {
      this.openChatHistoryModal();
    });
    this.plugin.addRibbonIcon("trash", "Open SystemSculpt Janitor", () => {
      this.openJanitorModal();
    });
  }
  async openChatView() {
    const { workspace } = this.app;
    const leaf = workspace.getLeaf("tab");
    const view = new ChatView(leaf, this.plugin);
    await leaf.open(view);
    workspace.setActiveLeaf(leaf, { focus: true });
  }
  openChatHistoryModal() {
    const modal = new LoadChatModal(this.app, async (chatId) => {
      const leaf = this.app.workspace.getLeaf("tab");
      const view = new ChatView(leaf, this.plugin);
      await leaf.open(view);
      await view.loadChatById(chatId);
      this.app.workspace.setActiveLeaf(leaf, { focus: true });
    }, this.plugin);
    modal.open();
  }
  openJanitorModal() {
    new JanitorModal(this.app, this.plugin).open();
  }
};

// src/core/plugin/views.ts
var ViewManager = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.ribbonManager = new RibbonManager(plugin, app);
  }
  initialize() {
    this.registerView();
    this.ribbonManager.initialize();
    this.app.workspace.onLayoutReady(() => {
      this.restoreChatViews();
    });
  }
  async restoreChatViews() {
    const leaves = this.app.workspace.getLeavesOfType(CHAT_VIEW_TYPE);
    if (leaves.length === 0)
      return;
    for (const leaf of leaves) {
      const view = leaf.view;
      const state = leaf.getViewState();
      if (state && state.state && state.state.chatId) {
        await view.setState(state.state);
      }
    }
  }
  registerView() {
    this.plugin.registerView(CHAT_VIEW_TYPE, (leaf) => new ChatView(leaf, this.plugin));
  }
  unloadViews() {
    this.app.workspace.detachLeavesOfType(CHAT_VIEW_TYPE);
  }
};

// src/core/plugin/commands.ts
var import_obsidian32 = __toModule(require("obsidian"));
init_ui();
var CommandManager = class {
  constructor(plugin, app) {
    this.plugin = plugin;
    this.app = app;
    this.ribbonManager = new RibbonManager(plugin, app);
  }
  registerCommands() {
    this.registerOpenTasksFile();
    this.registerToggleAudioRecorder();
    this.registerOpenChat();
    this.registerOpenChatHistory();
    this.registerOpenJanitor();
    this.registerReloadObsidian();
    this.registerOpenSettings();
    this.registerChangeChatModel();
    this.registerChatWithFile();
    this.registerTaskMovementCommands();
    this.registerChangeChatTitle();
  }
  registerOpenTasksFile() {
    this.plugin.addCommand({
      id: "open-tasks-file",
      name: "Open Tasks File",
      callback: async () => {
        await this.plugin.tasksService.openOrCreateTasksFile();
      },
      hotkeys: [{ modifiers: ["Mod"], key: "t" }]
    });
  }
  registerToggleAudioRecorder() {
    this.plugin.addCommand({
      id: "toggle-audio-recorder",
      name: "Toggle Audio Recorder",
      callback: () => {
        this.plugin.getRecorderService().toggleRecording();
      },
      hotkeys: [{ modifiers: ["Mod"], key: "r" }]
    });
  }
  registerOpenChat() {
    this.plugin.addCommand({
      id: "open-systemsculpt-chat",
      name: "Open SystemSculpt Chat",
      callback: async () => {
        await this.ribbonManager.openChatView();
      }
    });
  }
  registerOpenChatHistory() {
    this.plugin.addCommand({
      id: "open-chat-history",
      name: "Open SystemSculpt Chat History",
      callback: () => {
        this.ribbonManager.openChatHistoryModal();
      }
    });
  }
  registerOpenJanitor() {
    this.plugin.addCommand({
      id: "open-systemsculpt-janitor",
      name: "Open SystemSculpt Janitor",
      callback: () => {
        this.ribbonManager.openJanitorModal();
      }
    });
  }
  registerReloadObsidian() {
    this.plugin.addCommand({
      id: "reload-obsidian",
      name: "Reload Obsidian",
      callback: () => {
        window.location.reload();
      }
    });
  }
  registerOpenSettings() {
    this.plugin.addCommand({
      id: "open-systemsculpt-settings",
      name: "Open SystemSculpt AI Settings",
      callback: () => {
        this.app.setting.open();
        this.app.setting.openTabById(this.plugin.manifest.id);
      }
    });
  }
  registerChangeChatModel() {
    this.plugin.addCommand({
      id: "change-chat-model",
      name: "Change Chat Model",
      checkCallback: (checking) => {
        const chatView = this.app.workspace.getActiveViewOfType(ChatView);
        if (!chatView) {
          if (!checking) {
            showEnhancedNotice("You need to be within a SystemSculpt chatview to change the model.", "warning");
          }
          return false;
        }
        if (!checking) {
          (async () => {
            try {
              await this.plugin.modelService.getModels();
              const modal = new ModelSelectionModal(this.app, chatView.getSelectedModelId(), async (modelId) => {
                await chatView.setSelectedModelId(modelId);
                showEnhancedNotice("Model changed successfully", "info");
              }, this.plugin);
              modal.open();
            } catch (err) {
              console.error("Failed to open model selection:", err);
              showEnhancedNotice("Failed to fetch available models", "error");
            }
          })();
        }
        return true;
      }
    });
  }
  registerChatWithFile() {
    this.plugin.addCommand({
      id: "chat-with-file",
      name: "Chat with File",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile)
          return false;
        const extension = activeFile.extension.toLowerCase();
        const supportedExtensions = [
          "md",
          "txt",
          "markdown",
          "pdf",
          "doc",
          "docx",
          "ppt",
          "pptx",
          "xls",
          "xlsx",
          "mp3",
          "wav",
          "m4a",
          "ogg",
          "webm",
          "jpg",
          "jpeg",
          "png",
          "gif",
          "webp",
          "svg"
        ];
        if (!supportedExtensions.includes(extension))
          return false;
        if (!checking) {
          const leaf = this.app.workspace.getLeaf("tab");
          const view = new ChatView(leaf, this.plugin);
          leaf.open(view).then(async () => {
            await new Promise((resolve) => setTimeout(resolve, 50));
            this.app.workspace.setActiveLeaf(leaf, { focus: true });
            await view.addFileToContext(activeFile);
            view.focusInput();
          });
        }
        return true;
      }
    });
  }
  registerTaskMovementCommands() {
    this.plugin.addCommand({
      id: "move-task-up",
      name: "Move Task Up",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian32.MarkdownView);
        if (!activeView)
          return false;
        const file = activeView.file;
        if (!file || !this.plugin.tasksService.isTasksFile(file.path))
          return false;
        if (!checking) {
          this.plugin.tasksService.moveTaskUp(activeView.editor);
        }
        return true;
      }
    });
    this.plugin.addCommand({
      id: "move-task-down",
      name: "Move Task Down",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian32.MarkdownView);
        if (!activeView)
          return false;
        const file = activeView.file;
        if (!file || !this.plugin.tasksService.isTasksFile(file.path))
          return false;
        if (!checking) {
          this.plugin.tasksService.moveTaskDown(activeView.editor);
        }
        return true;
      }
    });
    this.plugin.addCommand({
      id: "indent-task-right",
      name: "Indent Task Right",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian32.MarkdownView);
        if (!activeView)
          return false;
        const file = activeView.file;
        if (!file || !this.plugin.tasksService.isTasksFile(file.path))
          return false;
        if (!checking) {
          this.plugin.tasksService.indentTaskRight(activeView.editor);
        }
        return true;
      }
    });
    this.plugin.addCommand({
      id: "indent-task-left",
      name: "Indent Task Left",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian32.MarkdownView);
        if (!activeView)
          return false;
        const file = activeView.file;
        if (!file || !this.plugin.tasksService.isTasksFile(file.path))
          return false;
        if (!checking) {
          this.plugin.tasksService.indentTaskLeft(activeView.editor);
        }
        return true;
      }
    });
  }
  registerChangeChatTitle() {
    this.plugin.addCommand({
      id: "change-chat-title",
      name: "Change/Generate Title",
      checkCallback: (checking) => {
        const chatView = this.app.workspace.getActiveViewOfType(ChatView);
        if (chatView) {
          if (!checking) {
            (async () => {
              const { showTitleGenerationModal: showTitleGenerationModal2 } = await Promise.resolve().then(() => (init_TitleGenerationModal(), TitleGenerationModal_exports));
              const newTitle = await showTitleGenerationModal2(this.app, this.plugin, chatView.getChatTitle(), chatView.getMessages());
              if (newTitle !== null && newTitle !== chatView.getChatTitle()) {
                await chatView.setTitle(newTitle);
                showEnhancedNotice("Chat title updated", "info");
              }
            })();
          }
          return true;
        }
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          if (!checking) {
            showEnhancedNotice("You need to be within a note or chat view to change the title.", "warning");
          }
          return false;
        }
        if (activeFile.extension !== "md") {
          if (!checking) {
            showEnhancedNotice("Title generation is only available for markdown files.", "warning");
          }
          return false;
        }
        if (!checking) {
          (async () => {
            const { showTitleGenerationModal: showTitleGenerationModal2 } = await Promise.resolve().then(() => (init_TitleGenerationModal(), TitleGenerationModal_exports));
            const newTitle = await showTitleGenerationModal2(this.app, this.plugin, activeFile.basename, activeFile);
            if (newTitle !== null && newTitle !== activeFile.basename) {
              const newPath = activeFile.path.replace(activeFile.basename, newTitle);
              try {
                await this.app.fileManager.renameFile(activeFile, newPath);
                showEnhancedNotice("Note title updated", "info");
              } catch (error) {
                console.error("Failed to rename file:", error);
                showEnhancedNotice("Failed to update note title", "error");
              }
            }
          })();
        }
        return true;
      },
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "t" }]
    });
  }
};

// src/services/CustomProviderService.ts
var _CustomProviderService = class {
  constructor(plugin) {
    this.CACHE_DURATION = 30 * 60 * 1e3;
    this.plugin = plugin;
    this.logger = console;
  }
  async testConnection(provider) {
    const cached = _CustomProviderService.connectionTestCache.get(provider.id);
    if (cached && Date.now() - cached.result.timestamp < this.CACHE_DURATION) {
      return cached.result;
    }
    const existingPromise = _CustomProviderService.connectionTestPromises.get(provider.id);
    if (existingPromise) {
      return existingPromise;
    }
    const testPromise = this.performConnectionTest(provider);
    _CustomProviderService.connectionTestPromises.set(provider.id, testPromise);
    try {
      const result = await testPromise;
      if (result.success) {
        _CustomProviderService.connectionTestCache.set(provider.id, {
          result,
          timestamp: Date.now()
        });
      }
      return result;
    } finally {
      _CustomProviderService.connectionTestPromises.delete(provider.id);
    }
  }
  async performConnectionTest(provider) {
    try {
      const models = await this.getModels(provider);
      if (provider.endpoint.includes("openrouter.ai")) {
        await this.validateOpenRouterKey(provider, models);
      }
      return {
        success: true,
        models,
        timestamp: Date.now()
      };
    } catch (error) {
      this.logger.error("Connection test failed:", error);
      return {
        success: false,
        error: this.getErrorMessage(error),
        timestamp: Date.now()
      };
    }
  }
  async validateOpenRouterKey(provider, modelIds) {
    var _a;
    const headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${provider.apiKey}`,
      "HTTP-Referer": "https://systemsculpt.com",
      "X-Title": "SystemSculpt AI"
    };
    const completionResponse = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers,
      body: JSON.stringify({
        model: "meta-llama/llama-3-8b-instruct:free",
        messages: [{ role: "user", content: "Hi" }],
        max_tokens: 1
      }),
      signal: AbortSignal.timeout(1e4)
    });
    if (!completionResponse.ok) {
      const errorData = await completionResponse.json().catch(() => ({}));
      if (completionResponse.status === 401) {
        throw new Error("Invalid API key. Please check your OpenRouter API key and try again.");
      } else if (completionResponse.status === 402) {
        throw new Error("Insufficient credits. Please add credits to your OpenRouter account.");
      } else if (completionResponse.status === 429) {
        throw new Error("Rate limit exceeded. Please try again in a few minutes.");
      }
      throw new Error(`API key validation failed: ${((_a = errorData.error) == null ? void 0 : _a.message) || completionResponse.statusText}`);
    }
  }
  async getModels(provider) {
    var _a, _b;
    const headers = {
      "Content-Type": "application/json"
    };
    if (provider.apiKey) {
      if (provider.endpoint.includes("openrouter.ai")) {
        headers["Authorization"] = `Bearer ${provider.apiKey}`;
        headers["HTTP-Referer"] = "https://systemsculpt.com";
        headers["X-Title"] = "SystemSculpt AI";
      } else {
        headers["Authorization"] = `Bearer ${provider.apiKey}`;
      }
    }
    let endpoint;
    if (provider.endpoint.includes("openrouter.ai")) {
      endpoint = "https://openrouter.ai/api/v1/models";
    } else {
      const baseUrl = provider.endpoint.replace(/\/+$/, "");
      endpoint = baseUrl.endsWith("/v1") ? `${baseUrl}/models` : baseUrl.endsWith("/v1/models") ? baseUrl : `${baseUrl}/v1/models`;
    }
    const response = await fetch(endpoint, {
      method: "GET",
      headers,
      signal: AbortSignal.timeout(1e4)
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      if (response.status === 401) {
        throw new Error("Invalid API key. Please check your API key and try again.");
      } else if (response.status === 403) {
        throw new Error("Access denied. Please verify your API key has the correct permissions.");
      } else if (response.status === 404) {
        throw new Error("API endpoint not found. Please check the URL and try again.");
      }
      throw new Error(`HTTP error: ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`);
    }
    const data = await response.json();
    return (((_b = data.data) == null ? void 0 : _b.map((model) => model.id)) || []).filter((id) => !id.toLowerCase().includes("whisper"));
  }
  getErrorMessage(error) {
    if (error instanceof Error) {
      if (error.name === "AbortError") {
        return "Connection timed out. Please check your internet connection and try again.";
      }
      return error.message;
    }
    return "An unexpected error occurred. Please try again or contact support if the issue persists.";
  }
};
var CustomProviderService = _CustomProviderService;
CustomProviderService.connectionTestCache = new Map();
CustomProviderService.connectionTestPromises = new Map();

// src/main.ts
init_SystemPromptService();

// src/services/TasksService.ts
var import_obsidian33 = __toModule(require("obsidian"));
var TasksService = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.taskToggleStates = new Map();
    this.app = plugin.app;
    this.settings = plugin.settings;
    this.lastTaskFileReorder = 0;
    this.reorderDebounce = 0;
    this.registerTasksFileWatcher();
    this.registerWorkspaceEvents();
    this.registerMetadataWatcher();
  }
  registerWorkspaceEvents() {
    this.plugin.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
      if (leaf) {
        this.handleLeafChange(leaf);
      }
    }));
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => {
      this.app.workspace.iterateAllLeaves((leaf) => {
        this.handleLeafChange(leaf);
      });
    }));
    this.plugin.registerEvent(this.app.metadataCache.on("changed", (file) => {
      if (file.path.startsWith(this.settings.tasksDirectory)) {
        this.app.workspace.iterateAllLeaves((leaf) => {
          var _a;
          if (leaf.view instanceof import_obsidian33.MarkdownView && ((_a = leaf.view.file) == null ? void 0 : _a.path) === file.path) {
            this.handleLeafChange(leaf);
          }
        });
      }
    }));
  }
  async handleLeafChange(leaf) {
    var _a;
    const view = leaf.view;
    if (!(view instanceof import_obsidian33.MarkdownView))
      return;
    const file = view.file;
    const editorContainer = view.contentEl.querySelector(".cm-editor");
    const readerContainer = view.contentEl;
    if (editorContainer) {
      editorContainer.querySelectorAll(".systemsculpt-tasks-toggle").forEach((el) => el.remove());
    }
    if (readerContainer) {
      readerContainer.querySelectorAll(".systemsculpt-tasks-toggle").forEach((el) => el.remove());
    }
    if (!file || !file.path.startsWith(this.settings.tasksDirectory))
      return;
    const contentContainer = view.getMode() === "source" ? editorContainer : readerContainer;
    if (!contentContainer)
      return;
    const cache = this.app.metadataCache.getCache(file.path);
    const isHidden = ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.hideCompleted) === true;
    this.taskToggleStates.set(file.path, isHidden);
    const toggleContainer = this.createToggleContainer(file.path, isHidden);
    contentContainer.insertBefore(toggleContainer, contentContainer.firstChild);
    this.updateTaskVisibility(file.path, isHidden);
  }
  createToggleContainer(filePath, initialState) {
    const toggleContainer = document.createElement("div");
    toggleContainer.className = "systemsculpt-tasks-toggle";
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.className = "task-toggle-checkbox";
    checkbox.checked = initialState;
    const label = document.createElement("label");
    label.textContent = "Hide completed tasks";
    label.className = "task-toggle-label";
    checkbox.addEventListener("change", async (e) => {
      const isChecked = e.target.checked;
      await this.updateToggleState(filePath, isChecked);
    });
    toggleContainer.appendChild(checkbox);
    toggleContainer.appendChild(label);
    return toggleContainer;
  }
  registerMetadataWatcher() {
    this.plugin.registerEvent(this.app.metadataCache.on("changed", (file) => {
      var _a;
      if (file.path.startsWith(this.settings.tasksDirectory)) {
        const cache = this.app.metadataCache.getCache(file.path);
        const isHidden = ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.hideCompleted) === true;
        this.taskToggleStates.set(file.path, isHidden);
        this.app.workspace.iterateAllLeaves((leaf) => {
          var _a2;
          if (leaf.view instanceof import_obsidian33.MarkdownView && ((_a2 = leaf.view.file) == null ? void 0 : _a2.path) === file.path) {
            const editorContainer = leaf.view.contentEl.querySelector(".cm-editor");
            const readerContainer = leaf.view.contentEl;
            const containers = [editorContainer, readerContainer];
            containers.forEach((container) => {
              if (container) {
                const toggle = container.querySelector(".task-toggle-checkbox");
                if (toggle) {
                  toggle.checked = isHidden;
                }
              }
            });
            this.updateTaskVisibility(file.path, isHidden);
          }
        });
      }
    }));
  }
  async updateToggleState(filePath, isChecked) {
    this.taskToggleStates.set(filePath, isChecked);
    this.updateTaskVisibility(filePath, isChecked);
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian33.TFile) {
      const content = await this.app.vault.read(file);
      const hasYamlFrontmatter = content.startsWith("---\n");
      let newContent;
      if (hasYamlFrontmatter) {
        const [frontmatter, ...rest] = content.split("---\n").filter(Boolean);
        const yamlLines = frontmatter.split("\n");
        const hideCompletedIndex = yamlLines.findIndex((line) => line.startsWith("hideCompleted:"));
        if (hideCompletedIndex >= 0) {
          yamlLines[hideCompletedIndex] = `hideCompleted: ${isChecked}`;
        } else {
          yamlLines.push(`hideCompleted: ${isChecked}`);
        }
        newContent = `---
${yamlLines.join("\n")}
---
${rest.join("---\n")}`;
      } else {
        newContent = `---
hideCompleted: ${isChecked}
---

${content}`;
      }
      try {
        await this.app.vault.modify(file, newContent);
      } catch (error) {
        console.error("Failed to update hideCompleted in frontmatter:", error);
        this.taskToggleStates.set(filePath, !isChecked);
        this.updateTaskVisibility(filePath, !isChecked);
        this.app.workspace.iterateAllLeaves((leaf) => {
          var _a;
          if (leaf.view instanceof import_obsidian33.MarkdownView && ((_a = leaf.view.file) == null ? void 0 : _a.path) === filePath) {
            const editorContainer = leaf.view.contentEl.querySelector(".cm-editor");
            const readerContainer = leaf.view.contentEl;
            const containers = [editorContainer, readerContainer];
            containers.forEach((container) => {
              if (container) {
                const toggle = container.querySelector(".task-toggle-checkbox");
                if (toggle) {
                  toggle.checked = !isChecked;
                }
              }
            });
          }
        });
      }
    }
  }
  updateTaskVisibility(filePath, isHidden) {
    var _a, _b;
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (!file)
      return;
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      const view = leaf.view;
      if (((_a = view.file) == null ? void 0 : _a.path) !== file.path)
        continue;
      const contentEl = view.contentEl;
      if (isHidden) {
        contentEl.classList.add("hide-completed-tasks");
      } else {
        contentEl.classList.remove("hide-completed-tasks");
      }
      if (view.getMode() === "source") {
        const editor = view.editor;
        if (editor) {
          editor.refresh();
        }
      } else {
        (_b = view.previewMode) == null ? void 0 : _b.rerender(true);
      }
    }
  }
  async openOrCreateTasksFile() {
    const tasksDir = this.settings.tasksDirectory;
    const fileName = `${tasksDir}/Tasks.md`;
    try {
      await this.app.vault.adapter.mkdir(tasksDir);
      if (!await this.app.vault.adapter.exists(fileName)) {
        await this.app.vault.create(fileName, `# Tasks

- [ ] Sample task
`);
      }
      const file = this.app.vault.getAbstractFileByPath(fileName);
      if (file instanceof import_obsidian33.TFile) {
        const existingLeaf = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.view.getState().file === file.path);
        if (existingLeaf) {
          this.app.workspace.setActiveLeaf(existingLeaf, { focus: true });
        } else {
          await this.app.workspace.getLeaf().openFile(file);
        }
      }
    } catch (error) {
      console.error("Failed to handle tasks file:", error);
      throw error;
    }
  }
  registerTasksFileWatcher() {
    this.plugin.registerEvent(this.app.vault.on("modify", async (file) => {
      const tasksDir = this.settings.tasksDirectory;
      if (file.path.startsWith(tasksDir) && file.path.endsWith(".md")) {
        await this.reorderCompletedTasks(file);
      }
    }));
  }
  async reorderCompletedTasks(file) {
    if (!this.settings.moveCompletedTasksDown) {
      return;
    }
    if (!file.path.startsWith(this.settings.tasksDirectory)) {
      return;
    }
    if (!file.path.endsWith(".md")) {
      return;
    }
    const original = await this.app.vault.read(file);
    const reordered = this.reorderContent(original);
    if (reordered !== original) {
      await this.app.vault.modify(file, reordered);
    }
  }
  reorderContent(content) {
    const lines = content.split("\n");
    const output = [];
    let listBuffer = [];
    const flushBuffer = () => {
      if (listBuffer.length > 0) {
        output.push(...this.reorderListBlock(listBuffer));
        listBuffer = [];
      }
    };
    for (const line of lines) {
      if (/^\s*-\s*\[[x\s]\]/.test(line)) {
        listBuffer.push(line);
      } else {
        flushBuffer();
        output.push(line);
      }
    }
    flushBuffer();
    return output.join("\n");
  }
  reorderListBlock(lines) {
    function getIndent(line) {
      const match = line.match(/^(\s*)/);
      return match ? match[1].length : 0;
    }
    const nodes = [];
    const stack = [];
    for (const line of lines) {
      const indent = getIndent(line);
      const node = { line, children: [], indent };
      while (stack.length > 0 && indent <= stack[stack.length - 1].indent) {
        stack.pop();
      }
      if (stack.length === 0) {
        nodes.push(node);
        stack.push(node);
      } else {
        stack[stack.length - 1].children.push(node);
        stack.push(node);
      }
    }
    function reorderNodes(nodes2) {
      for (const node of nodes2) {
        if (node.children.length > 0) {
          node.children = reorderNodes(node.children);
          node.children.sort((a, b) => {
            const aComplete = /^\s*-\s*\[x\]/i.test(a.line) ? 1 : 0;
            const bComplete = /^\s*-\s*\[x\]/i.test(b.line) ? 1 : 0;
            return aComplete - bComplete;
          });
        }
      }
      nodes2.sort((a, b) => {
        const aComplete = /^\s*-\s*\[x\]/i.test(a.line) ? 1 : 0;
        const bComplete = /^\s*-\s*\[x\]/i.test(b.line) ? 1 : 0;
        return aComplete - bComplete;
      });
      return nodes2;
    }
    const reorderedNodes = reorderNodes(nodes);
    const flattened = [];
    function flatten(nodes2) {
      for (const node of nodes2) {
        flattened.push(node.line);
        if (node.children.length > 0) {
          flatten(node.children);
        }
      }
    }
    flatten(reorderedNodes);
    return flattened;
  }
  isTasksFile(filePath) {
    return filePath.startsWith(this.settings.tasksDirectory);
  }
  getTaskTreeRange(editor, startLine) {
    const startIndent = this.getIndentLevel(editor.getLine(startLine));
    let endLine = startLine;
    for (let i = startLine + 1; i < editor.lineCount(); i++) {
      const line = editor.getLine(i);
      const indent = this.getIndentLevel(line);
      if (indent <= startIndent) {
        break;
      }
      endLine = i;
    }
    return { start: startLine, end: endLine };
  }
  getPreviousTaskTreeRange(editor, currentLine, currentIndent) {
    for (let i = currentLine - 1; i >= 0; i--) {
      const line = editor.getLine(i);
      const indent = this.getIndentLevel(line);
      if (indent === currentIndent && this.isTaskLine(line)) {
        return this.getTaskTreeRange(editor, i);
      }
      if (indent < currentIndent) {
        break;
      }
    }
    return null;
  }
  getNextTaskTreeRange(editor, currentLine, currentIndent) {
    const currentTreeRange = this.getTaskTreeRange(editor, currentLine);
    for (let i = currentTreeRange.end + 1; i < editor.lineCount(); i++) {
      const line = editor.getLine(i);
      const indent = this.getIndentLevel(line);
      if (indent === currentIndent && this.isTaskLine(line)) {
        return this.getTaskTreeRange(editor, i);
      }
      if (indent < currentIndent) {
        break;
      }
    }
    return null;
  }
  getRangeText(editor, range) {
    let text = "";
    for (let i = range.start; i <= range.end; i++) {
      text += editor.getLine(i) + "\n";
    }
    return text;
  }
  moveTaskUp(editor) {
    const currentLine = editor.getCursor().line;
    const lineContent = editor.getLine(currentLine);
    if (!this.isTaskLine(lineContent))
      return;
    if (currentLine === 0)
      return;
    const currentIndent = this.getIndentLevel(lineContent);
    const currentTreeRange = this.getTaskTreeRange(editor, currentLine);
    const previousTreeRange = this.getPreviousTaskTreeRange(editor, currentLine, currentIndent);
    if (previousTreeRange) {
      const currentTreeText = this.getRangeText(editor, currentTreeRange);
      const previousTreeText = this.getRangeText(editor, previousTreeRange);
      editor.transaction({
        changes: [
          {
            from: { line: previousTreeRange.start, ch: 0 },
            to: { line: previousTreeRange.end + 1, ch: 0 },
            text: currentTreeText
          },
          {
            from: { line: currentTreeRange.start, ch: 0 },
            to: { line: currentTreeRange.end + 1, ch: 0 },
            text: previousTreeText
          }
        ]
      });
      const moveDistance = currentTreeRange.start - previousTreeRange.start;
      const newLine = currentLine - moveDistance;
      const newLineContent = editor.getLine(newLine);
      editor.setCursor({ line: newLine, ch: newLineContent.length });
    }
  }
  moveTaskDown(editor) {
    const currentLine = editor.getCursor().line;
    const lineContent = editor.getLine(currentLine);
    if (!this.isTaskLine(lineContent))
      return;
    const currentIndent = this.getIndentLevel(lineContent);
    const currentTreeRange = this.getTaskTreeRange(editor, currentLine);
    const nextTreeRange = this.getNextTaskTreeRange(editor, currentLine, currentIndent);
    if (nextTreeRange) {
      const currentTreeText = this.getRangeText(editor, currentTreeRange);
      const nextTreeText = this.getRangeText(editor, nextTreeRange);
      editor.transaction({
        changes: [
          {
            from: { line: currentTreeRange.start, ch: 0 },
            to: { line: currentTreeRange.end + 1, ch: 0 },
            text: nextTreeText
          },
          {
            from: { line: nextTreeRange.start, ch: 0 },
            to: { line: nextTreeRange.end + 1, ch: 0 },
            text: currentTreeText
          }
        ]
      });
      const nextTreeSize = nextTreeRange.end - nextTreeRange.start + 1;
      const newLine = currentLine + nextTreeSize;
      const newLineContent = editor.getLine(newLine);
      editor.setCursor({ line: newLine, ch: newLineContent.length });
    }
  }
  indentTaskRight(editor) {
    const currentLine = editor.getCursor().line;
    const lineContent = editor.getLine(currentLine);
    if (!this.isTaskLine(lineContent))
      return;
    editor.setLine(currentLine, "  " + lineContent);
    const newLineContent = editor.getLine(currentLine);
    editor.setCursor({ line: currentLine, ch: newLineContent.length });
  }
  indentTaskLeft(editor) {
    const currentLine = editor.getCursor().line;
    const lineContent = editor.getLine(currentLine);
    if (!this.isTaskLine(lineContent))
      return;
    const currentIndent = this.getIndentLevel(lineContent);
    if (currentIndent >= 2) {
      editor.setLine(currentLine, lineContent.substring(2));
      const newLineContent = editor.getLine(currentLine);
      editor.setCursor({ line: currentLine, ch: newLineContent.length });
    }
  }
  isTaskLine(line) {
    return /^\s*-\s*\[[x\s]\]/.test(line);
  }
  getIndentLevel(line) {
    const match = line.match(/^(\s*)/);
    return match ? match[1].length : 0;
  }
};

// src/services/ModelService.ts
var ModelService = class {
  constructor(plugin, customProviderService) {
    this.loadingPromise = null;
    this.plugin = plugin;
    this.customProviderService = customProviderService;
  }
  static getInstance(plugin, customProviderService) {
    if (!ModelService.instance) {
      ModelService.instance = new ModelService(plugin, customProviderService);
    }
    return ModelService.instance;
  }
  async getModels() {
    if (this.loadingPromise) {
      return this.loadingPromise;
    }
    this.loadingPromise = this.loadModels();
    try {
      const models = await this.loadingPromise;
      return models;
    } finally {
      this.loadingPromise = null;
    }
  }
  async loadModels() {
    try {
      const systemModels = await this.plugin.aiService.getModels();
      const customModels = await this.loadCustomProviderModels();
      const allModels = [...systemModels, ...customModels];
      const favoriteModels = this.plugin.settings.favoriteModels || [];
      for (const model of allModels) {
        model.isFavorite = favoriteModels.some((fav) => fav.modelId === model.id && fav.provider === model.provider);
      }
      return allModels;
    } catch (error) {
      console.error("Failed to load models:", error);
      return [];
    }
  }
  async loadCustomProviderModels() {
    const { customProviders } = this.plugin.settings;
    const fetches = customProviders.filter((p) => p.isEnabled).map(async (p) => {
      try {
        const result = await this.customProviderService.testConnection(p);
        if (result.success && result.models) {
          return this.createCustomModels(p, result.models);
        }
      } catch (error) {
        console.error(`Failed to load models from ${p.name}:`, error);
      }
      return [];
    });
    const results = await Promise.all(fetches);
    return results.flat();
  }
  createCustomModels(provider, modelIds) {
    return modelIds.map((modelId) => ({
      id: modelId,
      name: modelId,
      provider: provider.name.toLowerCase(),
      isFavorite: false,
      context_length: 0,
      capabilities: [],
      pricing: {
        prompt: "0",
        completion: "0",
        image: "0",
        request: "0"
      },
      architecture: {
        modality: "text->text",
        tokenizer: "",
        instruct_type: null
      },
      description: `${provider.name} model`,
      identifier: {
        providerId: provider.name.toLowerCase(),
        modelId,
        displayName: modelId
      }
    }));
  }
  async toggleFavorite(model) {
    const isNowFavorite = !model.isFavorite;
    model.isFavorite = isNowFavorite;
    if (isNowFavorite) {
      this.plugin.settings.favoriteModels.push({
        provider: model.provider,
        modelId: model.id
      });
    } else {
      this.plugin.settings.favoriteModels = this.plugin.settings.favoriteModels.filter((fav) => !(fav.modelId === model.id && fav.provider === model.provider));
    }
    await this.plugin.saveSettings();
  }
};

// src/main.ts
var SystemSculptPlugin = class extends import_obsidian34.Plugin {
  async onload() {
    try {
      this.settingsManager = new SettingsManager(this);
      await this.settingsManager.loadSettings();
      this.settings = this.settingsManager.getSettings();
      try {
        const registeredExtensions = this.app.viewRegistry.typeByExtension;
        if (!(registeredExtensions == null ? void 0 : registeredExtensions.srt)) {
          this.registerExtensions(["srt"], "markdown");
        }
      } catch (error) {
        console.error("Failed to register .srt extension:", error);
      }
      try {
        this.customProviderService = new CustomProviderService(this);
        this.modelService = ModelService.getInstance(this, this.customProviderService);
        this.aiService = SystemSculptService.getInstance(this.settings, this.app);
        this.transcriptionService = TranscriptionService.getInstance(this);
        this.recorderService = RecorderService.getInstance(this.app, this);
        this.contextMenu = new SystemSculptContextMenu(this.app, this.aiService, this);
        SystemPromptService.setSystemSculptService(this.aiService);
      } catch (error) {
        console.error("Failed to initialize core services:", error);
        throw error;
      }
      this.settingsTab = new SystemSculptSettingTab(this.app, this);
      this.addSettingTab(this.settingsTab);
      try {
        this.licenseManager = new LicenseManager(this, this.app);
        this.tasksService = new TasksService(this);
        this.viewManager = new ViewManager(this, this.app);
        this.commandManager = new CommandManager(this, this.app);
        this.viewManager.initialize();
        this.commandManager.registerCommands();
      } catch (error) {
        console.error("Failed to initialize managers:", error);
        throw error;
      }
      SystemPromptService.initializeCache().catch((error) => {
        console.error("Failed to initialize system prompts cache:", error);
      });
      await this.getLicenseManager().initializeLicense();
    } catch (error) {
      console.error("Failed to load SystemSculpt plugin:", error);
      throw error;
    }
  }
  async onunload() {
    console.log("SystemSculpt AI plugin unloading...");
    try {
      if (this.settingsTab) {
      }
      if (this.commandManager) {
        const commands = [
          "open-tasks-file",
          "toggle-audio-recorder",
          "open-systemsculpt-chat",
          "open-chat-history",
          "open-systemsculpt-janitor",
          "reload-obsidian",
          "open-systemsculpt-settings",
          "change-chat-model",
          "chat-with-file",
          "suggest-edits",
          "clear-suggested-edits",
          "move-task-up",
          "move-task-down",
          "indent-task-right",
          "indent-task-left"
        ];
        commands.forEach((id) => {
          this.app.commands.removeCommand(`${this.manifest.id}:${id}`);
        });
      }
      if (this.viewManager) {
        this.viewManager.unloadViews();
      }
      if (this.contextMenu) {
      }
      if (this.recorderService) {
        this.recorderService.unload();
      }
      if (this.transcriptionService) {
        this.transcriptionService.unload();
        TranscriptionService.instance = null;
      }
      if (this.aiService) {
        SystemSculptService.instance = null;
      }
      if (this.modelService) {
        ModelService.instance = null;
      }
      if (this.customProviderService) {
      }
      SystemPromptService.clearCache();
      try {
        const registeredExtensions = this.app.viewRegistry.typeByExtension;
        if (registeredExtensions == null ? void 0 : registeredExtensions.srt) {
          delete registeredExtensions.srt;
        }
      } catch (error) {
        console.error("Failed to unregister .srt extension:", error);
      }
      console.log("SystemSculpt AI plugin unloaded successfully");
    } catch (error) {
      console.error("Error during plugin cleanup:", error);
      throw error;
    }
  }
  async loadData() {
    return super.loadData();
  }
  async saveData(data) {
    return super.saveData(data);
  }
  async saveSettings() {
    await this.settingsManager.saveSettings();
  }
  getRecorderService() {
    return this.recorderService;
  }
  getTranscriptionService() {
    return this.transcriptionService;
  }
  getLicenseManager() {
    return this.licenseManager;
  }
  getSettingsManager() {
    return this.settingsManager;
  }
  getInitialModels() {
    return this.modelService.getModels();
  }
};
//# sourceMappingURL=data:application/json;base64,
